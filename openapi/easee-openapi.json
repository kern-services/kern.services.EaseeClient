{
	"openapi": "3.0.1",
	"info": {
		"title": "Easee Cloud API",
		"description": "Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>",
		"version": "v1"
	},
	"servers": [
		{
			"url": "https://api.easee.cloud"
		},
		{
			"url": "https://api.easee.cloud"
		}
	],
	"paths": {
		"/api/accounts/login": {
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Authentication",
				"description": "Authenticate and retrieve access Token.",
				"requestBody": {
					"description": "Username and password",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.LoginDto"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.LoginDto"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.LoginDto"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.LoginDto"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.UserAdministration.DTO.UserToken"
								}
							}
						}
					}
				}
			}
		},
		"/api/accounts/refresh_token": {
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Refresh Token",
				"description": "Refresh access token.",
				"requestBody": {
					"description": "Access token and refresh token",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.RefreshTokenDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.RefreshTokenDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.RefreshTokenDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.RefreshTokenDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.UserAdministration.DTO.UserToken"
								}
							}
						}
					}
				}
			}
		},
		"/api/accounts/{accountId}/invalidate_token": {
			"delete": {
				"tags": [
					"Account"
				],
				"summary": "Invalidate refresh token",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The id for which the token belongs",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "token",
						"in": "query",
						"description": "Optional. Token to invalidate. If not present, all tokens for the accountId will be invalidated",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/accounts/profile": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Profile Info",
				"description": "Get profile info of logged in account.",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Account.ProfileDTO"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/accounts/products": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Products",
				"description": "Get products of logged in account. Product can be either charger or equalizer.",
				"parameters": [
					{
						"name": "userId",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.AccessControl.Domain.DTO.SiteDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/accounts/chargers": {
			"get": {
				"tags": [
					"Account"
				],
				"summary": "Chargers",
				"description": "Replaced with products endpoint.",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.AccessControl.Domain.DTO.SiteDTO"
									}
								}
							}
						}
					}
				},
				"deprecated": true
			},
			"post": {
				"tags": [
					"Account"
				],
				"summary": "Add Charger",
				"description": "Replaced with products endpoint.",
				"requestBody": {
					"description": "Charger/equalizer PIN code details.",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.ProductPinDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.ProductPinDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.ProductPinDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.ProductPinDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				},
				"deprecated": true
			}
		},
		"/api/accounts/chargers/{serial_no}": {
			"delete": {
				"tags": [
					"Account"
				],
				"summary": "Remove Charger",
				"description": "Replaced with products endpoint.",
				"parameters": [
					{
						"name": "serial_no",
						"in": "path",
						"description": "Charger/equalizer identifier",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				},
				"deprecated": true
			}
		},
		"/api/chargers/{id}/pair": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Pair",
				"description": "Pair a charger to an account.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pinCode",
						"in": "query",
						"description": "Charger PIN",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/chargers/{id}/unpair": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Unpair",
				"description": "Unpair a charger from an account.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pinCode",
						"in": "query",
						"description": "Charger PIN",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/chargers/{id}/partners": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Set Partner",
				"description": "Set partner of a charger.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Partner ID",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.PairChargerPartnerDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.PairChargerPartnerDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.PairChargerPartnerDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.PairChargerPartnerDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Partner",
				"description": "Get partner of charger.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.AccessControl.Models.PartnerDetailedDTO"
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/partners/{partnerId}": {
			"delete": {
				"tags": [
					"Charger"
				],
				"summary": "Remove Partner",
				"description": "Remove partner from a charger.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "partnerId",
						"in": "path",
						"description": "Partner ID",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/chargers/{id}/permission": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Grant Charger Access",
				"description": "Grant permissions to the charger for a given phone number.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "User phone number",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.ChargerPermissionRequestDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.ChargerPermissionRequestDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.ChargerPermissionRequestDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.ChargerPermissionRequestDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"Charger"
				],
				"summary": "Remove Charger Access",
				"description": "Remove permission from the charger for a given phone number.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "phone_no",
						"in": "query",
						"description": "Phone number",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "email",
						"in": "query",
						"description": "Email",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Permissions",
				"description": "Get permissions to the charger.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.AccessControl.Domain.DTO.UserChargerDTO"
									}
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/accept": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Accept Invitation",
				"description": "Accept user invitation to access a charger.",
				"parameters": [
					{
						"name": "email",
						"in": "query",
						"description": "Charger user permission invitation acceptance token",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "invitation_id",
						"in": "query",
						"description": "Charger user permission invitation acceptance invitation_id",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/chargers/{id}/access": {
			"put": {
				"tags": [
					"Charger"
				],
				"summary": "Set Charger Access",
				"description": "Set access level to the charger.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Access level",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"Charger"
				],
				"summary": "Remove Charger Access",
				"description": "Delete access level from the charger.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/health": {
			"get": {
				"tags": [
					"Health",
					"Health"
				],
				"summary": "Health",
				"description": "Get API health. Mostly used by load balancer.",
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/owner": {
			"post": {
				"tags": [
					"Site"
				],
				"summary": "Change Site Owner",
				"description": "Change site owner (Global Admin, Partner Admin or Site Owner).",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "New Owner",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SiteOwnerDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SiteOwnerDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SiteOwnerDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SiteOwnerDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/siteGroups": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Site Groups",
				"description": "Get site groups for a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Partners.Domain.Entities.PartnerSiteGroup"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/users": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Users",
				"description": "Get all users for a site with permissions.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.UserAdministration.Domain.DTO.SitePermissionDTO"
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/lookup_user": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "User to Invite",
				"description": "Get user by phone number to invite to site. (Site Admin)",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "phone_no",
						"in": "query",
						"description": "Send invite to phone no",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.UserAdministration.Domain.DTO.BasicProfile"
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/lookup_admin": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Get User to Invite as Admin",
				"description": "Get user by phone number to invite to the site as administrator. (Site Admin)",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "phone_no",
						"in": "query",
						"description": "Send invite to phone no",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.UserAdministration.Domain.DTO.BasicProfile"
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/invite": {
			"post": {
				"tags": [
					"Site"
				],
				"summary": "Send Site Invitation",
				"description": "Send site invitation to user for access to the site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Invitation Request with user phone number and role",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SitePermissionRequestDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SitePermissionRequestDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SitePermissionRequestDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SitePermissionRequestDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/reinvite": {
			"post": {
				"tags": [
					"Site"
				],
				"summary": "Resend Site Invitation",
				"description": "Resend site invitation to user for access to the site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "site permisssion reinvite request",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SitePermissionRequestDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SitePermissionRequestDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SitePermissionRequestDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.AccessControl.Models.SitePermissionRequestDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/accept": {
			"post": {
				"tags": [
					"Site"
				],
				"summary": "Accept Site Invitation",
				"description": "Accept site invitation for access to the site.",
				"parameters": [
					{
						"name": "email",
						"in": "query",
						"description": "Site user permission invitation acceptance token",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Site user permission invitation acceptance token",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"type": "string"
							}
						},
						"application/json": {
							"schema": {
								"type": "string"
							}
						},
						"text/json": {
							"schema": {
								"type": "string"
							}
						},
						"application/*+json": {
							"schema": {
								"type": "string"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/permission": {
			"delete": {
				"tags": [
					"Site"
				],
				"summary": "Delete Site Permission",
				"description": "Delete user permission for a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "phone_no",
						"in": "query",
						"description": "User Phone Number",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "email",
						"in": "query",
						"description": "user email",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"put": {
				"tags": [
					"Site"
				],
				"summary": "Updates a site user's permissions",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateSitePermissionRequestDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateSitePermissionRequestDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateSitePermissionRequestDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateSitePermissionRequestDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/access": {
			"put": {
				"tags": [
					"Site"
				],
				"summary": "Access Level - All Chargers",
				"description": "Set access level for all chargers on a site.<br /> Access Level can be Everyone, Registered Users og White\r\nListed Users.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Access level",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/chargers/level_of_access": {
			"put": {
				"tags": [
					"Site"
				],
				"summary": "Access Level - Chargers",
				"description": "Set or delete access level for specified chargers.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Chargers with Access Level",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.ChargerAccessDTO"
								}
							}
						},
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.ChargerAccessDTO"
								}
							}
						},
						"text/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.ChargerAccessDTO"
								}
							}
						},
						"application/*+json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.ChargerAccessDTO"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/request_access": {
			"post": {
				"tags": [
					"Site"
				],
				"summary": "Request site access by logged in user(installer)",
				"description": "Request site access by logged in user(installer) and send email to the site owner.\r\nRate limited at max 5 request per 30 minutes.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Site permission (allowed only admin or user)",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.SiteUserRole"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.SiteUserRole"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.SiteUserRole"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.Enums.SiteUserRole"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/access/token": {
			"post": {
				"tags": [
					"Token"
				],
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": {
								"required": [
									"resource"
								],
								"type": "object",
								"properties": {
									"resource": {
										"type": "string"
									}
								}
							},
							"encoding": {
								"resource": {
									"style": "form"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/chargers": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Chargers",
				"description": "Get chargers.<br />If role is Partner, all partner chargers will be returned.<br />If role is User, the users\r\nchargers will be returned.<br />Rate limited: Rate limited at max 2 requests per minute",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.BasicChargerDTO"
									}
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Charger",
				"description": "Get a specified charger.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerDTO"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/details": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Charger Details",
				"description": "Get charger details.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerInfoDTO"
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/site": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Site",
				"description": "Get charger site.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Ports.SiteDTO"
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/config": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Get Configuration",
				"description": "Get charger configuration.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerConfigurationDTO"
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/state": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "State",
				"description": "Get charger state.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerStateDTO"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/usage/hourly/{from}/{to}": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Power Usage",
				"description": "Get hourly power usage for a given period.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					},
					{
						"name": "from",
						"in": "path",
						"description": "From (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "From (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "path",
						"description": "To (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "To (ISO8601 datetime)",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.AggregatedUsageDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/errors/{from}/{to}": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Errors",
				"description": "Get errors for a given period.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					},
					{
						"name": "from",
						"in": "path",
						"description": "From (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "From (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "path",
						"description": "To (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "To (ISO8601 datetime)",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Masterloop.Core.Types.Observations.Observation"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/observations/{observationId}/{from}/{to}": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Observations",
				"description": "Get observations for a given period.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					},
					{
						"name": "observationId",
						"in": "path",
						"description": "Observation ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Observation ID",
							"format": "int32"
						}
					},
					{
						"name": "from",
						"in": "path",
						"description": "From (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "From (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "path",
						"description": "To (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "To (ISO8601 datetime)",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Masterloop.Core.Types.Observations.Observation"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/comments": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Comments",
				"description": "Get user comments for a charger.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.CommentDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/log_events/{logType}/{from}/{to}": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Log Events",
				"description": "Get log events in a given period.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					},
					{
						"name": "logType",
						"in": "path",
						"description": "Log type",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Easee.Core.Enums.LogType"
						}
					},
					{
						"name": "from",
						"in": "path",
						"description": "From timestamp (ISO8601 string)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "From timestamp (ISO8601 string)",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "path",
						"description": "To timestamp (ISO8601 string)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "To timestamp (ISO8601 string)",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerLogEventDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/basic_charge_plan": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Basic Charge Plan",
				"description": "Get basic charge plan of charger.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargePlanDTO"
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Set Basic Charge Plan",
				"description": "Set basic charge plan of charger. IsEnabled attribute allow to IsEnabled the charge plan",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"requestBody": {
					"description": "Charge plan",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargePlanDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargePlanDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargePlanDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargePlanDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "All commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\"\r\nhub and match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			},
			"delete": {
				"tags": [
					"Charger"
				],
				"summary": "Delete Basic Charge Plan",
				"description": "Delete basic charge plan of charger.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "All commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\"\r\nhub and match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/weekly_charge_plan": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Weekly Charge Plan",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.WeeklyChargeScheduleResponseDTO"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Set Weekly Charge Plan",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"requestBody": {
					"description": "Weekly charge plan details",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.WeeklyChargeScheduleRequestDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.WeeklyChargeScheduleRequestDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.WeeklyChargeScheduleRequestDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.WeeklyChargeScheduleRequestDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "All commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\"\r\nhub and match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			},
			"delete": {
				"tags": [
					"Charger"
				],
				"summary": "Remove Weekly Charge Plan",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "All commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\"\r\nhub and match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/charge_schedule/features": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Turn on or off charge schedule features.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "charger id",
						"required": true,
						"schema": {
							"type": "string",
							"description": "charger id",
							"nullable": true
						}
					}
				],
				"requestBody": {
					"description": "charge schedule feature request",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.ScheduleFeatureRequestDto"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.ScheduleFeatureRequestDto"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.ScheduleFeatureRequestDto"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.ScheduleFeatureRequestDto"
							}
						}
					}
				},
				"responses": {
					"202": {
						"description": "All commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\"\r\nhub and match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/settings": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Change Charger Settings",
				"description": "Charger settings to update. Please only specify keys you want to change. Endpoint handles partial JSON objects\r\nand will give a 400 response if it does not understand the request.<br />Will only forward commands to device if\r\nnew value != old value <br /> Rate limited at max 20 requests per minute.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"requestBody": {
					"description": "Charger settings to set",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerSettingDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerSettingDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerSettingDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerSettingDTO"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "All commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\"\r\nhub and match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/lock_state": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Set Cable Lock State",
				"description": "If state = true, cable always locked in charger. state = false, cable is unlocked when car is disconnected",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"requestBody": {
					"description": "Cable lock state",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.LockStateDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.LockStateDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.LockStateDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.LockStateDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub\r\nand match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/poll_lifetimeenergy": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Polls for a new Energy Reading",
				"description": "Rate limited to once every 3 minutes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub\r\nand match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/poll_chargeropmode": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Polls for a new Charger Op Mode",
				"description": "Rate limited to once every 3 minutes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub\r\nand match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/reboot": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Reboot",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Command successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub and\r\nmatch command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/update_firmware": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Update Firmware",
				"description": "Updates firmware to latest public release",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "All commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\"\r\nhub and match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/smart_charging": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Enable Smart Charging",
				"description": "Disable by using the 'settings' endpoint",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Command successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub and\r\nmatch command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/start_charging": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Start Charging",
				"description": "Allows a charger with 'authorizationRequired' = true to deliver power. Otherwise it will have no effect",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Command successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub and\r\nmatch command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/stop_charging": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Stop Charging",
				"description": "Stops a charger with an active authorization from delivering power and revokes authorization. Will have no\r\neffect if 'authorizationRequired' is false or charger is not authorized",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Command successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub and\r\nmatch command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/pause_charging": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Pause Charging",
				"description": "Pauses current charging session but keeps authorization. Limits dynamic charger current to 0. <br />Reset on\r\non new car connection",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Command successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub and\r\nmatch command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/resume_charging": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Resume Charging",
				"description": "Resumes current charging session. Resets output current limit set in dynamic charger current",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Command successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub and\r\nmatch command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/toggle_charging": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Toggle Charging",
				"description": "Send charging command (Start/Stop or Pause/Resume). For chargers requiring online authorization, start/stop\r\ncommands are used. <br />For chargers without online authorization,  pause/resume commands are used.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub\r\nand match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/override_schedule": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Override Charging Schedule",
				"description": "Allows current session to charge immediately provided that schedule is the only mechanism stopping charge\r\ncurrently.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Command successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub and\r\nmatch command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/scan_wifi": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Scan Wi-Fi",
				"description": "Sends a Wi-Fi scan command to the charger. Result available in SignalR command responses and observations.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"requestBody": {
					"description": "Limits the time spent by firmware to scan",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ScanWifiSettingDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ScanWifiSettingDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ScanWifiSettingDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ScanWifiSettingDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Command successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub and\r\nmatch command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/set_wifi_config": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Set Wi-Fi Configuration",
				"description": "Sends Wi-Fi configuration to the charger. The charger may be unavailable up to 1 hour if incorrect values are\r\nset in firmware",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"requestBody": {
					"description": "SSID and Password",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.WifiConfigDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.WifiConfigDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.WifiConfigDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.WifiConfigDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Configuration successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\"\r\nhub and match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/commands/set_rfid_pairing_mode_async": {
			"post": {
				"tags": [
					"Charger"
				],
				"summary": "Pair RFID Tag",
				"description": "Pair new RFID tag with charger. Listen to the \"CommandResponse\" stream and observation '69:PairedUserIDToken'\r\nto get the new token as read by the charger",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"requestBody": {
					"description": "Pair RFID settings",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.PairRFIDSettingsDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.PairRFIDSettingsDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.PairRFIDSettingsDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.PairRFIDSettingsDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "All commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\"\r\nhub and match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/{id}/sessions/latest": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Latest Charging Session",
				"description": "Get last updated charging session.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.UsageStatisticsDTO"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/{id}/sessions/ongoing": {
			"get": {
				"tags": [
					"Charger"
				],
				"summary": "Ongoing Charging Session",
				"description": "Get current state of ongoing charging session.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.UsageStatisticsDTO"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/user/{id}/total/{from}/{to}": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "User Power Usage",
				"description": "Get power usage (kWh/amount) for a user for a specific period. Rate limited at max 20 requests per 10 minutes.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "User ID",
							"format": "int32"
						}
					},
					{
						"name": "from",
						"in": "path",
						"description": "From (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "From (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "path",
						"description": "To (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "To (ISO8601 datetime)",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/user/{id}/sessions/{from}/{to}": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "User Sessions",
				"description": "Get charging sessions for a user for a specific period. Rate limited at max 20 requests per 10 minutes.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "User ID",
							"format": "int32"
						}
					},
					{
						"name": "from",
						"in": "path",
						"description": "From (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "From (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "path",
						"description": "To (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "To (ISO8601 datetime)",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.ChargeSessionDTO"
									}
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/user/{id}/yearly": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "User Sessions - Yearly",
				"description": "Get yearly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "User ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.YearlySummaryDTO"
									}
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/user/{id}/monthly": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "User Sessions - Monthly",
				"description": "Get monthly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "User ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.MonthlySummaryDTO"
									}
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/user/{id}/weekly": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "User Sessions - Weekly",
				"description": "Get weekly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User Id",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "User Id",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.WeeklySummaryDTO"
									}
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/user/{id}/breakdown/{from}/{to}": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "User Sessions - Grouped by Charger",
				"description": "Get charging sessions grouped by chargers for a user. Rate limited at max 20 requests per 10 minutes.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "User ID",
							"format": "int32"
						}
					},
					{
						"name": "from",
						"in": "path",
						"description": "From (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "From (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "path",
						"description": "To (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "To (ISO8601 datetime)",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.ChargingSessionDetailDTO"
									}
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/charger/{chargerId}/total/{from}/{to}": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "Charger Power Usage",
				"description": "Get power usage (kWh/amount) for a charger for a specific period.",
				"parameters": [
					{
						"name": "chargerId",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					},
					{
						"name": "from",
						"in": "path",
						"description": "From (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "From (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "path",
						"description": "To (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "To (ISO8601 datetime)",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/charger/{chargerId}/sessions/{from}/{to}": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "Charger Sessions",
				"description": "Get charging sessions for a charger for a specific period. Rate limited at max 20 requests per 10 minutes.",
				"parameters": [
					{
						"name": "chargerId",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					},
					{
						"name": "from",
						"in": "path",
						"description": "From (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "From (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "path",
						"description": "To (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "To (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "rfidKeys",
						"in": "query",
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.ChargeSessionDTO"
									}
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/charger/{chargerId}/monthly": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "Charger Sessions - Monthly",
				"description": "Get monthly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.",
				"parameters": [
					{
						"name": "chargerId",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					},
					{
						"name": "rfidKeys",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.MonthlySummaryDTO"
									}
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/charger/{chargerId}/yearly": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "Charger Sessions - Yearly",
				"description": "Get Yearly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.",
				"parameters": [
					{
						"name": "chargerId",
						"in": "path",
						"description": "Charger Id",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger Id",
							"nullable": true
						}
					},
					{
						"name": "rfidKeys",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.YearlySummaryDTO"
									}
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/charger/{chargerId}/daily": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "Charger Sessions - Daily",
				"description": "Get Daily charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.",
				"parameters": [
					{
						"name": "chargerId",
						"in": "path",
						"description": "Charger Id",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger Id",
							"nullable": true
						}
					},
					{
						"name": "rfidKeys",
						"in": "query",
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.DailySummaryDTO"
									}
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/charger/{chargerId}/hourly": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "Charger Sessions - Hourly",
				"description": "Get Hourly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.",
				"parameters": [
					{
						"name": "chargerId",
						"in": "path",
						"description": "Charger Id",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger Id",
							"nullable": true
						}
					},
					{
						"name": "rfidKeys",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.HourlySummaryDTO"
									}
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/sessions/export/{siteId}/{category}/{from}/{to}": {
			"get": {
				"tags": [
					"ChargeSession"
				],
				"summary": "Site Consumption Report",
				"description": "Get site consumption report.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "category",
						"in": "path",
						"description": "Report Type",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Easee.Core.Enums.ReportCategory"
						}
					},
					{
						"name": "from",
						"in": "path",
						"description": "From (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "From (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "path",
						"description": "To (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "To (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "chargerId",
						"in": "query",
						"description": "",
						"schema": {
							"type": "string",
							"description": "",
							"nullable": true
						}
					},
					{
						"name": "rfidKeys",
						"in": "query",
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "",
							"nullable": true
						}
					},
					{
						"name": "tz",
						"in": "query",
						"schema": {
							"type": "string",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "string",
									"format": "binary"
								}
							}
						}
					}
				}
			}
		},
		"/api/commands/{device}/{command}/{ticks}": {
			"get": {
				"tags": [
					"Commands"
				],
				"summary": "Get State",
				"description": "Gets the state of a command. Status can be  1-Sent, 2-Expired, 3-Executed og 4-Rejected.",
				"parameters": [
					{
						"name": "device",
						"in": "path",
						"description": "Serial number",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Serial number",
							"nullable": true
						}
					},
					{
						"name": "command",
						"in": "path",
						"description": "Command ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Command ID",
							"format": "int32"
						}
					},
					{
						"name": "ticks",
						"in": "path",
						"description": "Timestamp set by sender in ticks",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Timestamp set by sender in ticks",
							"format": "int64"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Detailed response about command state",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Commands.CommandResponseDto"
								}
							}
						}
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"404": {
						"description": "Unable to find a command matching the input parameters"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/consumption/total": {
			"get": {
				"tags": [
					"Consumption"
				],
				"summary": "Get total consumption endpoint",
				"parameters": [
					{
						"name": "chargerIds",
						"in": "query",
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "",
							"nullable": true
						}
					},
					{
						"name": "fromDateTimeUtc",
						"in": "query",
						"description": "",
						"schema": {
							"type": "string",
							"description": "",
							"format": "date-time",
							"nullable": true
						}
					},
					{
						"name": "toDateTimeUtc",
						"in": "query",
						"description": "",
						"schema": {
							"type": "string",
							"description": "",
							"format": "date-time",
							"nullable": true
						}
					},
					{
						"name": "grouping",
						"in": "query",
						"description": "",
						"schema": {
							"$ref": "#/components/schemas/Easee.BusinessLayer.Managers.TotalConsumption.TotalConsumptionAggregationType"
						}
					},
					{
						"name": "tz",
						"in": "query",
						"description": "",
						"schema": {
							"type": "string",
							"description": "",
							"default": "GMT",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.BusinessLayer.Managers.TotalConsumption.TotalConsumptionPeriod"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/equalizers/{id}": {
			"get": {
				"tags": [
					"Equalizer"
				],
				"summary": "Equalizer",
				"description": "Get equalizer.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Equalizer ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Equalizer ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.EqualizerDTO"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/equalizers/{id}/details": {
			"get": {
				"tags": [
					"Equalizer"
				],
				"summary": "Equalizer Details",
				"description": "Get equalizer details.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Equalizer ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Equalizer ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.DetailedEqualizerDTO"
								}
							}
						}
					}
				}
			}
		},
		"/api/equalizers/{id}/config": {
			"get": {
				"tags": [
					"Equalizer"
				],
				"summary": "Configuration",
				"description": "Get equalizer configuration.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Equalizer ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Equalizer ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.EqualizerConfigurationDTO"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
								}
							}
						}
					}
				}
			}
		},
		"/api/equalizers/{id}/state": {
			"get": {
				"tags": [
					"Equalizer"
				],
				"summary": "State",
				"description": "Get current equalizer state.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Equalizer ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Equalizer ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.EqualizerStateDTO"
								}
							}
						}
					}
				}
			}
		},
		"/api/equalizers/{id}/site": {
			"get": {
				"tags": [
					"Equalizer"
				],
				"summary": "Site",
				"description": "Get equalizer site.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Equalizer ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Equalizer ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.SiteDTO"
								}
							}
						}
					}
				}
			}
		},
		"/api/equalizers/{id}/commands/reboot": {
			"post": {
				"tags": [
					"Equalizer"
				],
				"summary": "Reboot",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Equalizer ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Equalizer ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Command successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub and\r\nmatch command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/equalizers/{id}/commands/configure_meter_type": {
			"post": {
				"tags": [
					"Equalizer"
				],
				"summary": "Configure Meter Type",
				"description": "Configure the meter type for an equalizer. To change the equalizer meter type from P1/HAN to Modbus, set <i>deviceMode</i> to 2 and set the <i>externalMeterType</i>(1-4)\r\nTo change the equalizer back to P1/HAN set only <i>deviceMode</i> to 1 since <i>externalMeterType</i> is only applicable to Modbus\r\nRate limited at max 1 request per minute",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Equalizer ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Equalizer ID",
							"nullable": true
						}
					}
				],
				"requestBody": {
					"description": "Meter settings",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.MeterSettingsDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.MeterSettingsDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.MeterSettingsDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.MeterSettingsDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Command successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub and\r\nmatch command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/equalizers/{id}/commands/configure_max_allocated_current": {
			"post": {
				"tags": [
					"Equalizer"
				],
				"summary": "Set max allocated current",
				"description": "Configure max allocated current for the whole charge installation\r\nRate limited max 1 requests per minute",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Equalizer ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Equalizer ID",
							"nullable": true
						}
					}
				],
				"requestBody": {
					"description": "Max current allocated settings",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.MaxAllocatedCurrentDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.MaxAllocatedCurrentDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.MaxAllocatedCurrentDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.MaxAllocatedCurrentDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Command successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\" hub and\r\nmatch command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/equalizers/{id}/commands/update_firmware": {
			"post": {
				"tags": [
					"Equalizer"
				],
				"summary": "Update Firmware",
				"description": "Updates firmware to latest public release",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Equalizer ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Equalizer ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "All commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\"\r\nhub and match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/chargers/lifetime-energy/{id}/all": {
			"get": {
				"tags": [
					"LifetimeEnergyReporting"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"nullable": true
						}
					},
					{
						"name": "from",
						"in": "query",
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "query",
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Services.LifetimeEnergyReporting.GetAllMeasurementsResponse"
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/lifetime-energy/{id}/hourly": {
			"get": {
				"tags": [
					"LifetimeEnergyReporting"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"nullable": true
						}
					},
					{
						"name": "from",
						"in": "query",
						"schema": {
							"type": "string",
							"format": "date-time",
							"nullable": true
						}
					},
					{
						"name": "to",
						"in": "query",
						"schema": {
							"type": "string",
							"format": "date-time",
							"nullable": true
						}
					},
					{
						"name": "tz",
						"in": "query",
						"schema": {
							"type": "string",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Services.LifetimeEnergyReporting.AggregatedLifetimeEnergy"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/lifetime-energy/{id}/daily": {
			"get": {
				"tags": [
					"LifetimeEnergyReporting"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"nullable": true
						}
					},
					{
						"name": "from",
						"in": "query",
						"schema": {
							"type": "string",
							"format": "date-time",
							"nullable": true
						}
					},
					{
						"name": "to",
						"in": "query",
						"schema": {
							"type": "string",
							"format": "date-time",
							"nullable": true
						}
					},
					{
						"name": "tz",
						"in": "query",
						"schema": {
							"type": "string",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Services.LifetimeEnergyReporting.AggregatedLifetimeEnergy"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/lifetime-energy/{id}/monthly": {
			"get": {
				"tags": [
					"LifetimeEnergyReporting"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"nullable": true
						}
					},
					{
						"name": "from",
						"in": "query",
						"schema": {
							"type": "string",
							"format": "date-time",
							"nullable": true
						}
					},
					{
						"name": "to",
						"in": "query",
						"schema": {
							"type": "string",
							"format": "date-time",
							"nullable": true
						}
					},
					{
						"name": "tz",
						"in": "query",
						"schema": {
							"type": "string",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Services.LifetimeEnergyReporting.AggregatedLifetimeEnergy"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/lifetime-energy/{id}/yearly": {
			"get": {
				"tags": [
					"LifetimeEnergyReporting"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"nullable": true
						}
					},
					{
						"name": "from",
						"in": "query",
						"schema": {
							"type": "string",
							"format": "date-time",
							"nullable": true
						}
					},
					{
						"name": "to",
						"in": "query",
						"schema": {
							"type": "string",
							"format": "date-time",
							"nullable": true
						}
					},
					{
						"name": "tz",
						"in": "query",
						"schema": {
							"type": "string",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Services.LifetimeEnergyReporting.AggregatedLifetimeEnergy"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/chargers/lifetime-energy/{id}/configure": {
			"put": {
				"tags": [
					"LifetimeEnergyReporting"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"nullable": true
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Services.LifetimeEnergyReporting.LifetimeEnergyMeasurementSettingsRequest"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Services.LifetimeEnergyReporting.LifetimeEnergyMeasurementSettingsRequest"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Services.LifetimeEnergyReporting.LifetimeEnergyMeasurementSettingsRequest"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Services.LifetimeEnergyReporting.LifetimeEnergyMeasurementSettingsRequest"
							}
						}
					}
				},
				"responses": {
					"202": {
						"description": "Success"
					}
				}
			}
		},
		"/api/resources/countries": {
			"get": {
				"tags": [
					"Resources"
				],
				"summary": "Countries",
				"description": "Get countries.",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CountryDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/resources/countries/active": {
			"get": {
				"tags": [
					"Resources"
				],
				"summary": "Active Countries",
				"description": "Get active countries.",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CountryDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/resources/currencies": {
			"get": {
				"tags": [
					"Resources"
				],
				"summary": "Currencies",
				"description": "Get currencies.",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.Models.Site.Currency"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/resources/observation_properties": {
			"get": {
				"tags": [
					"Resources"
				],
				"summary": "Observations Properties",
				"description": "Gets all Observation Properties (ID and name).",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ObservationPropertyDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Get Sites",
				"description": "Get sites for logged in user. Offset and limits are used if \"search\" is specified.",
				"parameters": [
					{
						"name": "search",
						"in": "query",
						"schema": {
							"type": "string",
							"nullable": true
						}
					},
					{
						"name": "offset",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Site.BasicSiteDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Get Site",
				"description": "Get a site by id.",
				"operationId": "GetSiteById",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "detailed",
						"in": "query",
						"description": "Whether to include site details",
						"schema": {
							"type": "boolean",
							"description": "Whether to include site details",
							"default": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.DetailSiteDTO"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": [
					"Site"
				],
				"summary": "Update Site (Partial)",
				"description": "More info: <a>http://jsonpatch.com</a><br />\r\nFor example to change only <b>Name</b> and <b>Site Type</b> of site: <br />\r\n[\r\n{ \"op\": \"replace\", \"path\": \"/name\", \"value\": \"test site\" },\r\n{ \"op\": \"replace\", \"path\": \"/siteType\", \"value\": 2 }\r\n]",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Site properties to update",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
								},
								"description": "Site properties to update",
								"nullable": true
							}
						},
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
								},
								"description": "Site properties to update",
								"nullable": true
							}
						},
						"text/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
								},
								"description": "Site properties to update",
								"nullable": true
							}
						},
						"application/*+json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
								},
								"description": "Site properties to update",
								"nullable": true
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"Site"
				],
				"summary": "Delete Site",
				"description": "Delete site (Global Admin or Partner Admin).",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/state": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Dashboard Circuit States",
				"operationId": "GetSiteState",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site identifier.",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site identifier.",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Dashboard.DashboardStateDTO"
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/price": {
			"post": {
				"tags": [
					"Site"
				],
				"summary": "Set Charging Price",
				"description": "Set fixed cost per kWh for a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Fixed cost per kilowatt hour and currency id",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.SiteCostDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.SiteCostDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.SiteCostDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.SiteCostDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/chargers": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Chargers",
				"description": "Get all chargers on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Ports.ChargerDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/circuits/{circuitId}/chargers": {
			"put": {
				"tags": [
					"Site"
				],
				"summary": "Update Chargers",
				"description": "Update a set of chargers on a circuit. Rate limited at max 15 request per minute.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "circuitId",
						"in": "path",
						"description": "Circuit ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Circuit ID",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Charger details array",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerDTO"
								},
								"description": "Charger details array",
								"nullable": true
							}
						},
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerDTO"
								},
								"description": "Charger details array",
								"nullable": true
							}
						},
						"text/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerDTO"
								},
								"description": "Charger details array",
								"nullable": true
							}
						},
						"application/*+json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerDTO"
								},
								"description": "Charger details array",
								"nullable": true
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/equalizers/{equalizerId}": {
			"delete": {
				"tags": [
					"Site"
				],
				"summary": "Remove Equalizer",
				"description": "Remove equalizer from a site. The api will only remove the site and master backpalte id references from databse",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "equalizerId",
						"in": "path",
						"description": "Equalizer ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Equalizer ID",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/yearly": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Usage/Cost - Yearly",
				"description": "Get yearly power usage and cost for charging sessions on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.YearlySummaryDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/monthly": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Usage/Cost - Monthly",
				"description": "Get monthly power usage and cost for charging sessions on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site Id",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site Id",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.MonthlySummaryDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/weekly": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Power Usage/Cost - Weekly",
				"description": "Get weekly power usage and cost for charging sessions on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site Id",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site Id",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.WeeklySummaryDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/breakdown/{from}/{to}": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Usage/Cost",
				"description": "Get power usage and cost for all chargers on a site in a time period.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "from",
						"in": "path",
						"description": "From (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "From (ISO8601 datetime)",
							"format": "date-time"
						}
					},
					{
						"name": "to",
						"in": "path",
						"description": "To (ISO8601 datetime)",
						"required": true,
						"schema": {
							"type": "string",
							"description": "To (ISO8601 datetime)",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.ChargingSessionDetailDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/energy": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Lifetime Energy",
				"description": "Get current lifetime energy for all chargers on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerEnergyDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/circuits/{serialNumber}/{pinCode}": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Circuit Attached",
				"description": "Check if Circuit is attached to a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "serialNumber",
						"in": "path",
						"description": "Main charger serial number",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Main charger serial number",
							"nullable": true
						}
					},
					{
						"name": "pinCode",
						"in": "path",
						"description": "Main charger PIN code",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Main charger PIN code",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Ports.SiteCircuitDTO"
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/circuits": {
			"put": {
				"tags": [
					"Site"
				],
				"summary": "Update Circuits",
				"description": "Update circuits on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Circuit array",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CircuitDTO"
								},
								"description": "Circuit array",
								"nullable": true
							}
						},
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CircuitDTO"
								},
								"description": "Circuit array",
								"nullable": true
							}
						},
						"text/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CircuitDTO"
								},
								"description": "Circuit array",
								"nullable": true
							}
						},
						"application/*+json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CircuitDTO"
								},
								"description": "Circuit array",
								"nullable": true
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"post": {
				"tags": [
					"Site"
				],
				"summary": "Set Circuit",
				"description": "Set circuit with backplates on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site identifier",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site identifier",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Circuit details",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateCircuitDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateCircuitDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateCircuitDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateCircuitDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/circuit_collection": {
			"post": {
				"tags": [
					"Site"
				],
				"summary": "Set Circuits",
				"description": "Create or update circuits with backplates on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Circuit with Backplates",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateCircuitDTO"
								},
								"description": "Circuit with Backplates",
								"nullable": true
							}
						},
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateCircuitDTO"
								},
								"description": "Circuit with Backplates",
								"nullable": true
							}
						},
						"text/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateCircuitDTO"
								},
								"description": "Circuit with Backplates",
								"nullable": true
							}
						},
						"application/*+json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.UpdateCircuitDTO"
								},
								"description": "Circuit with Backplates",
								"nullable": true
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/circuits/{circuitId}": {
			"delete": {
				"tags": [
					"Site"
				],
				"summary": "Delete Circuit",
				"description": "Delete an empty circuit.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "circuitId",
						"in": "path",
						"description": "Circuit ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Circuit ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/circuits/{serialNumber}/{pinCode}/{circuitName}": {
			"put": {
				"tags": [
					"Site"
				],
				"summary": "Start Circuit Move",
				"description": "Initiate a request to move a circuit to a new site. If the source site has an owner then a confirmation email is sent.\r\nIf the source site has no owner then the circuit will be immediately transferred to the new site",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "serialNumber",
						"in": "path",
						"description": "Main Charger Serial Number",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Main Charger Serial Number",
							"nullable": true
						}
					},
					{
						"name": "pinCode",
						"in": "path",
						"description": "Main Charger PIN Code",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Main Charger PIN Code",
							"nullable": true
						}
					},
					{
						"name": "circuitName",
						"in": "path",
						"description": "Circuit Panel Name",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Circuit Panel Name",
							"nullable": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/circuits/confirm": {
			"post": {
				"tags": [
					"Site"
				],
				"summary": "Confirm Circuit Move",
				"description": "Confirm a request made to move a circuit to a new site.",
				"requestBody": {
					"description": "Confirmation token",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"type": "string",
								"description": "Confirmation token",
								"nullable": true
							}
						},
						"application/json": {
							"schema": {
								"type": "string",
								"description": "Confirmation token",
								"nullable": true
							}
						},
						"text/json": {
							"schema": {
								"type": "string",
								"description": "Confirmation token",
								"nullable": true
							}
						},
						"application/*+json": {
							"schema": {
								"type": "string",
								"description": "Confirmation token",
								"nullable": true
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/api/sites/{siteId}/circuits/{circuitId}/settings": {
			"post": {
				"tags": [
					"Site"
				],
				"summary": "Set Circuit Settings",
				"description": "Set circuit settings of a site. Rate limited at max 20 request per minute. <br /> Please only specify keys you\r\nwant to change. Endpoint handles partial JSON objects and will give a 400 response if it does not understand the\r\nrequest.<br />Will only forward values for dynamicCircuitCurrentP1, P2, P3 to device if new value != old value",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "circuitId",
						"in": "path",
						"description": "Circuit ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Circuit ID",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Settings",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CircuitSettingsDTO"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CircuitSettingsDTO"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CircuitSettingsDTO"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CircuitSettingsDTO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			},
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Circuit Settings",
				"description": "Get extended circuit settings for a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "circuitId",
						"in": "path",
						"description": "Circuit ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Circuit ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.ExtendedCircuitSettingsDTO"
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/circuits/{circuitId}/dynamicCurrent": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Dynamic Circuit Current",
				"description": "Get dynamic circuit current of the primary charger",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "circuitId",
						"in": "path",
						"description": "Circuit ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Circuit ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Easee.Core.DTOs.Site.DynamicCircuitCurrentDto"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Site"
				],
				"summary": "Set Dynamic Circuit Current",
				"description": "Set dynamic circuit current. <br />Time to Live should be specified in minutes",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "circuitId",
						"in": "path",
						"description": "Circuit ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Circuit ID",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Dynamic Current Settings",
					"content": {
						"application/json-patch+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.DynamicCircuitCurrentTtlDto"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.DynamicCircuitCurrentTtlDto"
							}
						},
						"text/json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.DynamicCircuitCurrentTtlDto"
							}
						},
						"application/*+json": {
							"schema": {
								"$ref": "#/components/schemas/Easee.Core.DTOs.Site.DynamicCircuitCurrentTtlDto"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "All commands successfully sent to charger. See \"CommandResponse\" SignalR method from \"Products\"\r\nhub and match command responses to the details returned response body"
					},
					"400": {
						"description": "Request has missing/invalid values"
					},
					"401": {
						"description": "Missing authorization data. Check \"Authorization\" header"
					},
					"403": {
						"description": "Forbidden. Authorization set, but access to resource is denied"
					},
					"500": {
						"description": "Oops! Unexpected internal error. Request has been logged and code monkeys warned"
					},
					"503": {
						"description": "Server gateway cannot reach API. Try again in about a minute..."
					},
					"504": {
						"description": "Unable to deliver commands upstream. End device is not reachable, or a problem with queueing the\r\ndevice command"
					}
				}
			}
		},
		"/api/sites/{siteId}/users/{userId}/monthly": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Charger Usage, All Chargers - Monthly",
				"description": "Get monthly charger power usage for a user on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "userId",
						"in": "path",
						"description": "User ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "User ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.MonthlySessionSummaryDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/chargers/{chargerId}/users/{userId}/monthly": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Charger Usage - Monthly",
				"description": "Get monthly charger power usage for a user and a charger on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "chargerId",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					},
					{
						"name": "userId",
						"in": "path",
						"description": "User ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "User ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.MonthlySessionSummaryDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/users/{userId}/yearly": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Charger Usage, All Chargers - Yearly",
				"description": "Get yearly charger power usage for a user on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "userId",
						"in": "path",
						"description": "User ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "User ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.YearlySessionSummaryDTO"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/sites/{siteId}/chargers/{chargerId}/users/{userId}/yearly": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Charger Usage - Yearly",
				"description": "Get yearly charger power usage for a user and a charger on a site.",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"description": "Site ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Site ID",
							"format": "int32"
						}
					},
					{
						"name": "chargerId",
						"in": "path",
						"description": "Charger ID",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Charger ID",
							"nullable": true
						}
					},
					{
						"name": "userId",
						"in": "path",
						"description": "User ID",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "User ID",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Easee.Core.DTOs.Session.YearlySessionSummaryDTO"
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Easee.AccessControl.Domain.DTO.AddressDTO": {
				"type": "object",
				"properties": {
					"street": {
						"type": "string",
						"nullable": true
					},
					"buildingNumber": {
						"type": "string",
						"nullable": true
					},
					"zip": {
						"type": "string",
						"nullable": true
					},
					"area": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"$ref": "#/components/schemas/Easee.AccessControl.Domain.Entities.CountryDTO"
					},
					"latitude": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"longitude": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"altitude": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Domain.DTO.ChargerDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
					},
					"userRole": {
						"$ref": "#/components/schemas/Easee.Core.Enums.SiteUserRole"
					},
					"productCode": {
						"$ref": "#/components/schemas/Easee.Core.Constants.ProductType"
					},
					"backPlate": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.MyProducts.BackPlateDTO"
					},
					"isTemporary": {
						"type": "boolean"
					},
					"color": {
						"$ref": "#/components/schemas/Easee.Core.Enums.ChargerColorType"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Domain.DTO.CircuitDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"circuitPanelId": {
						"type": "integer",
						"format": "int32"
					},
					"panelName": {
						"type": "string",
						"nullable": true
					},
					"ratedCurrent": {
						"type": "number",
						"format": "double"
					},
					"chargers": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.AccessControl.Domain.DTO.ChargerDTO"
						},
						"nullable": true
					},
					"masterBackplate": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.MyProducts.BackPlateDTO"
					},
					"useDynamicMaster": {
						"type": "boolean"
					},
					"parentCircuitId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Domain.DTO.SiteDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"siteKey": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
					},
					"address": {
						"$ref": "#/components/schemas/Easee.AccessControl.Domain.DTO.AddressDTO"
					},
					"siteType": {
						"$ref": "#/components/schemas/Easee.Core.Constants.SiteType"
					},
					"ratedCurrent": {
						"type": "number",
						"format": "double"
					},
					"partnerId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"circuits": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.AccessControl.Domain.DTO.CircuitDTO"
						},
						"nullable": true
					},
					"equalizers": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.MyProducts.EqualizerDTO"
						},
						"nullable": true
					},
					"userRole": {
						"$ref": "#/components/schemas/Easee.Core.Enums.SiteUserRole"
					},
					"allowedSiteActions": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Domain.DTO.UserChargerDTO": {
				"type": "object",
				"properties": {
					"userId": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"phoneNumber": {
						"type": "string",
						"nullable": true
					},
					"email": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Domain.Entities.CountryDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"phonePrefix": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Models.ChargerPermissionRequestDTO": {
				"type": "object",
				"properties": {
					"phoneNo": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Models.LoginDto": {
				"type": "object",
				"properties": {
					"userName": {
						"type": "string",
						"nullable": true
					},
					"password": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Models.PairChargerPartnerDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Models.PartnerDetailedDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"short": {
						"type": "string",
						"nullable": true
					},
					"long": {
						"type": "string",
						"nullable": true
					},
					"bigImage": {
						"type": "string",
						"nullable": true
					},
					"smallImage": {
						"type": "string",
						"nullable": true
					},
					"accountId": {
						"type": "integer",
						"format": "int32"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"smartButtonEnabled": {
						"type": "boolean"
					},
					"authorizationRequired": {
						"type": "boolean"
					},
					"remoteStartRequired": {
						"type": "boolean"
					},
					"localPreAuthorizeEnabled": {
						"type": "boolean"
					},
					"localAuthorizeOfflineEnabled": {
						"type": "boolean"
					},
					"allowOfflineTxForUnknownId": {
						"type": "boolean"
					},
					"offlineChargingMode": {
						"type": "integer",
						"format": "int32"
					},
					"isOperator": {
						"type": "boolean"
					},
					"isInstaller": {
						"type": "boolean"
					},
					"hasAuthManagementSystem": {
						"type": "boolean"
					},
					"useOcppIntegration": {
						"type": "boolean"
					},
					"useAmqpIntegration": {
						"type": "boolean"
					},
					"isTest": {
						"type": "boolean"
					},
					"inProduction": {
						"type": "boolean"
					},
					"authorizeChargingWithEasee": {
						"type": "boolean"
					},
					"subscriptionKey": {
						"type": "string",
						"nullable": true
					},
					"isEasee": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Models.ProductPinDTO": {
				"type": "object",
				"properties": {
					"serialNo": {
						"type": "string",
						"nullable": true
					},
					"pinCode": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Models.RefreshTokenDTO": {
				"type": "object",
				"properties": {
					"accessToken": {
						"type": "string",
						"nullable": true
					},
					"refreshToken": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Models.SiteOwnerDTO": {
				"type": "object",
				"properties": {
					"userId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.AccessControl.Models.SitePermissionRequestDTO": {
				"type": "object",
				"properties": {
					"phoneNo": {
						"type": "string",
						"nullable": true
					},
					"siteUserRole": {
						"$ref": "#/components/schemas/Easee.Core.Enums.SiteUserRole"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.Constants.ProductType": {
				"enum": [
					1,
					100,
					400,
					1000,
					1,
					100,
					400,
					1000
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Constants.SiteType": {
				"enum": [
					1,
					100
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.DTOs.Account.ProfileDTO": {
				"type": "object",
				"properties": {
					"userId": {
						"type": "integer",
						"format": "int32"
					},
					"eMail": {
						"type": "string",
						"nullable": true
					},
					"phoneNo": {
						"type": "string",
						"nullable": true
					},
					"firstName": {
						"type": "string",
						"nullable": true
					},
					"lastName": {
						"type": "string",
						"nullable": true
					},
					"street": {
						"type": "string",
						"nullable": true
					},
					"zipCode": {
						"type": "string",
						"nullable": true
					},
					"city": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"type": "string",
						"nullable": true
					},
					"countryId": {
						"type": "string",
						"nullable": true
					},
					"language": {
						"type": "string",
						"nullable": true
					},
					"emailVerified": {
						"type": "boolean"
					},
					"subscribeNewProductUpdate": {
						"type": "boolean",
						"nullable": true
					},
					"subscribeProductUpdate": {
						"type": "boolean",
						"nullable": true
					},
					"company": {
						"type": "string",
						"nullable": true
					},
					"isActive": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.MyProducts.BackPlateDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"masterBackPlateId": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.MyProducts.EqualizerDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"siteId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"circuitId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.ChargerAccessDTO": {
				"type": "object",
				"properties": {
					"chargerId": {
						"type": "string",
						"nullable": true
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.UpdateSitePermissionRequestDTO": {
				"type": "object",
				"properties": {
					"siteUserRole": {
						"$ref": "#/components/schemas/Easee.Core.Enums.SiteUserRole"
					},
					"userId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.Enums.ChargerColorType": {
				"enum": [
					1,
					2,
					3,
					4,
					5,
					1,
					2,
					3,
					4,
					5
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Enums.LevelOfAccess": {
				"enum": [
					1,
					2,
					3,
					1,
					2,
					3
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Enums.SiteUserRole": {
				"enum": [
					1,
					2,
					3,
					1,
					2,
					3
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Partners.Domain.Entities.PartnerSiteGroup": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"partnerId": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.UserAdministration.DTO.UserToken": {
				"type": "object",
				"properties": {
					"accessToken": {
						"type": "string",
						"nullable": true
					},
					"expiresIn": {
						"type": "integer",
						"format": "int32"
					},
					"accessClaims": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"nullable": true
					},
					"tokenType": {
						"type": "string",
						"nullable": true
					},
					"refreshToken": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.UserAdministration.Domain.DTO.BasicProfile": {
				"type": "object",
				"properties": {
					"userId": {
						"type": "integer",
						"format": "int32"
					},
					"eMail": {
						"type": "string",
						"nullable": true
					},
					"phoneNo": {
						"type": "string",
						"nullable": true
					},
					"fullName": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.UserAdministration.Domain.DTO.SitePermissionDTO": {
				"type": "object",
				"properties": {
					"isOwner": {
						"type": "boolean"
					},
					"siteUsers": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.UserAdministration.Domain.DTO.SiteUserDTO"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.UserAdministration.Domain.DTO.SiteUserDTO": {
				"type": "object",
				"properties": {
					"userId": {
						"type": "integer",
						"format": "int32"
					},
					"email": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"phoneNumber": {
						"type": "string",
						"nullable": true
					},
					"userRole": {
						"$ref": "#/components/schemas/Easee.Core.Enums.SiteUserRole"
					}
				},
				"additionalProperties": false
			},
			"Microsoft.AspNetCore.Mvc.ProblemDetails": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string",
						"nullable": true
					},
					"title": {
						"type": "string",
						"nullable": true
					},
					"status": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"detail": {
						"type": "string",
						"nullable": true
					},
					"instance": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": {}
			},
			"Easee.Core.DTOs.Charger.BasicChargerDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"color": {
						"$ref": "#/components/schemas/Easee.Core.Enums.ChargerColorType"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
					},
					"productCode": {
						"$ref": "#/components/schemas/Easee.Core.Constants.ProductType"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.Enums.BackPlateFeature": {
				"enum": [
					0,
					1
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.DTOs.Charger.BackPlateDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"masterBackPlateId": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"circuitId": {
						"type": "integer",
						"format": "int32",
						"nullable": true,
						"readOnly": true
					},
					"features": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.Enums.BackPlateFeature"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.ChargerDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"color": {
						"$ref": "#/components/schemas/Easee.Core.Enums.ChargerColorType"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"backPlate": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.BackPlateDTO"
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
					},
					"productCode": {
						"$ref": "#/components/schemas/Easee.Core.Constants.ProductType"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Partners.PartnerDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"short": {
						"type": "string",
						"nullable": true
					},
					"long": {
						"type": "string",
						"nullable": true
					},
					"bigImage": {
						"type": "string",
						"nullable": true
					},
					"smallImage": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.ChargerInfoDTO": {
				"type": "object",
				"properties": {
					"serialNumber": {
						"type": "string",
						"nullable": true
					},
					"pinCode": {
						"type": "string",
						"nullable": true
					},
					"product": {
						"type": "string",
						"nullable": true
					},
					"unitType": {
						"type": "string",
						"nullable": true
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
					},
					"partner": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Partners.PartnerDTO"
					}
				},
				"additionalProperties": false
			},
			"Easee.SiteStructure.Domain.Entities.Enums.LevelOfAccess": {
				"enum": [
					1,
					2,
					3
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.SiteStructure.Domain.Ports.CountryDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"phonePrefix": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.SiteStructure.Domain.Ports.AddressDTO": {
				"type": "object",
				"properties": {
					"street": {
						"type": "string",
						"nullable": true
					},
					"buildingNumber": {
						"type": "string",
						"nullable": true
					},
					"zip": {
						"type": "string",
						"nullable": true
					},
					"area": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Ports.CountryDTO"
					},
					"latitude": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"longitude": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"altitude": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.SiteStructure.Domain.Ports.ContactInfoDTO": {
				"type": "object",
				"properties": {
					"installerName": {
						"type": "string",
						"nullable": true
					},
					"installerPhoneNumber": {
						"type": "string",
						"nullable": true
					},
					"ownerName": {
						"type": "string",
						"nullable": true
					},
					"ownerPhoneNumber": {
						"type": "string",
						"nullable": true
					},
					"company": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.SiteStructure.Domain.Entities.Enums.ProductType": {
				"enum": [
					1,
					100,
					1000
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.SiteStructure.Domain.Entities.Enums.ChargerColorType": {
				"enum": [
					1,
					2,
					3,
					4,
					5
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.SiteStructure.Domain.Entities.Enums.BackPlateFeature": {
				"enum": [
					0,
					1
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.SiteStructure.Domain.Ports.BackPlateDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true,
						"readOnly": true
					},
					"masterBackPlateId": {
						"type": "string",
						"nullable": true,
						"readOnly": true
					},
					"name": {
						"type": "string",
						"nullable": true,
						"readOnly": true
					},
					"features": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Entities.Enums.BackPlateFeature"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.SiteStructure.Domain.Entities.Enums.SiteUserRole": {
				"enum": [
					1,
					2,
					3
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.SiteStructure.Domain.Ports.ChargerDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"color": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Entities.Enums.ChargerColorType"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"backPlate": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Ports.BackPlateDto"
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Entities.Enums.LevelOfAccess"
					},
					"productCode": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Entities.Enums.ProductType"
					},
					"userRole": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Entities.Enums.SiteUserRole"
					},
					"isTemporary": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"Easee.SiteStructure.Domain.Ports.CircuitDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"circuitPanelId": {
						"type": "integer",
						"format": "int32"
					},
					"panelName": {
						"type": "string",
						"nullable": true
					},
					"ratedCurrent": {
						"type": "number",
						"format": "double"
					},
					"chargers": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Ports.ChargerDTO"
						},
						"nullable": true
					},
					"masterBackplate": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Ports.BackPlateDto"
					},
					"useDynamicMaster": {
						"type": "boolean"
					},
					"parentCircuitId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.SiteStructure.Domain.Ports.EqualizerDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"siteId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"circuitId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.SiteStructure.Domain.Ports.SiteDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"siteKey": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Entities.Enums.LevelOfAccess"
					},
					"address": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Ports.AddressDTO"
					},
					"contactInfo": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Ports.ContactInfoDTO"
					},
					"costPerKWh": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"costPerKwhExcludeVat": {
						"type": "number",
						"format": "double"
					},
					"currencyId": {
						"type": "string",
						"nullable": true
					},
					"siteType": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Entities.Enums.ProductType"
					},
					"ratedCurrent": {
						"type": "number",
						"format": "double"
					},
					"vat": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"partnerId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"useDynamicMaster": {
						"type": "boolean"
					},
					"circuits": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Ports.CircuitDTO"
						},
						"nullable": true
					},
					"equalizers": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Ports.EqualizerDTO"
						},
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"userRole": {
						"$ref": "#/components/schemas/Easee.SiteStructure.Domain.Entities.Enums.SiteUserRole"
					},
					"allowedSiteActions": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"PowerGridType": {
				"enum": [
					0,
					1,
					2,
					3,
					4,
					5,
					30,
					31,
					50,
					51,
					52
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Enums.OfflineChargingModeType": {
				"enum": [
					0,
					1,
					2
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Enums.PhaseMode": {
				"enum": [
					1,
					2,
					3
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Enums.NodeType": {
				"enum": [
					0,
					1,
					2,
					3
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.DTOs.Charger.ChargerConfigurationDTO": {
				"type": "object",
				"properties": {
					"isEnabled": {
						"type": "boolean",
						"nullable": true
					},
					"lockCablePermanently": {
						"type": "boolean",
						"nullable": true
					},
					"authorizationRequired": {
						"type": "boolean",
						"nullable": true
					},
					"remoteStartRequired": {
						"type": "boolean",
						"nullable": true
					},
					"smartButtonEnabled": {
						"type": "boolean",
						"nullable": true
					},
					"wiFiSSID": {
						"type": "string",
						"nullable": true
					},
					"detectedPowerGridType": {
						"$ref": "#/components/schemas/PowerGridType"
					},
					"offlineChargingMode": {
						"$ref": "#/components/schemas/Easee.Core.Enums.OfflineChargingModeType"
					},
					"circuitMaxCurrentP1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"circuitMaxCurrentP2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"circuitMaxCurrentP3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"enableIdleCurrent": {
						"type": "boolean",
						"nullable": true
					},
					"limitToSinglePhaseCharging": {
						"type": "boolean",
						"nullable": true
					},
					"phaseMode": {
						"$ref": "#/components/schemas/Easee.Core.Enums.PhaseMode"
					},
					"localNodeType": {
						"$ref": "#/components/schemas/Easee.Core.Enums.NodeType"
					},
					"localAuthorizationRequired": {
						"type": "boolean",
						"nullable": true
					},
					"localRadioChannel": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"localShortAddress": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"localParentAddrOrNumOfNodes": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"localPreAuthorizeEnabled": {
						"type": "boolean",
						"nullable": true
					},
					"localAuthorizeOfflineEnabled": {
						"type": "boolean",
						"nullable": true
					},
					"allowOfflineTxForUnknownId": {
						"type": "boolean",
						"nullable": true
					},
					"maxChargerCurrent": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"ledStripBrightness": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"chargingSchedule": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.Enums.OpModeType": {
				"enum": [
					1,
					2,
					3,
					4,
					5,
					6
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Enums.OutputPhaseType": {
				"enum": [
					0,
					10,
					11,
					12,
					13,
					14,
					15,
					20,
					21,
					22,
					30
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Enums.ChargerLEDModeType": {
				"enum": [
					0,
					1,
					2,
					3,
					4,
					5,
					6,
					7,
					8,
					9,
					10,
					11,
					12,
					13,
					14,
					15,
					16,
					17,
					18,
					19,
					20,
					21,
					22,
					23,
					24,
					25,
					26,
					27
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Enums.ReasonForNoCurrent": {
				"enum": [
					0,
					1,
					2,
					3,
					4,
					5,
					6,
					7,
					8,
					50,
					51,
					52,
					53,
					54,
					55,
					56,
					57,
					100
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Enums.SimplifiedChargerError": {
				"enum": [
					100,
					103,
					106,
					107,
					108,
					109,
					110,
					111,
					113,
					207,
					218
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.DTOs.Charger.ChargerStateDTO": {
				"type": "object",
				"properties": {
					"smartCharging": {
						"type": "boolean",
						"nullable": true
					},
					"cableLocked": {
						"type": "boolean",
						"nullable": true
					},
					"chargerOpMode": {
						"$ref": "#/components/schemas/Easee.Core.Enums.OpModeType"
					},
					"totalPower": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"sessionEnergy": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"energyPerHour": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"wiFiRSSI": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"cellRSSI": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"localRSSI": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"outputPhase": {
						"$ref": "#/components/schemas/Easee.Core.Enums.OutputPhaseType"
					},
					"dynamicCircuitCurrentP1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"dynamicCircuitCurrentP2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"dynamicCircuitCurrentP3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"latestPulse": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"chargerFirmware": {
						"type": "integer",
						"format": "int32"
					},
					"latestFirmware": {
						"type": "integer",
						"format": "int32"
					},
					"voltage": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"chargerRAT": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"lockCablePermanently": {
						"type": "boolean",
						"nullable": true
					},
					"inCurrentT2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inCurrentT3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inCurrentT4": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inCurrentT5": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"outputCurrent": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"isOnline": {
						"type": "boolean"
					},
					"inVoltageT1T2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inVoltageT1T3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inVoltageT1T4": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inVoltageT1T5": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inVoltageT2T3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inVoltageT2T4": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inVoltageT2T5": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inVoltageT3T4": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inVoltageT3T5": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"inVoltageT4T5": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"ledMode": {
						"$ref": "#/components/schemas/Easee.Core.Enums.ChargerLEDModeType"
					},
					"cableRating": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"dynamicChargerCurrent": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"circuitTotalAllocatedPhaseConductorCurrentL1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"circuitTotalAllocatedPhaseConductorCurrentL2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"circuitTotalAllocatedPhaseConductorCurrentL3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"circuitTotalPhaseConductorCurrentL1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"circuitTotalPhaseConductorCurrentL2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"circuitTotalPhaseConductorCurrentL3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"reasonForNoCurrent": {
						"$ref": "#/components/schemas/Easee.Core.Enums.ReasonForNoCurrent"
					},
					"wiFiAPEnabled": {
						"type": "boolean",
						"nullable": true
					},
					"lifetimeEnergy": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"offlineMaxCircuitCurrentP1": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"offlineMaxCircuitCurrentP2": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"offlineMaxCircuitCurrentP3": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"errorCode": {
						"type": "integer",
						"format": "int32"
					},
					"fatalErrorCode": {
						"type": "integer",
						"format": "int32"
					},
					"errors": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.Enums.SimplifiedChargerError"
						},
						"nullable": true,
						"readOnly": true
					},
					"eqAvailableCurrentP1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"eqAvailableCurrentP2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"eqAvailableCurrentP3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"deratedCurrent": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"deratingActive": {
						"type": "boolean",
						"nullable": true
					},
					"connectedToCloud": {
						"type": "boolean",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Session.AggregatedUsageDTO": {
				"type": "object",
				"properties": {
					"from": {
						"type": "string",
						"format": "date-time"
					},
					"to": {
						"type": "string",
						"format": "date-time"
					},
					"totalEnergy": {
						"type": "number",
						"format": "double"
					}
				},
				"additionalProperties": false
			},
			"Masterloop.Core.Types.Observations.Observation": {
				"type": "object",
				"properties": {
					"timestamp": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.CommentDTO": {
				"type": "object",
				"properties": {
					"user": {
						"type": "string",
						"nullable": true
					},
					"comment": {
						"type": "string",
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.Enums.LogType": {
				"enum": [
					1,
					2,
					3,
					4
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.DTOs.Charger.ChargerLogEventDTO": {
				"type": "object",
				"properties": {
					"logTypeId": {
						"$ref": "#/components/schemas/Easee.Core.Enums.LogType"
					},
					"logType": {
						"type": "string",
						"nullable": true
					},
					"logValue": {
						"type": "string",
						"nullable": true
					},
					"timestamp": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.ChargePlanDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"chargeStartTime": {
						"type": "string",
						"format": "date-time"
					},
					"chargeStopTime": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"repeat": {
						"type": "boolean"
					},
					"isEnabled": {
						"type": "boolean",
						"nullable": true
					},
					"chargingCurrentLimit": {
						"maximum": 32,
						"minimum": 0,
						"type": "integer",
						"format": "int32",
						"default": 32
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.Enums.ChargeScheduleTag": {
				"enum": [
					0
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Enums.EuropeanDayOfWeek": {
				"enum": [
					0,
					1,
					2,
					3,
					4,
					5,
					6
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.DTOs.Schedule.WeeklyChargeScheduleRangeDTO": {
				"type": "object",
				"properties": {
					"startTime": {
						"type": "string",
						"nullable": true
					},
					"stopTime": {
						"type": "string",
						"nullable": true
					},
					"chargingCurrentLimit": {
						"maximum": 32,
						"minimum": 0,
						"type": "integer",
						"format": "int32",
						"default": 32
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Schedule.WeeklyChargeScheduleDateDTO": {
				"type": "object",
				"properties": {
					"dayOfWeek": {
						"$ref": "#/components/schemas/Easee.Core.Enums.EuropeanDayOfWeek"
					},
					"ranges": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.WeeklyChargeScheduleRangeDTO"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Schedule.WeeklyChargeScheduleResponseDTO": {
				"type": "object",
				"properties": {
					"isEnabled": {
						"type": "boolean"
					},
					"tags": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.Enums.ChargeScheduleTag"
						},
						"nullable": true
					},
					"days": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.WeeklyChargeScheduleDateDTO"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Schedule.WeeklyChargeScheduleRequestDTO": {
				"type": "object",
				"properties": {
					"isEnabled": {
						"type": "boolean"
					},
					"days": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Schedule.WeeklyChargeScheduleDateDTO"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Schedule.ScheduleFeatureRequestDto": {
				"type": "object",
				"properties": {
					"features": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.Enums.BackPlateFeature"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.ChargerSettingDTO": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean",
						"nullable": true
					},
					"enableIdleCurrent": {
						"type": "boolean",
						"nullable": true
					},
					"limitToSinglePhaseCharging": {
						"type": "boolean",
						"nullable": true
					},
					"lockCablePermanently": {
						"type": "boolean",
						"nullable": true
					},
					"smartButtonEnabled": {
						"type": "boolean",
						"nullable": true
					},
					"phaseMode": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"smartCharging": {
						"type": "boolean",
						"nullable": true
					},
					"localPreAuthorizeEnabled": {
						"type": "boolean",
						"nullable": true
					},
					"localAuthorizeOfflineEnabled": {
						"type": "boolean",
						"nullable": true
					},
					"allowOfflineTxForUnknownId": {
						"type": "boolean",
						"nullable": true
					},
					"offlineChargingMode": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"authorizationRequired": {
						"type": "boolean",
						"nullable": true
					},
					"remoteStartRequired": {
						"type": "boolean",
						"nullable": true
					},
					"ledStripBrightness": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"maxChargerCurrent": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"dynamicChargerCurrent": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.LockStateDTO": {
				"type": "object",
				"properties": {
					"state": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.ScanWifiSettingDTO": {
				"type": "object",
				"properties": {
					"timeout": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.WifiConfigDTO": {
				"type": "object",
				"properties": {
					"ssid": {
						"type": "string",
						"nullable": true
					},
					"password": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.PairRFIDSettingsDTO": {
				"type": "object",
				"properties": {
					"timeout": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.UsageStatisticsDTO": {
				"type": "object",
				"properties": {
					"chargerId": {
						"type": "string",
						"nullable": true
					},
					"sessionEnergy": {
						"type": "number",
						"format": "double"
					},
					"sessionStart": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"sessionEnd": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"sessionId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"chargeDurationInSeconds": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"firstEnergyTransferPeriodStart": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"lastEnergyTransferPeriodEnd": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"pricePrKwhIncludingVat": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"pricePerKwhExcludingVat": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"vatPercentage": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"currencyId": {
						"type": "string",
						"nullable": true
					},
					"costIncludingVat": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"costExcludingVat": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Session.ChargeSessionDTO": {
				"type": "object",
				"properties": {
					"carConnected": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"carDisconnected": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"kiloWattHours": {
						"type": "number",
						"format": "double"
					},
					"pricePerKwhExcludingVat": {
						"type": "number",
						"format": "double"
					},
					"pricePrKwhIncludingVat": {
						"type": "number",
						"format": "double"
					},
					"costExcludingVat": {
						"type": "number",
						"format": "double"
					},
					"costIncludingVat": {
						"type": "number",
						"format": "double"
					},
					"vatPercentage": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"currency": {
						"type": "string",
						"nullable": true
					},
					"actualDurationSeconds": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"firstEnergyTransferPeriodStarted": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"lastEnergyTransferPeriodEnd": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"id": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Session.AuthorizationTokenEnergy": {
				"type": "object",
				"properties": {
					"rfidKey": {
						"type": "string",
						"nullable": true
					},
					"energy": {
						"type": "number",
						"format": "double"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Session.YearlySummaryDTO": {
				"type": "object",
				"properties": {
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"totalEnergyUsage": {
						"type": "number",
						"format": "double"
					},
					"totalCost": {
						"type": "number",
						"format": "double"
					},
					"currencyId": {
						"type": "string",
						"nullable": true
					},
					"authTokensUsage": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Session.AuthorizationTokenEnergy"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Session.MonthlySummaryDTO": {
				"type": "object",
				"properties": {
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"month": {
						"type": "integer",
						"format": "int32"
					},
					"totalEnergyUsage": {
						"type": "number",
						"format": "double"
					},
					"totalCost": {
						"type": "number",
						"format": "double"
					},
					"currencyId": {
						"type": "string",
						"nullable": true
					},
					"authTokensUsage": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Session.AuthorizationTokenEnergy"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Session.WeeklySummaryDTO": {
				"type": "object",
				"properties": {
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"month": {
						"type": "integer",
						"format": "int32"
					},
					"weekOfYear": {
						"type": "integer",
						"format": "int32"
					},
					"totalEnergyUsage": {
						"type": "number",
						"format": "double"
					},
					"totalCost": {
						"type": "number",
						"format": "double"
					},
					"currencyId": {
						"type": "string",
						"nullable": true
					},
					"authTokensUsage": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Session.AuthorizationTokenEnergy"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Session.ChargingSessionDetailDTO": {
				"type": "object",
				"properties": {
					"chargerId": {
						"type": "string",
						"nullable": true
					},
					"chargerName": {
						"type": "string",
						"nullable": true
					},
					"totalEnergyUsage": {
						"type": "number",
						"format": "double"
					},
					"totalCost": {
						"type": "number",
						"format": "double"
					},
					"currencyId": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Session.DailySummaryDTO": {
				"type": "object",
				"properties": {
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"month": {
						"type": "integer",
						"format": "int32"
					},
					"totalEnergyUsage": {
						"type": "number",
						"format": "double"
					},
					"totalCost": {
						"type": "number",
						"format": "double"
					},
					"currencyId": {
						"type": "string",
						"nullable": true
					},
					"authTokensUsage": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Session.AuthorizationTokenEnergy"
						},
						"nullable": true
					},
					"dayOfMonth": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Session.HourlySummaryDTO": {
				"type": "object",
				"properties": {
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"month": {
						"type": "integer",
						"format": "int32"
					},
					"totalEnergyUsage": {
						"type": "number",
						"format": "double"
					},
					"totalCost": {
						"type": "number",
						"format": "double"
					},
					"currencyId": {
						"type": "string",
						"nullable": true
					},
					"authTokensUsage": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Session.AuthorizationTokenEnergy"
						},
						"nullable": true
					},
					"dayOfMonth": {
						"type": "integer",
						"format": "int32"
					},
					"hourOfDay": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.Enums.ReportCategory": {
				"enum": [
					0,
					1,
					2,
					3,
					4,
					5,
					6,
					7,
					8,
					9,
					10,
					11,
					12,
					13,
					14,
					15,
					16,
					17,
					18,
					19,
					20
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.DTOs.Commands.CommandResponseDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"timestamp": {
						"type": "string",
						"format": "date-time"
					},
					"deliveredAt": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"wasAccepted": {
						"type": "boolean"
					},
					"resultCode": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"comment": {
						"type": "string",
						"nullable": true
					},
					"ticks": {
						"type": "integer",
						"format": "int64",
						"readOnly": true
					}
				},
				"additionalProperties": false
			},
			"Easee.BusinessLayer.Managers.TotalConsumption.TotalConsumptionAggregationType": {
				"enum": [
					0,
					1,
					2
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.BusinessLayer.Managers.TotalConsumption.Period": {
				"type": "object",
				"properties": {
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"month": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"day": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.BusinessLayer.Managers.TotalConsumption.ChargerConsumption": {
				"type": "object",
				"properties": {
					"chargerId": {
						"type": "string",
						"nullable": true
					},
					"consumption": {
						"type": "number",
						"format": "double"
					}
				},
				"additionalProperties": false
			},
			"Easee.BusinessLayer.Managers.TotalConsumption.SiteConsumption": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"chargerConsumption": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.BusinessLayer.Managers.TotalConsumption.ChargerConsumption"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.BusinessLayer.Managers.TotalConsumption.TotalConsumptionPeriod": {
				"type": "object",
				"properties": {
					"period": {
						"$ref": "#/components/schemas/Easee.BusinessLayer.Managers.TotalConsumption.Period"
					},
					"mySitesConsumption": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.BusinessLayer.Managers.TotalConsumption.SiteConsumption"
						},
						"nullable": true
					},
					"urbanCharging": {
						"type": "number",
						"format": "double"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Equalizer.EqualizerDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"siteId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"circuitId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Equalizer.DetailedEqualizerDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"siteId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"circuitId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"pinCode": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.Enums.ExternalMeterType": {
				"enum": [
					1,
					2,
					3,
					4,
					5
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.Enums.GridType": {
				"enum": [
					0,
					1,
					2
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.DTOs.Equalizer.ChildDTO": {
				"type": "object",
				"properties": {
					"scid": {
						"type": "string",
						"nullable": true
					},
					"fuse": {
						"type": "integer",
						"format": "int32"
					},
					"cid": {
						"type": "integer",
						"format": "int32"
					},
					"oflc": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Equalizer.ChildReportDTO": {
				"type": "object",
				"properties": {
					"modified": {
						"type": "boolean",
						"nullable": true
					},
					"children": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.ChildDTO"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.Enums.DeviceMode": {
				"enum": [
					0,
					1,
					2,
					4
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.DTOs.Equalizer.DeviceModeDTO": {
				"type": "object",
				"properties": {
					"activeMode": {
						"$ref": "#/components/schemas/Easee.Core.Enums.DeviceMode"
					},
					"configuredMode": {
						"$ref": "#/components/schemas/Easee.Core.Enums.DeviceMode"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Equalizer.EqualizerConfigurationDTO": {
				"type": "object",
				"properties": {
					"ssid": {
						"type": "string",
						"nullable": true
					},
					"equalizerId": {
						"type": "string",
						"nullable": true
					},
					"masterBackPlateId": {
						"type": "string",
						"nullable": true
					},
					"siteStructure": {
						"type": "string",
						"nullable": true
					},
					"meterId": {
						"type": "string",
						"nullable": true
					},
					"meterType": {
						"type": "string",
						"nullable": true
					},
					"externalMeterType": {
						"$ref": "#/components/schemas/Easee.Core.Enums.ExternalMeterType"
					},
					"gridType": {
						"$ref": "#/components/schemas/Easee.Core.Enums.GridType"
					},
					"numPhases": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"maxAllocatedCurrent": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"childReport": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.ChildReportDTO"
					},
					"deviceMode": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.DeviceModeDTO"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Equalizer.EqualizerStateDTO": {
				"type": "object",
				"properties": {
					"currentL1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"currentL2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"currentL3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"voltageNL1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"voltageNL2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"voltageNL3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"voltageL1L2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"voltageL1L3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"voltageL2L3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"activePowerImport": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"activePowerExport": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"reactivePowerImport": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"reactivePowerExport": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"cumulativeActivePowerImport": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"cumulativeActivePowerExport": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"cumulativeReactivePowerImport": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"cumulativeReactivePowerExport": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"clockAndDateMeter": {
						"type": "string",
						"nullable": true
					},
					"rcpi": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"maxPowerImport": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"localRSSI": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"softwareRelease": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"latestFirmware": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"isOnline": {
						"type": "boolean"
					},
					"latestPulse": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"ledMode": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"equalizedChargeCurrent_L1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"equalizedChargeCurrent_L2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"equalizedChargeCurrent_L3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"connectedToCloud": {
						"type": "boolean",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.CountryDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"phonePrefix": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.AddressDTO": {
				"type": "object",
				"properties": {
					"street": {
						"type": "string",
						"nullable": true
					},
					"buildingNumber": {
						"type": "string",
						"nullable": true
					},
					"zip": {
						"type": "string",
						"nullable": true
					},
					"area": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CountryDTO"
					},
					"latitude": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"longitude": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"altitude": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.ContactInfoDTO": {
				"type": "object",
				"properties": {
					"installerName": {
						"type": "string",
						"nullable": true
					},
					"installerPhoneNumber": {
						"type": "string",
						"nullable": true
					},
					"ownerName": {
						"type": "string",
						"nullable": true
					},
					"ownerPhoneNumber": {
						"type": "string",
						"nullable": true
					},
					"company": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.DetailChargerDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"color": {
						"$ref": "#/components/schemas/Easee.Core.Enums.ChargerColorType"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"backPlate": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.BackPlateDTO"
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
					},
					"productCode": {
						"$ref": "#/components/schemas/Easee.Core.Constants.ProductType"
					},
					"userRole": {
						"$ref": "#/components/schemas/Easee.Core.Enums.SiteUserRole"
					},
					"isTemporary": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.CircuitDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"circuitPanelId": {
						"type": "integer",
						"format": "int32"
					},
					"panelName": {
						"type": "string",
						"nullable": true
					},
					"ratedCurrent": {
						"type": "number",
						"format": "double"
					},
					"chargers": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.DetailChargerDTO"
						},
						"nullable": true
					},
					"masterBackplate": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.BackPlateDTO"
					},
					"useDynamicMaster": {
						"type": "boolean"
					},
					"parentCircuitId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.SiteDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"siteKey": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
					},
					"address": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Site.AddressDTO"
					},
					"contactInfo": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Site.ContactInfoDTO"
					},
					"costPerKWh": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"costPerKwhExcludeVat": {
						"type": "number",
						"format": "double"
					},
					"vat": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"currencyId": {
						"type": "string",
						"nullable": true
					},
					"siteType": {
						"$ref": "#/components/schemas/Easee.Core.Constants.ProductType"
					},
					"ratedCurrent": {
						"type": "number",
						"format": "double"
					},
					"partnerId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"ownerPartnerId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"useDynamicMaster": {
						"type": "boolean"
					},
					"circuits": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CircuitDTO"
						},
						"nullable": true
					},
					"equalizers": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.EqualizerDTO"
						},
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Equalizer.MeterSettingsDTO": {
				"type": "object",
				"properties": {
					"deviceMode": {
						"$ref": "#/components/schemas/Easee.Core.Enums.DeviceMode"
					},
					"externalMeterType": {
						"$ref": "#/components/schemas/Easee.Core.Enums.ExternalMeterType"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Equalizer.MaxAllocatedCurrentDTO": {
				"type": "object",
				"properties": {
					"maxCurrent": {
						"type": "integer",
						"format": "int32"
					}
				},
				"additionalProperties": false
			},
			"Easee.Services.LifetimeEnergyReporting.Measurement": {
				"type": "object",
				"properties": {
					"value": {
						"type": "number",
						"format": "double"
					},
					"measuredAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false
			},
			"Easee.Services.LifetimeEnergyReporting.GetAllMeasurementsResponse": {
				"type": "object",
				"properties": {
					"measurements": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Services.LifetimeEnergyReporting.Measurement"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Services.LifetimeEnergyReporting.AggregatedLifetimeEnergy": {
				"type": "object",
				"properties": {
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"month": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"day": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"hour": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"consumption": {
						"type": "number",
						"format": "double"
					},
					"date": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false
			},
			"Easee.Services.LifetimeEnergyReporting.LifetimeEnergyMeasurementSettingsRequest": {
				"type": "object",
				"properties": {
					"intervalInMinutes": {
						"type": "integer",
						"format": "int32"
					},
					"alsoSendWhenNotCharging": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.Models.Site.Currency": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"countryId": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Masterloop.Core.Types.Base.DataType": {
				"enum": [
					1,
					2,
					3,
					4,
					5,
					6,
					7
				],
				"type": "integer",
				"format": "int32"
			},
			"Easee.Core.DTOs.Charger.ObservationPropertyDTO": {
				"type": "object",
				"properties": {
					"observationId": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"dataType": {
						"$ref": "#/components/schemas/Masterloop.Core.Types.Base.DataType"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.BasicSiteDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"siteKey": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
					},
					"address": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Site.AddressDTO"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.DetailSiteDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"siteKey": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"levelOfAccess": {
						"$ref": "#/components/schemas/Easee.Core.Enums.LevelOfAccess"
					},
					"address": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Site.AddressDTO"
					},
					"contactInfo": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Site.ContactInfoDTO"
					},
					"costPerKWh": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"costPerKwhExcludeVat": {
						"type": "number",
						"format": "double"
					},
					"vat": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"currencyId": {
						"type": "string",
						"nullable": true
					},
					"siteType": {
						"$ref": "#/components/schemas/Easee.Core.Constants.ProductType"
					},
					"ratedCurrent": {
						"type": "number",
						"format": "double"
					},
					"partnerId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"ownerPartnerId": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"useDynamicMaster": {
						"type": "boolean"
					},
					"circuits": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CircuitDTO"
						},
						"nullable": true
					},
					"equalizers": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Equalizer.EqualizerDTO"
						},
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"userRole": {
						"$ref": "#/components/schemas/Easee.Core.Enums.SiteUserRole"
					}
				},
				"additionalProperties": false
			},
			"Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
				"enum": [
					0,
					1,
					2,
					3,
					4,
					5,
					6
				],
				"type": "integer",
				"format": "int32"
			},
			"Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
				"type": "object",
				"properties": {
					"operationType": {
						"$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
					},
					"path": {
						"type": "string",
						"nullable": true
					},
					"op": {
						"type": "string",
						"nullable": true
					},
					"from": {
						"type": "string",
						"nullable": true
					},
					"value": {
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Dashboard.DashboardChargerState": {
				"type": "object",
				"properties": {
					"chargerID": {
						"type": "string",
						"nullable": true
					},
					"chargerConfig": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerConfigurationDTO"
					},
					"chargerState": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.ChargerStateDTO"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Dashboard.DashboardCircuitStateDTO": {
				"type": "object",
				"properties": {
					"circuit": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Site.CircuitDTO"
					},
					"chargerStates": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Dashboard.DashboardChargerState"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Dashboard.DashboardStateDTO": {
				"type": "object",
				"properties": {
					"circuitStates": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Dashboard.DashboardCircuitStateDTO"
						},
						"nullable": true
					},
					"site": {
						"$ref": "#/components/schemas/Easee.Core.DTOs.Site.SiteDTO"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.SiteCostDTO": {
				"required": [
					"currencyId"
				],
				"type": "object",
				"properties": {
					"currencyId": {
						"type": "string"
					},
					"costPerKWh": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"costPerKwhExcludeVat": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"vat": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Charger.ChargerEnergyDTO": {
				"type": "object",
				"properties": {
					"chargerId": {
						"type": "string",
						"nullable": true
					},
					"lifeTimeEnergy": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.SiteStructure.Domain.Ports.SiteCircuitDTO": {
				"type": "object",
				"properties": {
					"circuitName": {
						"type": "string",
						"nullable": true
					},
					"siteKey": {
						"type": "string",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.UpdateCircuitDTO": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"circuitPanelId": {
						"type": "integer",
						"format": "int32"
					},
					"panelName": {
						"type": "string",
						"nullable": true
					},
					"ratedCurrent": {
						"type": "number",
						"format": "double"
					},
					"backplates": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Easee.Core.DTOs.Charger.BackPlateDTO"
						},
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.CircuitSettingsDTO": {
				"type": "object",
				"properties": {
					"masterChargerId": {
						"type": "string",
						"nullable": true
					},
					"dynamicCircuitCurrentP1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"dynamicCircuitCurrentP2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"dynamicCircuitCurrentP3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"maxCircuitCurrentP1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"maxCircuitCurrentP2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"maxCircuitCurrentP3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"enableIdleCurrent": {
						"type": "boolean",
						"nullable": true
					},
					"offlineMaxCircuitCurrentP1": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"offlineMaxCircuitCurrentP2": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"offlineMaxCircuitCurrentP3": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.ExtendedCircuitSettingsDTO": {
				"type": "object",
				"properties": {
					"dynamicCircuitCurrentP1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"dynamicCircuitCurrentP2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"dynamicCircuitCurrentP3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"maxCircuitCurrentP1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"maxCircuitCurrentP2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"maxCircuitCurrentP3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"enableIdleCurrent": {
						"type": "boolean",
						"nullable": true
					},
					"offlineMaxCircuitCurrentP1": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"offlineMaxCircuitCurrentP2": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"offlineMaxCircuitCurrentP3": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					},
					"masterChargerId": {
						"type": "string",
						"nullable": true
					},
					"equalizerId": {
						"type": "string",
						"nullable": true
					},
					"allowOfflineMaxCircuitCurrent": {
						"type": "boolean"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.DynamicCircuitCurrentDto": {
				"type": "object",
				"properties": {
					"phase1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"phase2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"phase3": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Site.DynamicCircuitCurrentTtlDto": {
				"type": "object",
				"properties": {
					"phase1": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"phase2": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"phase3": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"timeToLive": {
						"type": "integer",
						"format": "int32",
						"nullable": true
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Session.MonthlySessionSummaryDTO": {
				"type": "object",
				"properties": {
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"month": {
						"type": "integer",
						"format": "int32"
					},
					"totalEnergyUsage": {
						"type": "number",
						"format": "double"
					}
				},
				"additionalProperties": false
			},
			"Easee.Core.DTOs.Session.YearlySessionSummaryDTO": {
				"type": "object",
				"properties": {
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"totalEnergyUsage": {
						"type": "number",
						"format": "double"
					}
				},
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"Bearer": {
				"type": "apiKey",
				"description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
				"name": "Authorization",
				"in": "header"
			}
		}
	},
	"security": [
		{
			"Bearer": []
		}
	],
	"x-readme": {
		"explorer-enabled": true,
		"proxy-enabled": true,
		"samples-enabled": true
	}
}