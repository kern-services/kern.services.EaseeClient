/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using kern.services.EaseeClient.Client;
using kern.services.EaseeClient.Model;

namespace kern.services.EaseeClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISiteApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept Site Invitation
        /// </summary>
        /// <remarks>
        /// Accept site invitation for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Site user permission invitation acceptance token (optional)</param>
        /// <param name="body">Site user permission invitation acceptance token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesAcceptPost(string? email = default(string?), string? body = default(string?), int operationIndex = 0);

        /// <summary>
        /// Accept Site Invitation
        /// </summary>
        /// <remarks>
        /// Accept site invitation for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Site user permission invitation acceptance token (optional)</param>
        /// <param name="body">Site user permission invitation acceptance token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesAcceptPostWithHttpInfo(string? email = default(string?), string? body = default(string?), int operationIndex = 0);
        /// <summary>
        /// Confirm Circuit Move
        /// </summary>
        /// <remarks>
        /// Confirm a request made to move a circuit to a new site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Confirmation token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesCircuitsConfirmPost(string? body = default(string?), int operationIndex = 0);

        /// <summary>
        /// Confirm Circuit Move
        /// </summary>
        /// <remarks>
        /// Confirm a request made to move a circuit to a new site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Confirmation token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesCircuitsConfirmPostWithHttpInfo(string? body = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Sites
        /// </summary>
        /// <remarks>
        /// Get sites for logged in user. Offset and limits are used if \&quot;search\&quot; is specified.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSiteBasicSiteDTO&gt;</returns>
        List<EaseeCoreDTOsSiteBasicSiteDTO> ApiSitesGet(string? search = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Sites
        /// </summary>
        /// <remarks>
        /// Get sites for logged in user. Offset and limits are used if \&quot;search\&quot; is specified.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSiteBasicSiteDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSiteBasicSiteDTO>> ApiSitesGetWithHttpInfo(string? search = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Access Level - All Chargers
        /// </summary>
        /// <remarks>
        /// Set access level for all chargers on a site.&lt;br /&gt; Access Level can be Everyone, Registered Users og White  Listed Users.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdAccessPut(int siteId, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// Access Level - All Chargers
        /// </summary>
        /// <remarks>
        /// Set access level for all chargers on a site.&lt;br /&gt; Access Level can be Everyone, Registered Users og White  Listed Users.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdAccessPutWithHttpInfo(int siteId, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// Usage/Cost
        /// </summary>
        /// <remarks>
        /// Get power usage and cost for all chargers on a site in a time period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        List<EaseeCoreDTOsSessionChargingSessionDetailDTO> ApiSitesSiteIdBreakdownFromToGet(int siteId, DateTime from, DateTime to, int operationIndex = 0);

        /// <summary>
        /// Usage/Cost
        /// </summary>
        /// <remarks>
        /// Get power usage and cost for all chargers on a site in a time period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> ApiSitesSiteIdBreakdownFromToGetWithHttpInfo(int siteId, DateTime from, DateTime to, int operationIndex = 0);
        /// <summary>
        /// Charger Usage - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charger power usage for a user and a charger on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO> ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGet(int siteId, string chargerId, int userId, int operationIndex = 0);

        /// <summary>
        /// Charger Usage - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charger power usage for a user and a charger on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGetWithHttpInfo(int siteId, string chargerId, int userId, int operationIndex = 0);
        /// <summary>
        /// Charger Usage - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charger power usage for a user and a charger on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionYearlySessionSummaryDTO> ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGet(int siteId, string chargerId, int userId, int operationIndex = 0);

        /// <summary>
        /// Charger Usage - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charger power usage for a user and a charger on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGetWithHttpInfo(int siteId, string chargerId, int userId, int operationIndex = 0);
        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Get all chargers on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeSiteStructureDomainPortsChargerDTO&gt;</returns>
        List<EaseeSiteStructureDomainPortsChargerDTO> ApiSitesSiteIdChargersGet(int siteId, int operationIndex = 0);

        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Get all chargers on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeSiteStructureDomainPortsChargerDTO&gt;</returns>
        ApiResponse<List<EaseeSiteStructureDomainPortsChargerDTO>> ApiSitesSiteIdChargersGetWithHttpInfo(int siteId, int operationIndex = 0);
        /// <summary>
        /// Access Level - Chargers
        /// </summary>
        /// <remarks>
        /// Set or delete access level for specified chargers.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteChargerAccessDTO">Chargers with Access Level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdChargersLevelOfAccessPut(int siteId, List<EaseeCoreDTOsSiteChargerAccessDTO>? easeeCoreDTOsSiteChargerAccessDTO = default(List<EaseeCoreDTOsSiteChargerAccessDTO>?), int operationIndex = 0);

        /// <summary>
        /// Access Level - Chargers
        /// </summary>
        /// <remarks>
        /// Set or delete access level for specified chargers.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteChargerAccessDTO">Chargers with Access Level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdChargersLevelOfAccessPutWithHttpInfo(int siteId, List<EaseeCoreDTOsSiteChargerAccessDTO>? easeeCoreDTOsSiteChargerAccessDTO = default(List<EaseeCoreDTOsSiteChargerAccessDTO>?), int operationIndex = 0);
        /// <summary>
        /// Set Circuits
        /// </summary>
        /// <remarks>
        /// Create or update circuits with backplates on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit with Backplates (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdCircuitCollectionPost(int siteId, List<EaseeCoreDTOsSiteUpdateCircuitDTO>? easeeCoreDTOsSiteUpdateCircuitDTO = default(List<EaseeCoreDTOsSiteUpdateCircuitDTO>?), int operationIndex = 0);

        /// <summary>
        /// Set Circuits
        /// </summary>
        /// <remarks>
        /// Create or update circuits with backplates on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit with Backplates (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdCircuitCollectionPostWithHttpInfo(int siteId, List<EaseeCoreDTOsSiteUpdateCircuitDTO>? easeeCoreDTOsSiteUpdateCircuitDTO = default(List<EaseeCoreDTOsSiteUpdateCircuitDTO>?), int operationIndex = 0);
        /// <summary>
        /// Update Chargers
        /// </summary>
        /// <remarks>
        /// Update a set of chargers on a circuit. Rate limited at max 15 request per minute.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsChargerChargerDTO">Charger details array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdCircuitsCircuitIdChargersPut(int siteId, int circuitId, List<EaseeCoreDTOsChargerChargerDTO>? easeeCoreDTOsChargerChargerDTO = default(List<EaseeCoreDTOsChargerChargerDTO>?), int operationIndex = 0);

        /// <summary>
        /// Update Chargers
        /// </summary>
        /// <remarks>
        /// Update a set of chargers on a circuit. Rate limited at max 15 request per minute.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsChargerChargerDTO">Charger details array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdCircuitsCircuitIdChargersPutWithHttpInfo(int siteId, int circuitId, List<EaseeCoreDTOsChargerChargerDTO>? easeeCoreDTOsChargerChargerDTO = default(List<EaseeCoreDTOsChargerChargerDTO>?), int operationIndex = 0);
        /// <summary>
        /// Delete Circuit
        /// </summary>
        /// <remarks>
        /// Delete an empty circuit.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdCircuitsCircuitIdDelete(int siteId, int circuitId, int operationIndex = 0);

        /// <summary>
        /// Delete Circuit
        /// </summary>
        /// <remarks>
        /// Delete an empty circuit.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdCircuitsCircuitIdDeleteWithHttpInfo(int siteId, int circuitId, int operationIndex = 0);
        /// <summary>
        /// Dynamic Circuit Current
        /// </summary>
        /// <remarks>
        /// Get dynamic circuit current of the primary charger
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsSiteDynamicCircuitCurrentDto</returns>
        EaseeCoreDTOsSiteDynamicCircuitCurrentDto ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGet(int siteId, int circuitId, int operationIndex = 0);

        /// <summary>
        /// Dynamic Circuit Current
        /// </summary>
        /// <remarks>
        /// Get dynamic circuit current of the primary charger
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsSiteDynamicCircuitCurrentDto</returns>
        ApiResponse<EaseeCoreDTOsSiteDynamicCircuitCurrentDto> ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGetWithHttpInfo(int siteId, int circuitId, int operationIndex = 0);
        /// <summary>
        /// Set Dynamic Circuit Current
        /// </summary>
        /// <remarks>
        /// Set dynamic circuit current. &lt;br /&gt;Time to Live should be specified in minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto">Dynamic Current Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPost(int siteId, int circuitId, EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto? easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto = default(EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto?), int operationIndex = 0);

        /// <summary>
        /// Set Dynamic Circuit Current
        /// </summary>
        /// <remarks>
        /// Set dynamic circuit current. &lt;br /&gt;Time to Live should be specified in minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto">Dynamic Current Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPostWithHttpInfo(int siteId, int circuitId, EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto? easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto = default(EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto?), int operationIndex = 0);
        /// <summary>
        /// Circuit Settings
        /// </summary>
        /// <remarks>
        /// Get extended circuit settings for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsSiteExtendedCircuitSettingsDTO</returns>
        EaseeCoreDTOsSiteExtendedCircuitSettingsDTO ApiSitesSiteIdCircuitsCircuitIdSettingsGet(int siteId, int circuitId, int operationIndex = 0);

        /// <summary>
        /// Circuit Settings
        /// </summary>
        /// <remarks>
        /// Get extended circuit settings for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsSiteExtendedCircuitSettingsDTO</returns>
        ApiResponse<EaseeCoreDTOsSiteExtendedCircuitSettingsDTO> ApiSitesSiteIdCircuitsCircuitIdSettingsGetWithHttpInfo(int siteId, int circuitId, int operationIndex = 0);
        /// <summary>
        /// Set Circuit Settings
        /// </summary>
        /// <remarks>
        /// Set circuit settings of a site. Rate limited at max 20 request per minute. &lt;br /&gt; Please only specify keys you  want to change. Endpoint handles partial JSON objects and will give a 400 response if it does not understand the  request.&lt;br /&gt;Will only forward values for dynamicCircuitCurrentP1, P2, P3 to device if new value !&#x3D; old value
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitSettingsDTO">Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdCircuitsCircuitIdSettingsPost(int siteId, int circuitId, EaseeCoreDTOsSiteCircuitSettingsDTO? easeeCoreDTOsSiteCircuitSettingsDTO = default(EaseeCoreDTOsSiteCircuitSettingsDTO?), int operationIndex = 0);

        /// <summary>
        /// Set Circuit Settings
        /// </summary>
        /// <remarks>
        /// Set circuit settings of a site. Rate limited at max 20 request per minute. &lt;br /&gt; Please only specify keys you  want to change. Endpoint handles partial JSON objects and will give a 400 response if it does not understand the  request.&lt;br /&gt;Will only forward values for dynamicCircuitCurrentP1, P2, P3 to device if new value !&#x3D; old value
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitSettingsDTO">Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdCircuitsCircuitIdSettingsPostWithHttpInfo(int siteId, int circuitId, EaseeCoreDTOsSiteCircuitSettingsDTO? easeeCoreDTOsSiteCircuitSettingsDTO = default(EaseeCoreDTOsSiteCircuitSettingsDTO?), int operationIndex = 0);
        /// <summary>
        /// Set Circuit
        /// </summary>
        /// <remarks>
        /// Set circuit with backplates on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdCircuitsPost(int siteId, EaseeCoreDTOsSiteUpdateCircuitDTO? easeeCoreDTOsSiteUpdateCircuitDTO = default(EaseeCoreDTOsSiteUpdateCircuitDTO?), int operationIndex = 0);

        /// <summary>
        /// Set Circuit
        /// </summary>
        /// <remarks>
        /// Set circuit with backplates on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdCircuitsPostWithHttpInfo(int siteId, EaseeCoreDTOsSiteUpdateCircuitDTO? easeeCoreDTOsSiteUpdateCircuitDTO = default(EaseeCoreDTOsSiteUpdateCircuitDTO?), int operationIndex = 0);
        /// <summary>
        /// Update Circuits
        /// </summary>
        /// <remarks>
        /// Update circuits on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitDTO">Circuit array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdCircuitsPut(int siteId, List<EaseeCoreDTOsSiteCircuitDTO>? easeeCoreDTOsSiteCircuitDTO = default(List<EaseeCoreDTOsSiteCircuitDTO>?), int operationIndex = 0);

        /// <summary>
        /// Update Circuits
        /// </summary>
        /// <remarks>
        /// Update circuits on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitDTO">Circuit array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdCircuitsPutWithHttpInfo(int siteId, List<EaseeCoreDTOsSiteCircuitDTO>? easeeCoreDTOsSiteCircuitDTO = default(List<EaseeCoreDTOsSiteCircuitDTO>?), int operationIndex = 0);
        /// <summary>
        /// Start Circuit Move
        /// </summary>
        /// <remarks>
        /// Initiate a request to move a circuit to a new site. If the source site has an owner then a confirmation email is sent.  If the source site has no owner then the circuit will be immediately transferred to the new site
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main Charger Serial Number</param>
        /// <param name="pinCode">Main Charger PIN Code</param>
        /// <param name="circuitName">Circuit Panel Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut(int siteId, string serialNumber, string pinCode, string circuitName, int operationIndex = 0);

        /// <summary>
        /// Start Circuit Move
        /// </summary>
        /// <remarks>
        /// Initiate a request to move a circuit to a new site. If the source site has an owner then a confirmation email is sent.  If the source site has no owner then the circuit will be immediately transferred to the new site
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main Charger Serial Number</param>
        /// <param name="pinCode">Main Charger PIN Code</param>
        /// <param name="circuitName">Circuit Panel Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePutWithHttpInfo(int siteId, string serialNumber, string pinCode, string circuitName, int operationIndex = 0);
        /// <summary>
        /// Circuit Attached
        /// </summary>
        /// <remarks>
        /// Check if Circuit is attached to a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main charger serial number</param>
        /// <param name="pinCode">Main charger PIN code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeSiteStructureDomainPortsSiteCircuitDTO</returns>
        EaseeSiteStructureDomainPortsSiteCircuitDTO ApiSitesSiteIdCircuitsSerialNumberPinCodeGet(int siteId, string serialNumber, string pinCode, int operationIndex = 0);

        /// <summary>
        /// Circuit Attached
        /// </summary>
        /// <remarks>
        /// Check if Circuit is attached to a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main charger serial number</param>
        /// <param name="pinCode">Main charger PIN code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeSiteStructureDomainPortsSiteCircuitDTO</returns>
        ApiResponse<EaseeSiteStructureDomainPortsSiteCircuitDTO> ApiSitesSiteIdCircuitsSerialNumberPinCodeGetWithHttpInfo(int siteId, string serialNumber, string pinCode, int operationIndex = 0);
        /// <summary>
        /// Delete Site
        /// </summary>
        /// <remarks>
        /// Delete site (Global Admin or Partner Admin).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdDelete(int siteId, int operationIndex = 0);

        /// <summary>
        /// Delete Site
        /// </summary>
        /// <remarks>
        /// Delete site (Global Admin or Partner Admin).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdDeleteWithHttpInfo(int siteId, int operationIndex = 0);
        /// <summary>
        /// Lifetime Energy
        /// </summary>
        /// <remarks>
        /// Get current lifetime energy for all chargers on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerChargerEnergyDTO&gt;</returns>
        List<EaseeCoreDTOsChargerChargerEnergyDTO> ApiSitesSiteIdEnergyGet(int siteId, int operationIndex = 0);

        /// <summary>
        /// Lifetime Energy
        /// </summary>
        /// <remarks>
        /// Get current lifetime energy for all chargers on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerChargerEnergyDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsChargerChargerEnergyDTO>> ApiSitesSiteIdEnergyGetWithHttpInfo(int siteId, int operationIndex = 0);
        /// <summary>
        /// Remove Equalizer
        /// </summary>
        /// <remarks>
        /// Remove equalizer from a site. The api will only remove the site and master backpalte id references from databse
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="equalizerId">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdEqualizersEqualizerIdDelete(int siteId, string equalizerId, int operationIndex = 0);

        /// <summary>
        /// Remove Equalizer
        /// </summary>
        /// <remarks>
        /// Remove equalizer from a site. The api will only remove the site and master backpalte id references from databse
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="equalizerId">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdEqualizersEqualizerIdDeleteWithHttpInfo(int siteId, string equalizerId, int operationIndex = 0);
        /// <summary>
        /// Send Site Invitation
        /// </summary>
        /// <remarks>
        /// Send site invitation to user for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">Invitation Request with user phone number and role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdInvitePost(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0);

        /// <summary>
        /// Send Site Invitation
        /// </summary>
        /// <remarks>
        /// Send site invitation to user for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">Invitation Request with user phone number and role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdInvitePostWithHttpInfo(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0);
        /// <summary>
        /// Get User to Invite as Admin
        /// </summary>
        /// <remarks>
        /// Get user by phone number to invite to the site as administrator. (Site Admin)
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeUserAdministrationDomainDTOBasicProfile</returns>
        EaseeUserAdministrationDomainDTOBasicProfile ApiSitesSiteIdLookupAdminGet(int siteId, string? phoneNo = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get User to Invite as Admin
        /// </summary>
        /// <remarks>
        /// Get user by phone number to invite to the site as administrator. (Site Admin)
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeUserAdministrationDomainDTOBasicProfile</returns>
        ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile> ApiSitesSiteIdLookupAdminGetWithHttpInfo(int siteId, string? phoneNo = default(string?), int operationIndex = 0);
        /// <summary>
        /// User to Invite
        /// </summary>
        /// <remarks>
        /// Get user by phone number to invite to site. (Site Admin)
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeUserAdministrationDomainDTOBasicProfile</returns>
        EaseeUserAdministrationDomainDTOBasicProfile ApiSitesSiteIdLookupUserGet(int siteId, string? phoneNo = default(string?), int operationIndex = 0);

        /// <summary>
        /// User to Invite
        /// </summary>
        /// <remarks>
        /// Get user by phone number to invite to site. (Site Admin)
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeUserAdministrationDomainDTOBasicProfile</returns>
        ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile> ApiSitesSiteIdLookupUserGetWithHttpInfo(int siteId, string? phoneNo = default(string?), int operationIndex = 0);
        /// <summary>
        /// Usage/Cost - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionMonthlySummaryDTO> ApiSitesSiteIdMonthlyGet(int siteId, int operationIndex = 0);

        /// <summary>
        /// Usage/Cost - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSitesSiteIdMonthlyGetWithHttpInfo(int siteId, int operationIndex = 0);
        /// <summary>
        /// Change Site Owner
        /// </summary>
        /// <remarks>
        /// Change site owner (Global Admin, Partner Admin or Site Owner).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSiteOwnerDTO">New Owner (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdOwnerPost(int siteId, EaseeAccessControlModelsSiteOwnerDTO? easeeAccessControlModelsSiteOwnerDTO = default(EaseeAccessControlModelsSiteOwnerDTO?), int operationIndex = 0);

        /// <summary>
        /// Change Site Owner
        /// </summary>
        /// <remarks>
        /// Change site owner (Global Admin, Partner Admin or Site Owner).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSiteOwnerDTO">New Owner (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdOwnerPostWithHttpInfo(int siteId, EaseeAccessControlModelsSiteOwnerDTO? easeeAccessControlModelsSiteOwnerDTO = default(EaseeAccessControlModelsSiteOwnerDTO?), int operationIndex = 0);
        /// <summary>
        /// Update Site (Partial)
        /// </summary>
        /// <remarks>
        /// More info: &lt;a&gt;http://jsonpatch.com&lt;/a&gt;&lt;br /&gt;  For example to change only &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Site Type&lt;/b&gt; of site: &lt;br /&gt;  [  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/name\&quot;, \&quot;value\&quot;: \&quot;test site\&quot; },  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/siteType\&quot;, \&quot;value\&quot;: 2 }  ]
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="microsoftAspNetCoreJsonPatchOperationsOperation">Site properties to update (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdPatch(int siteId, List<MicrosoftAspNetCoreJsonPatchOperationsOperation>? microsoftAspNetCoreJsonPatchOperationsOperation = default(List<MicrosoftAspNetCoreJsonPatchOperationsOperation>?), int operationIndex = 0);

        /// <summary>
        /// Update Site (Partial)
        /// </summary>
        /// <remarks>
        /// More info: &lt;a&gt;http://jsonpatch.com&lt;/a&gt;&lt;br /&gt;  For example to change only &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Site Type&lt;/b&gt; of site: &lt;br /&gt;  [  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/name\&quot;, \&quot;value\&quot;: \&quot;test site\&quot; },  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/siteType\&quot;, \&quot;value\&quot;: 2 }  ]
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="microsoftAspNetCoreJsonPatchOperationsOperation">Site properties to update (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdPatchWithHttpInfo(int siteId, List<MicrosoftAspNetCoreJsonPatchOperationsOperation>? microsoftAspNetCoreJsonPatchOperationsOperation = default(List<MicrosoftAspNetCoreJsonPatchOperationsOperation>?), int operationIndex = 0);
        /// <summary>
        /// Delete Site Permission
        /// </summary>
        /// <remarks>
        /// Delete user permission for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">User Phone Number (optional)</param>
        /// <param name="email">user email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdPermissionDelete(int siteId, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete Site Permission
        /// </summary>
        /// <remarks>
        /// Delete user permission for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">User Phone Number (optional)</param>
        /// <param name="email">user email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdPermissionDeleteWithHttpInfo(int siteId, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a site user&#39;s permissions
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="easeeCoreDTOsSiteUpdateSitePermissionRequestDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdPermissionPut(int siteId, EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO? easeeCoreDTOsSiteUpdateSitePermissionRequestDTO = default(EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO?), int operationIndex = 0);

        /// <summary>
        /// Updates a site user&#39;s permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="easeeCoreDTOsSiteUpdateSitePermissionRequestDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdPermissionPutWithHttpInfo(int siteId, EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO? easeeCoreDTOsSiteUpdateSitePermissionRequestDTO = default(EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO?), int operationIndex = 0);
        /// <summary>
        /// Set Charging Price
        /// </summary>
        /// <remarks>
        /// Set fixed cost per kWh for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteSiteCostDTO">Fixed cost per kilowatt hour and currency id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdPricePost(int siteId, EaseeCoreDTOsSiteSiteCostDTO? easeeCoreDTOsSiteSiteCostDTO = default(EaseeCoreDTOsSiteSiteCostDTO?), int operationIndex = 0);

        /// <summary>
        /// Set Charging Price
        /// </summary>
        /// <remarks>
        /// Set fixed cost per kWh for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteSiteCostDTO">Fixed cost per kilowatt hour and currency id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdPricePostWithHttpInfo(int siteId, EaseeCoreDTOsSiteSiteCostDTO? easeeCoreDTOsSiteSiteCostDTO = default(EaseeCoreDTOsSiteSiteCostDTO?), int operationIndex = 0);
        /// <summary>
        /// Resend Site Invitation
        /// </summary>
        /// <remarks>
        /// Resend site invitation to user for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">site permisssion reinvite request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdReinvitePost(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0);

        /// <summary>
        /// Resend Site Invitation
        /// </summary>
        /// <remarks>
        /// Resend site invitation to user for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">site permisssion reinvite request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdReinvitePostWithHttpInfo(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0);
        /// <summary>
        /// Request site access by logged in user(installer)
        /// </summary>
        /// <remarks>
        /// Request site access by logged in user(installer) and send email to the site owner.  Rate limited at max 5 request per 30 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Site permission (allowed only admin or user) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiSitesSiteIdRequestAccessPost(int siteId, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// Request site access by logged in user(installer)
        /// </summary>
        /// <remarks>
        /// Request site access by logged in user(installer) and send email to the site owner.  Rate limited at max 5 request per 30 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Site permission (allowed only admin or user) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSitesSiteIdRequestAccessPostWithHttpInfo(int siteId, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// Site Groups
        /// </summary>
        /// <remarks>
        /// Get site groups for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseePartnersDomainEntitiesPartnerSiteGroup&gt;</returns>
        List<EaseePartnersDomainEntitiesPartnerSiteGroup> ApiSitesSiteIdSiteGroupsGet(int siteId, int operationIndex = 0);

        /// <summary>
        /// Site Groups
        /// </summary>
        /// <remarks>
        /// Get site groups for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseePartnersDomainEntitiesPartnerSiteGroup&gt;</returns>
        ApiResponse<List<EaseePartnersDomainEntitiesPartnerSiteGroup>> ApiSitesSiteIdSiteGroupsGetWithHttpInfo(int siteId, int operationIndex = 0);
        /// <summary>
        /// Users
        /// </summary>
        /// <remarks>
        /// Get all users for a site with permissions.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeUserAdministrationDomainDTOSitePermissionDTO</returns>
        EaseeUserAdministrationDomainDTOSitePermissionDTO ApiSitesSiteIdUsersGet(int siteId, int operationIndex = 0);

        /// <summary>
        /// Users
        /// </summary>
        /// <remarks>
        /// Get all users for a site with permissions.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeUserAdministrationDomainDTOSitePermissionDTO</returns>
        ApiResponse<EaseeUserAdministrationDomainDTOSitePermissionDTO> ApiSitesSiteIdUsersGetWithHttpInfo(int siteId, int operationIndex = 0);
        /// <summary>
        /// Charger Usage, All Chargers - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charger power usage for a user on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO> ApiSitesSiteIdUsersUserIdMonthlyGet(int siteId, int userId, int operationIndex = 0);

        /// <summary>
        /// Charger Usage, All Chargers - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charger power usage for a user on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> ApiSitesSiteIdUsersUserIdMonthlyGetWithHttpInfo(int siteId, int userId, int operationIndex = 0);
        /// <summary>
        /// Charger Usage, All Chargers - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charger power usage for a user on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionYearlySessionSummaryDTO> ApiSitesSiteIdUsersUserIdYearlyGet(int siteId, int userId, int operationIndex = 0);

        /// <summary>
        /// Charger Usage, All Chargers - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charger power usage for a user on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> ApiSitesSiteIdUsersUserIdYearlyGetWithHttpInfo(int siteId, int userId, int operationIndex = 0);
        /// <summary>
        /// Power Usage/Cost - Weekly
        /// </summary>
        /// <remarks>
        /// Get weekly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionWeeklySummaryDTO> ApiSitesSiteIdWeeklyGet(int siteId, int operationIndex = 0);

        /// <summary>
        /// Power Usage/Cost - Weekly
        /// </summary>
        /// <remarks>
        /// Get weekly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> ApiSitesSiteIdWeeklyGetWithHttpInfo(int siteId, int operationIndex = 0);
        /// <summary>
        /// Usage/Cost - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionYearlySummaryDTO> ApiSitesSiteIdYearlyGet(int siteId, int operationIndex = 0);

        /// <summary>
        /// Usage/Cost - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSitesSiteIdYearlyGetWithHttpInfo(int siteId, int operationIndex = 0);
        /// <summary>
        /// Get Site
        /// </summary>
        /// <remarks>
        /// Get a site by id.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="detailed">Whether to include site details (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsSiteDetailSiteDTO</returns>
        EaseeCoreDTOsSiteDetailSiteDTO GetSiteById(int siteId, bool? detailed = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Site
        /// </summary>
        /// <remarks>
        /// Get a site by id.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="detailed">Whether to include site details (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsSiteDetailSiteDTO</returns>
        ApiResponse<EaseeCoreDTOsSiteDetailSiteDTO> GetSiteByIdWithHttpInfo(int siteId, bool? detailed = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Dashboard Circuit States
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsDashboardDashboardStateDTO</returns>
        EaseeCoreDTOsDashboardDashboardStateDTO GetSiteState(int siteId, int operationIndex = 0);

        /// <summary>
        /// Dashboard Circuit States
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsDashboardDashboardStateDTO</returns>
        ApiResponse<EaseeCoreDTOsDashboardDashboardStateDTO> GetSiteStateWithHttpInfo(int siteId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISiteApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept Site Invitation
        /// </summary>
        /// <remarks>
        /// Accept site invitation for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Site user permission invitation acceptance token (optional)</param>
        /// <param name="body">Site user permission invitation acceptance token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesAcceptPostAsync(string? email = default(string?), string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept Site Invitation
        /// </summary>
        /// <remarks>
        /// Accept site invitation for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Site user permission invitation acceptance token (optional)</param>
        /// <param name="body">Site user permission invitation acceptance token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesAcceptPostWithHttpInfoAsync(string? email = default(string?), string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Confirm Circuit Move
        /// </summary>
        /// <remarks>
        /// Confirm a request made to move a circuit to a new site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Confirmation token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesCircuitsConfirmPostAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Confirm Circuit Move
        /// </summary>
        /// <remarks>
        /// Confirm a request made to move a circuit to a new site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Confirmation token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesCircuitsConfirmPostWithHttpInfoAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Sites
        /// </summary>
        /// <remarks>
        /// Get sites for logged in user. Offset and limits are used if \&quot;search\&quot; is specified.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSiteBasicSiteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSiteBasicSiteDTO>> ApiSitesGetAsync(string? search = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Sites
        /// </summary>
        /// <remarks>
        /// Get sites for logged in user. Offset and limits are used if \&quot;search\&quot; is specified.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSiteBasicSiteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSiteBasicSiteDTO>>> ApiSitesGetWithHttpInfoAsync(string? search = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Access Level - All Chargers
        /// </summary>
        /// <remarks>
        /// Set access level for all chargers on a site.&lt;br /&gt; Access Level can be Everyone, Registered Users og White  Listed Users.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdAccessPutAsync(int siteId, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Access Level - All Chargers
        /// </summary>
        /// <remarks>
        /// Set access level for all chargers on a site.&lt;br /&gt; Access Level can be Everyone, Registered Users og White  Listed Users.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdAccessPutWithHttpInfoAsync(int siteId, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Usage/Cost
        /// </summary>
        /// <remarks>
        /// Get power usage and cost for all chargers on a site in a time period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> ApiSitesSiteIdBreakdownFromToGetAsync(int siteId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Usage/Cost
        /// </summary>
        /// <remarks>
        /// Get power usage and cost for all chargers on a site in a time period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>>> ApiSitesSiteIdBreakdownFromToGetWithHttpInfoAsync(int siteId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Charger Usage - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charger power usage for a user and a charger on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGetAsync(int siteId, string chargerId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger Usage - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charger power usage for a user and a charger on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>>> ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGetWithHttpInfoAsync(int siteId, string chargerId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Charger Usage - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charger power usage for a user and a charger on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGetAsync(int siteId, string chargerId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger Usage - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charger power usage for a user and a charger on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>>> ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGetWithHttpInfoAsync(int siteId, string chargerId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Get all chargers on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeSiteStructureDomainPortsChargerDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeSiteStructureDomainPortsChargerDTO>> ApiSitesSiteIdChargersGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Get all chargers on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeSiteStructureDomainPortsChargerDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeSiteStructureDomainPortsChargerDTO>>> ApiSitesSiteIdChargersGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Access Level - Chargers
        /// </summary>
        /// <remarks>
        /// Set or delete access level for specified chargers.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteChargerAccessDTO">Chargers with Access Level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdChargersLevelOfAccessPutAsync(int siteId, List<EaseeCoreDTOsSiteChargerAccessDTO>? easeeCoreDTOsSiteChargerAccessDTO = default(List<EaseeCoreDTOsSiteChargerAccessDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Access Level - Chargers
        /// </summary>
        /// <remarks>
        /// Set or delete access level for specified chargers.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteChargerAccessDTO">Chargers with Access Level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdChargersLevelOfAccessPutWithHttpInfoAsync(int siteId, List<EaseeCoreDTOsSiteChargerAccessDTO>? easeeCoreDTOsSiteChargerAccessDTO = default(List<EaseeCoreDTOsSiteChargerAccessDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Circuits
        /// </summary>
        /// <remarks>
        /// Create or update circuits with backplates on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit with Backplates (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdCircuitCollectionPostAsync(int siteId, List<EaseeCoreDTOsSiteUpdateCircuitDTO>? easeeCoreDTOsSiteUpdateCircuitDTO = default(List<EaseeCoreDTOsSiteUpdateCircuitDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Circuits
        /// </summary>
        /// <remarks>
        /// Create or update circuits with backplates on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit with Backplates (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdCircuitCollectionPostWithHttpInfoAsync(int siteId, List<EaseeCoreDTOsSiteUpdateCircuitDTO>? easeeCoreDTOsSiteUpdateCircuitDTO = default(List<EaseeCoreDTOsSiteUpdateCircuitDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Chargers
        /// </summary>
        /// <remarks>
        /// Update a set of chargers on a circuit. Rate limited at max 15 request per minute.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsChargerChargerDTO">Charger details array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdCircuitsCircuitIdChargersPutAsync(int siteId, int circuitId, List<EaseeCoreDTOsChargerChargerDTO>? easeeCoreDTOsChargerChargerDTO = default(List<EaseeCoreDTOsChargerChargerDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Chargers
        /// </summary>
        /// <remarks>
        /// Update a set of chargers on a circuit. Rate limited at max 15 request per minute.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsChargerChargerDTO">Charger details array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdCircuitsCircuitIdChargersPutWithHttpInfoAsync(int siteId, int circuitId, List<EaseeCoreDTOsChargerChargerDTO>? easeeCoreDTOsChargerChargerDTO = default(List<EaseeCoreDTOsChargerChargerDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Circuit
        /// </summary>
        /// <remarks>
        /// Delete an empty circuit.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdCircuitsCircuitIdDeleteAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Circuit
        /// </summary>
        /// <remarks>
        /// Delete an empty circuit.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdCircuitsCircuitIdDeleteWithHttpInfoAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dynamic Circuit Current
        /// </summary>
        /// <remarks>
        /// Get dynamic circuit current of the primary charger
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsSiteDynamicCircuitCurrentDto</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsSiteDynamicCircuitCurrentDto> ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGetAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dynamic Circuit Current
        /// </summary>
        /// <remarks>
        /// Get dynamic circuit current of the primary charger
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsSiteDynamicCircuitCurrentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsSiteDynamicCircuitCurrentDto>> ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGetWithHttpInfoAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Dynamic Circuit Current
        /// </summary>
        /// <remarks>
        /// Set dynamic circuit current. &lt;br /&gt;Time to Live should be specified in minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto">Dynamic Current Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPostAsync(int siteId, int circuitId, EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto? easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto = default(EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Dynamic Circuit Current
        /// </summary>
        /// <remarks>
        /// Set dynamic circuit current. &lt;br /&gt;Time to Live should be specified in minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto">Dynamic Current Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPostWithHttpInfoAsync(int siteId, int circuitId, EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto? easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto = default(EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Circuit Settings
        /// </summary>
        /// <remarks>
        /// Get extended circuit settings for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsSiteExtendedCircuitSettingsDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsSiteExtendedCircuitSettingsDTO> ApiSitesSiteIdCircuitsCircuitIdSettingsGetAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Circuit Settings
        /// </summary>
        /// <remarks>
        /// Get extended circuit settings for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsSiteExtendedCircuitSettingsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsSiteExtendedCircuitSettingsDTO>> ApiSitesSiteIdCircuitsCircuitIdSettingsGetWithHttpInfoAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Circuit Settings
        /// </summary>
        /// <remarks>
        /// Set circuit settings of a site. Rate limited at max 20 request per minute. &lt;br /&gt; Please only specify keys you  want to change. Endpoint handles partial JSON objects and will give a 400 response if it does not understand the  request.&lt;br /&gt;Will only forward values for dynamicCircuitCurrentP1, P2, P3 to device if new value !&#x3D; old value
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitSettingsDTO">Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdCircuitsCircuitIdSettingsPostAsync(int siteId, int circuitId, EaseeCoreDTOsSiteCircuitSettingsDTO? easeeCoreDTOsSiteCircuitSettingsDTO = default(EaseeCoreDTOsSiteCircuitSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Circuit Settings
        /// </summary>
        /// <remarks>
        /// Set circuit settings of a site. Rate limited at max 20 request per minute. &lt;br /&gt; Please only specify keys you  want to change. Endpoint handles partial JSON objects and will give a 400 response if it does not understand the  request.&lt;br /&gt;Will only forward values for dynamicCircuitCurrentP1, P2, P3 to device if new value !&#x3D; old value
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitSettingsDTO">Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdCircuitsCircuitIdSettingsPostWithHttpInfoAsync(int siteId, int circuitId, EaseeCoreDTOsSiteCircuitSettingsDTO? easeeCoreDTOsSiteCircuitSettingsDTO = default(EaseeCoreDTOsSiteCircuitSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Circuit
        /// </summary>
        /// <remarks>
        /// Set circuit with backplates on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdCircuitsPostAsync(int siteId, EaseeCoreDTOsSiteUpdateCircuitDTO? easeeCoreDTOsSiteUpdateCircuitDTO = default(EaseeCoreDTOsSiteUpdateCircuitDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Circuit
        /// </summary>
        /// <remarks>
        /// Set circuit with backplates on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdCircuitsPostWithHttpInfoAsync(int siteId, EaseeCoreDTOsSiteUpdateCircuitDTO? easeeCoreDTOsSiteUpdateCircuitDTO = default(EaseeCoreDTOsSiteUpdateCircuitDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Circuits
        /// </summary>
        /// <remarks>
        /// Update circuits on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitDTO">Circuit array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdCircuitsPutAsync(int siteId, List<EaseeCoreDTOsSiteCircuitDTO>? easeeCoreDTOsSiteCircuitDTO = default(List<EaseeCoreDTOsSiteCircuitDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Circuits
        /// </summary>
        /// <remarks>
        /// Update circuits on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitDTO">Circuit array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdCircuitsPutWithHttpInfoAsync(int siteId, List<EaseeCoreDTOsSiteCircuitDTO>? easeeCoreDTOsSiteCircuitDTO = default(List<EaseeCoreDTOsSiteCircuitDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start Circuit Move
        /// </summary>
        /// <remarks>
        /// Initiate a request to move a circuit to a new site. If the source site has an owner then a confirmation email is sent.  If the source site has no owner then the circuit will be immediately transferred to the new site
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main Charger Serial Number</param>
        /// <param name="pinCode">Main Charger PIN Code</param>
        /// <param name="circuitName">Circuit Panel Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePutAsync(int siteId, string serialNumber, string pinCode, string circuitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start Circuit Move
        /// </summary>
        /// <remarks>
        /// Initiate a request to move a circuit to a new site. If the source site has an owner then a confirmation email is sent.  If the source site has no owner then the circuit will be immediately transferred to the new site
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main Charger Serial Number</param>
        /// <param name="pinCode">Main Charger PIN Code</param>
        /// <param name="circuitName">Circuit Panel Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePutWithHttpInfoAsync(int siteId, string serialNumber, string pinCode, string circuitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Circuit Attached
        /// </summary>
        /// <remarks>
        /// Check if Circuit is attached to a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main charger serial number</param>
        /// <param name="pinCode">Main charger PIN code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeSiteStructureDomainPortsSiteCircuitDTO</returns>
        System.Threading.Tasks.Task<EaseeSiteStructureDomainPortsSiteCircuitDTO> ApiSitesSiteIdCircuitsSerialNumberPinCodeGetAsync(int siteId, string serialNumber, string pinCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Circuit Attached
        /// </summary>
        /// <remarks>
        /// Check if Circuit is attached to a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main charger serial number</param>
        /// <param name="pinCode">Main charger PIN code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeSiteStructureDomainPortsSiteCircuitDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeSiteStructureDomainPortsSiteCircuitDTO>> ApiSitesSiteIdCircuitsSerialNumberPinCodeGetWithHttpInfoAsync(int siteId, string serialNumber, string pinCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Site
        /// </summary>
        /// <remarks>
        /// Delete site (Global Admin or Partner Admin).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdDeleteAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Site
        /// </summary>
        /// <remarks>
        /// Delete site (Global Admin or Partner Admin).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdDeleteWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lifetime Energy
        /// </summary>
        /// <remarks>
        /// Get current lifetime energy for all chargers on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerChargerEnergyDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerChargerEnergyDTO>> ApiSitesSiteIdEnergyGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lifetime Energy
        /// </summary>
        /// <remarks>
        /// Get current lifetime energy for all chargers on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerChargerEnergyDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsChargerChargerEnergyDTO>>> ApiSitesSiteIdEnergyGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Equalizer
        /// </summary>
        /// <remarks>
        /// Remove equalizer from a site. The api will only remove the site and master backpalte id references from databse
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="equalizerId">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdEqualizersEqualizerIdDeleteAsync(int siteId, string equalizerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Equalizer
        /// </summary>
        /// <remarks>
        /// Remove equalizer from a site. The api will only remove the site and master backpalte id references from databse
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="equalizerId">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdEqualizersEqualizerIdDeleteWithHttpInfoAsync(int siteId, string equalizerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Site Invitation
        /// </summary>
        /// <remarks>
        /// Send site invitation to user for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">Invitation Request with user phone number and role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdInvitePostAsync(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Site Invitation
        /// </summary>
        /// <remarks>
        /// Send site invitation to user for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">Invitation Request with user phone number and role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdInvitePostWithHttpInfoAsync(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User to Invite as Admin
        /// </summary>
        /// <remarks>
        /// Get user by phone number to invite to the site as administrator. (Site Admin)
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeUserAdministrationDomainDTOBasicProfile</returns>
        System.Threading.Tasks.Task<EaseeUserAdministrationDomainDTOBasicProfile> ApiSitesSiteIdLookupAdminGetAsync(int siteId, string? phoneNo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User to Invite as Admin
        /// </summary>
        /// <remarks>
        /// Get user by phone number to invite to the site as administrator. (Site Admin)
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeUserAdministrationDomainDTOBasicProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile>> ApiSitesSiteIdLookupAdminGetWithHttpInfoAsync(int siteId, string? phoneNo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User to Invite
        /// </summary>
        /// <remarks>
        /// Get user by phone number to invite to site. (Site Admin)
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeUserAdministrationDomainDTOBasicProfile</returns>
        System.Threading.Tasks.Task<EaseeUserAdministrationDomainDTOBasicProfile> ApiSitesSiteIdLookupUserGetAsync(int siteId, string? phoneNo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User to Invite
        /// </summary>
        /// <remarks>
        /// Get user by phone number to invite to site. (Site Admin)
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeUserAdministrationDomainDTOBasicProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile>> ApiSitesSiteIdLookupUserGetWithHttpInfoAsync(int siteId, string? phoneNo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Usage/Cost - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSitesSiteIdMonthlyGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Usage/Cost - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>> ApiSitesSiteIdMonthlyGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Change Site Owner
        /// </summary>
        /// <remarks>
        /// Change site owner (Global Admin, Partner Admin or Site Owner).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSiteOwnerDTO">New Owner (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdOwnerPostAsync(int siteId, EaseeAccessControlModelsSiteOwnerDTO? easeeAccessControlModelsSiteOwnerDTO = default(EaseeAccessControlModelsSiteOwnerDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change Site Owner
        /// </summary>
        /// <remarks>
        /// Change site owner (Global Admin, Partner Admin or Site Owner).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSiteOwnerDTO">New Owner (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdOwnerPostWithHttpInfoAsync(int siteId, EaseeAccessControlModelsSiteOwnerDTO? easeeAccessControlModelsSiteOwnerDTO = default(EaseeAccessControlModelsSiteOwnerDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Site (Partial)
        /// </summary>
        /// <remarks>
        /// More info: &lt;a&gt;http://jsonpatch.com&lt;/a&gt;&lt;br /&gt;  For example to change only &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Site Type&lt;/b&gt; of site: &lt;br /&gt;  [  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/name\&quot;, \&quot;value\&quot;: \&quot;test site\&quot; },  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/siteType\&quot;, \&quot;value\&quot;: 2 }  ]
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="microsoftAspNetCoreJsonPatchOperationsOperation">Site properties to update (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdPatchAsync(int siteId, List<MicrosoftAspNetCoreJsonPatchOperationsOperation>? microsoftAspNetCoreJsonPatchOperationsOperation = default(List<MicrosoftAspNetCoreJsonPatchOperationsOperation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Site (Partial)
        /// </summary>
        /// <remarks>
        /// More info: &lt;a&gt;http://jsonpatch.com&lt;/a&gt;&lt;br /&gt;  For example to change only &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Site Type&lt;/b&gt; of site: &lt;br /&gt;  [  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/name\&quot;, \&quot;value\&quot;: \&quot;test site\&quot; },  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/siteType\&quot;, \&quot;value\&quot;: 2 }  ]
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="microsoftAspNetCoreJsonPatchOperationsOperation">Site properties to update (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdPatchWithHttpInfoAsync(int siteId, List<MicrosoftAspNetCoreJsonPatchOperationsOperation>? microsoftAspNetCoreJsonPatchOperationsOperation = default(List<MicrosoftAspNetCoreJsonPatchOperationsOperation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Site Permission
        /// </summary>
        /// <remarks>
        /// Delete user permission for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">User Phone Number (optional)</param>
        /// <param name="email">user email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdPermissionDeleteAsync(int siteId, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Site Permission
        /// </summary>
        /// <remarks>
        /// Delete user permission for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">User Phone Number (optional)</param>
        /// <param name="email">user email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdPermissionDeleteWithHttpInfoAsync(int siteId, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a site user&#39;s permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="easeeCoreDTOsSiteUpdateSitePermissionRequestDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdPermissionPutAsync(int siteId, EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO? easeeCoreDTOsSiteUpdateSitePermissionRequestDTO = default(EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a site user&#39;s permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="easeeCoreDTOsSiteUpdateSitePermissionRequestDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdPermissionPutWithHttpInfoAsync(int siteId, EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO? easeeCoreDTOsSiteUpdateSitePermissionRequestDTO = default(EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Charging Price
        /// </summary>
        /// <remarks>
        /// Set fixed cost per kWh for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteSiteCostDTO">Fixed cost per kilowatt hour and currency id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdPricePostAsync(int siteId, EaseeCoreDTOsSiteSiteCostDTO? easeeCoreDTOsSiteSiteCostDTO = default(EaseeCoreDTOsSiteSiteCostDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Charging Price
        /// </summary>
        /// <remarks>
        /// Set fixed cost per kWh for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteSiteCostDTO">Fixed cost per kilowatt hour and currency id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdPricePostWithHttpInfoAsync(int siteId, EaseeCoreDTOsSiteSiteCostDTO? easeeCoreDTOsSiteSiteCostDTO = default(EaseeCoreDTOsSiteSiteCostDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resend Site Invitation
        /// </summary>
        /// <remarks>
        /// Resend site invitation to user for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">site permisssion reinvite request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdReinvitePostAsync(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resend Site Invitation
        /// </summary>
        /// <remarks>
        /// Resend site invitation to user for access to the site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">site permisssion reinvite request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdReinvitePostWithHttpInfoAsync(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request site access by logged in user(installer)
        /// </summary>
        /// <remarks>
        /// Request site access by logged in user(installer) and send email to the site owner.  Rate limited at max 5 request per 30 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Site permission (allowed only admin or user) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSitesSiteIdRequestAccessPostAsync(int siteId, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request site access by logged in user(installer)
        /// </summary>
        /// <remarks>
        /// Request site access by logged in user(installer) and send email to the site owner.  Rate limited at max 5 request per 30 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Site permission (allowed only admin or user) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSitesSiteIdRequestAccessPostWithHttpInfoAsync(int siteId, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Site Groups
        /// </summary>
        /// <remarks>
        /// Get site groups for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseePartnersDomainEntitiesPartnerSiteGroup&gt;</returns>
        System.Threading.Tasks.Task<List<EaseePartnersDomainEntitiesPartnerSiteGroup>> ApiSitesSiteIdSiteGroupsGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Site Groups
        /// </summary>
        /// <remarks>
        /// Get site groups for a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseePartnersDomainEntitiesPartnerSiteGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseePartnersDomainEntitiesPartnerSiteGroup>>> ApiSitesSiteIdSiteGroupsGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Users
        /// </summary>
        /// <remarks>
        /// Get all users for a site with permissions.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeUserAdministrationDomainDTOSitePermissionDTO</returns>
        System.Threading.Tasks.Task<EaseeUserAdministrationDomainDTOSitePermissionDTO> ApiSitesSiteIdUsersGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Users
        /// </summary>
        /// <remarks>
        /// Get all users for a site with permissions.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeUserAdministrationDomainDTOSitePermissionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeUserAdministrationDomainDTOSitePermissionDTO>> ApiSitesSiteIdUsersGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Charger Usage, All Chargers - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charger power usage for a user on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> ApiSitesSiteIdUsersUserIdMonthlyGetAsync(int siteId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger Usage, All Chargers - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charger power usage for a user on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>>> ApiSitesSiteIdUsersUserIdMonthlyGetWithHttpInfoAsync(int siteId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Charger Usage, All Chargers - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charger power usage for a user on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> ApiSitesSiteIdUsersUserIdYearlyGetAsync(int siteId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger Usage, All Chargers - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charger power usage for a user on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>>> ApiSitesSiteIdUsersUserIdYearlyGetWithHttpInfoAsync(int siteId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Power Usage/Cost - Weekly
        /// </summary>
        /// <remarks>
        /// Get weekly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> ApiSitesSiteIdWeeklyGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Power Usage/Cost - Weekly
        /// </summary>
        /// <remarks>
        /// Get weekly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>>> ApiSitesSiteIdWeeklyGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Usage/Cost - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSitesSiteIdYearlyGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Usage/Cost - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly power usage and cost for charging sessions on a site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>>> ApiSitesSiteIdYearlyGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Site
        /// </summary>
        /// <remarks>
        /// Get a site by id.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="detailed">Whether to include site details (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsSiteDetailSiteDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsSiteDetailSiteDTO> GetSiteByIdAsync(int siteId, bool? detailed = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Site
        /// </summary>
        /// <remarks>
        /// Get a site by id.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="detailed">Whether to include site details (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsSiteDetailSiteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsSiteDetailSiteDTO>> GetSiteByIdWithHttpInfoAsync(int siteId, bool? detailed = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dashboard Circuit States
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsDashboardDashboardStateDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsDashboardDashboardStateDTO> GetSiteStateAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dashboard Circuit States
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsDashboardDashboardStateDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsDashboardDashboardStateDTO>> GetSiteStateWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISiteApi : ISiteApiSync, ISiteApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SiteApi : ISiteApi
    {
        private kern.services.EaseeClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SiteApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SiteApi(string basePath)
        {
            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                new kern.services.EaseeClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SiteApi(kern.services.EaseeClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SiteApi(kern.services.EaseeClient.Client.ISynchronousClient client, kern.services.EaseeClient.Client.IAsynchronousClient asyncClient, kern.services.EaseeClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public kern.services.EaseeClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public kern.services.EaseeClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept Site Invitation Accept site invitation for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Site user permission invitation acceptance token (optional)</param>
        /// <param name="body">Site user permission invitation acceptance token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesAcceptPost(string? email = default(string?), string? body = default(string?), int operationIndex = 0)
        {
            ApiSitesAcceptPostWithHttpInfo(email, body);
        }

        /// <summary>
        /// Accept Site Invitation Accept site invitation for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Site user permission invitation acceptance token (optional)</param>
        /// <param name="body">Site user permission invitation acceptance token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesAcceptPostWithHttpInfo(string? email = default(string?), string? body = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesAcceptPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sites/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesAcceptPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept Site Invitation Accept site invitation for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Site user permission invitation acceptance token (optional)</param>
        /// <param name="body">Site user permission invitation acceptance token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesAcceptPostAsync(string? email = default(string?), string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesAcceptPostWithHttpInfoAsync(email, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Accept Site Invitation Accept site invitation for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Site user permission invitation acceptance token (optional)</param>
        /// <param name="body">Site user permission invitation acceptance token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesAcceptPostWithHttpInfoAsync(string? email = default(string?), string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesAcceptPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sites/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesAcceptPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm Circuit Move Confirm a request made to move a circuit to a new site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Confirmation token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesCircuitsConfirmPost(string? body = default(string?), int operationIndex = 0)
        {
            ApiSitesCircuitsConfirmPostWithHttpInfo(body);
        }

        /// <summary>
        /// Confirm Circuit Move Confirm a request made to move a circuit to a new site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Confirmation token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesCircuitsConfirmPostWithHttpInfo(string? body = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesCircuitsConfirmPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sites/circuits/confirm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesCircuitsConfirmPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm Circuit Move Confirm a request made to move a circuit to a new site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Confirmation token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesCircuitsConfirmPostAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesCircuitsConfirmPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Confirm Circuit Move Confirm a request made to move a circuit to a new site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Confirmation token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesCircuitsConfirmPostWithHttpInfoAsync(string? body = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesCircuitsConfirmPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sites/circuits/confirm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesCircuitsConfirmPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Sites Get sites for logged in user. Offset and limits are used if \&quot;search\&quot; is specified.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSiteBasicSiteDTO&gt;</returns>
        public List<EaseeCoreDTOsSiteBasicSiteDTO> ApiSitesGet(string? search = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteBasicSiteDTO>> localVarResponse = ApiSitesGetWithHttpInfo(search, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Sites Get sites for logged in user. Offset and limits are used if \&quot;search\&quot; is specified.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSiteBasicSiteDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteBasicSiteDTO>> ApiSitesGetWithHttpInfo(string? search = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "SiteApi.ApiSitesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSiteBasicSiteDTO>>("/api/sites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Sites Get sites for logged in user. Offset and limits are used if \&quot;search\&quot; is specified.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSiteBasicSiteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSiteBasicSiteDTO>> ApiSitesGetAsync(string? search = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteBasicSiteDTO>> localVarResponse = await ApiSitesGetWithHttpInfoAsync(search, offset, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Sites Get sites for logged in user. Offset and limits are used if \&quot;search\&quot; is specified.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSiteBasicSiteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteBasicSiteDTO>>> ApiSitesGetWithHttpInfoAsync(string? search = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "SiteApi.ApiSitesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSiteBasicSiteDTO>>("/api/sites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Access Level - All Chargers Set access level for all chargers on a site.&lt;br /&gt; Access Level can be Everyone, Registered Users og White  Listed Users.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdAccessPut(int siteId, int? body = default(int?), int operationIndex = 0)
        {
            ApiSitesSiteIdAccessPutWithHttpInfo(siteId, body);
        }

        /// <summary>
        /// Access Level - All Chargers Set access level for all chargers on a site.&lt;br /&gt; Access Level can be Everyone, Registered Users og White  Listed Users.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdAccessPutWithHttpInfo(int siteId, int? body = default(int?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdAccessPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/sites/{siteId}/access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdAccessPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Access Level - All Chargers Set access level for all chargers on a site.&lt;br /&gt; Access Level can be Everyone, Registered Users og White  Listed Users.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdAccessPutAsync(int siteId, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdAccessPutWithHttpInfoAsync(siteId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Access Level - All Chargers Set access level for all chargers on a site.&lt;br /&gt; Access Level can be Everyone, Registered Users og White  Listed Users.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdAccessPutWithHttpInfoAsync(int siteId, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdAccessPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/sites/{siteId}/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdAccessPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Usage/Cost Get power usage and cost for all chargers on a site in a time period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionChargingSessionDetailDTO> ApiSitesSiteIdBreakdownFromToGet(int siteId, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> localVarResponse = ApiSitesSiteIdBreakdownFromToGetWithHttpInfo(siteId, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Usage/Cost Get power usage and cost for all chargers on a site in a time period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> ApiSitesSiteIdBreakdownFromToGetWithHttpInfo(int siteId, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdBreakdownFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>>("/api/sites/{siteId}/breakdown/{from}/{to}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdBreakdownFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Usage/Cost Get power usage and cost for all chargers on a site in a time period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> ApiSitesSiteIdBreakdownFromToGetAsync(int siteId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> localVarResponse = await ApiSitesSiteIdBreakdownFromToGetWithHttpInfoAsync(siteId, from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Usage/Cost Get power usage and cost for all chargers on a site in a time period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>>> ApiSitesSiteIdBreakdownFromToGetWithHttpInfoAsync(int siteId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdBreakdownFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>>("/api/sites/{siteId}/breakdown/{from}/{to}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdBreakdownFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Usage - Monthly Get monthly charger power usage for a user and a charger on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO> ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGet(int siteId, string chargerId, int userId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> localVarResponse = ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGetWithHttpInfo(siteId, chargerId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Usage - Monthly Get monthly charger power usage for a user and a charger on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGetWithHttpInfo(int siteId, string chargerId, int userId, int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling SiteApi->ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>>("/api/sites/{siteId}/chargers/{chargerId}/users/{userId}/monthly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Usage - Monthly Get monthly charger power usage for a user and a charger on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGetAsync(int siteId, string chargerId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> localVarResponse = await ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGetWithHttpInfoAsync(siteId, chargerId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Usage - Monthly Get monthly charger power usage for a user and a charger on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>>> ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGetWithHttpInfoAsync(int siteId, string chargerId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling SiteApi->ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>>("/api/sites/{siteId}/chargers/{chargerId}/users/{userId}/monthly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdChargersChargerIdUsersUserIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Usage - Yearly Get yearly charger power usage for a user and a charger on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionYearlySessionSummaryDTO> ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGet(int siteId, string chargerId, int userId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> localVarResponse = ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGetWithHttpInfo(siteId, chargerId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Usage - Yearly Get yearly charger power usage for a user and a charger on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGetWithHttpInfo(int siteId, string chargerId, int userId, int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling SiteApi->ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>>("/api/sites/{siteId}/chargers/{chargerId}/users/{userId}/yearly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Usage - Yearly Get yearly charger power usage for a user and a charger on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGetAsync(int siteId, string chargerId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> localVarResponse = await ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGetWithHttpInfoAsync(siteId, chargerId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Usage - Yearly Get yearly charger power usage for a user and a charger on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>>> ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGetWithHttpInfoAsync(int siteId, string chargerId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling SiteApi->ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>>("/api/sites/{siteId}/chargers/{chargerId}/users/{userId}/yearly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdChargersChargerIdUsersUserIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Chargers Get all chargers on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeSiteStructureDomainPortsChargerDTO&gt;</returns>
        public List<EaseeSiteStructureDomainPortsChargerDTO> ApiSitesSiteIdChargersGet(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeSiteStructureDomainPortsChargerDTO>> localVarResponse = ApiSitesSiteIdChargersGetWithHttpInfo(siteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Chargers Get all chargers on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeSiteStructureDomainPortsChargerDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeSiteStructureDomainPortsChargerDTO>> ApiSitesSiteIdChargersGetWithHttpInfo(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdChargersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeSiteStructureDomainPortsChargerDTO>>("/api/sites/{siteId}/chargers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdChargersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Chargers Get all chargers on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeSiteStructureDomainPortsChargerDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeSiteStructureDomainPortsChargerDTO>> ApiSitesSiteIdChargersGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeSiteStructureDomainPortsChargerDTO>> localVarResponse = await ApiSitesSiteIdChargersGetWithHttpInfoAsync(siteId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Chargers Get all chargers on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeSiteStructureDomainPortsChargerDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeSiteStructureDomainPortsChargerDTO>>> ApiSitesSiteIdChargersGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdChargersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeSiteStructureDomainPortsChargerDTO>>("/api/sites/{siteId}/chargers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdChargersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Access Level - Chargers Set or delete access level for specified chargers.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteChargerAccessDTO">Chargers with Access Level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdChargersLevelOfAccessPut(int siteId, List<EaseeCoreDTOsSiteChargerAccessDTO>? easeeCoreDTOsSiteChargerAccessDTO = default(List<EaseeCoreDTOsSiteChargerAccessDTO>?), int operationIndex = 0)
        {
            ApiSitesSiteIdChargersLevelOfAccessPutWithHttpInfo(siteId, easeeCoreDTOsSiteChargerAccessDTO);
        }

        /// <summary>
        /// Access Level - Chargers Set or delete access level for specified chargers.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteChargerAccessDTO">Chargers with Access Level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdChargersLevelOfAccessPutWithHttpInfo(int siteId, List<EaseeCoreDTOsSiteChargerAccessDTO>? easeeCoreDTOsSiteChargerAccessDTO = default(List<EaseeCoreDTOsSiteChargerAccessDTO>?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteChargerAccessDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdChargersLevelOfAccessPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/sites/{siteId}/chargers/level_of_access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdChargersLevelOfAccessPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Access Level - Chargers Set or delete access level for specified chargers.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteChargerAccessDTO">Chargers with Access Level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdChargersLevelOfAccessPutAsync(int siteId, List<EaseeCoreDTOsSiteChargerAccessDTO>? easeeCoreDTOsSiteChargerAccessDTO = default(List<EaseeCoreDTOsSiteChargerAccessDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdChargersLevelOfAccessPutWithHttpInfoAsync(siteId, easeeCoreDTOsSiteChargerAccessDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Access Level - Chargers Set or delete access level for specified chargers.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteChargerAccessDTO">Chargers with Access Level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdChargersLevelOfAccessPutWithHttpInfoAsync(int siteId, List<EaseeCoreDTOsSiteChargerAccessDTO>? easeeCoreDTOsSiteChargerAccessDTO = default(List<EaseeCoreDTOsSiteChargerAccessDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteChargerAccessDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdChargersLevelOfAccessPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/sites/{siteId}/chargers/level_of_access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdChargersLevelOfAccessPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Circuits Create or update circuits with backplates on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit with Backplates (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdCircuitCollectionPost(int siteId, List<EaseeCoreDTOsSiteUpdateCircuitDTO>? easeeCoreDTOsSiteUpdateCircuitDTO = default(List<EaseeCoreDTOsSiteUpdateCircuitDTO>?), int operationIndex = 0)
        {
            ApiSitesSiteIdCircuitCollectionPostWithHttpInfo(siteId, easeeCoreDTOsSiteUpdateCircuitDTO);
        }

        /// <summary>
        /// Set Circuits Create or update circuits with backplates on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit with Backplates (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdCircuitCollectionPostWithHttpInfo(int siteId, List<EaseeCoreDTOsSiteUpdateCircuitDTO>? easeeCoreDTOsSiteUpdateCircuitDTO = default(List<EaseeCoreDTOsSiteUpdateCircuitDTO>?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteUpdateCircuitDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitCollectionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sites/{siteId}/circuit_collection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitCollectionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Circuits Create or update circuits with backplates on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit with Backplates (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdCircuitCollectionPostAsync(int siteId, List<EaseeCoreDTOsSiteUpdateCircuitDTO>? easeeCoreDTOsSiteUpdateCircuitDTO = default(List<EaseeCoreDTOsSiteUpdateCircuitDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdCircuitCollectionPostWithHttpInfoAsync(siteId, easeeCoreDTOsSiteUpdateCircuitDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Circuits Create or update circuits with backplates on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit with Backplates (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdCircuitCollectionPostWithHttpInfoAsync(int siteId, List<EaseeCoreDTOsSiteUpdateCircuitDTO>? easeeCoreDTOsSiteUpdateCircuitDTO = default(List<EaseeCoreDTOsSiteUpdateCircuitDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteUpdateCircuitDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitCollectionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sites/{siteId}/circuit_collection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitCollectionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Chargers Update a set of chargers on a circuit. Rate limited at max 15 request per minute.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsChargerChargerDTO">Charger details array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdCircuitsCircuitIdChargersPut(int siteId, int circuitId, List<EaseeCoreDTOsChargerChargerDTO>? easeeCoreDTOsChargerChargerDTO = default(List<EaseeCoreDTOsChargerChargerDTO>?), int operationIndex = 0)
        {
            ApiSitesSiteIdCircuitsCircuitIdChargersPutWithHttpInfo(siteId, circuitId, easeeCoreDTOsChargerChargerDTO);
        }

        /// <summary>
        /// Update Chargers Update a set of chargers on a circuit. Rate limited at max 15 request per minute.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsChargerChargerDTO">Charger details array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdCircuitsCircuitIdChargersPutWithHttpInfo(int siteId, int circuitId, List<EaseeCoreDTOsChargerChargerDTO>? easeeCoreDTOsChargerChargerDTO = default(List<EaseeCoreDTOsChargerChargerDTO>?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerChargerDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdChargersPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/sites/{siteId}/circuits/{circuitId}/chargers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdChargersPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Chargers Update a set of chargers on a circuit. Rate limited at max 15 request per minute.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsChargerChargerDTO">Charger details array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdCircuitsCircuitIdChargersPutAsync(int siteId, int circuitId, List<EaseeCoreDTOsChargerChargerDTO>? easeeCoreDTOsChargerChargerDTO = default(List<EaseeCoreDTOsChargerChargerDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdCircuitsCircuitIdChargersPutWithHttpInfoAsync(siteId, circuitId, easeeCoreDTOsChargerChargerDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Chargers Update a set of chargers on a circuit. Rate limited at max 15 request per minute.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsChargerChargerDTO">Charger details array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdCircuitsCircuitIdChargersPutWithHttpInfoAsync(int siteId, int circuitId, List<EaseeCoreDTOsChargerChargerDTO>? easeeCoreDTOsChargerChargerDTO = default(List<EaseeCoreDTOsChargerChargerDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerChargerDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdChargersPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/sites/{siteId}/circuits/{circuitId}/chargers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdChargersPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Circuit Delete an empty circuit.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdCircuitsCircuitIdDelete(int siteId, int circuitId, int operationIndex = 0)
        {
            ApiSitesSiteIdCircuitsCircuitIdDeleteWithHttpInfo(siteId, circuitId);
        }

        /// <summary>
        /// Delete Circuit Delete an empty circuit.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdCircuitsCircuitIdDeleteWithHttpInfo(int siteId, int circuitId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/sites/{siteId}/circuits/{circuitId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Circuit Delete an empty circuit.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdCircuitsCircuitIdDeleteAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdCircuitsCircuitIdDeleteWithHttpInfoAsync(siteId, circuitId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Circuit Delete an empty circuit.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdCircuitsCircuitIdDeleteWithHttpInfoAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/sites/{siteId}/circuits/{circuitId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dynamic Circuit Current Get dynamic circuit current of the primary charger
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsSiteDynamicCircuitCurrentDto</returns>
        public EaseeCoreDTOsSiteDynamicCircuitCurrentDto ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGet(int siteId, int circuitId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteDynamicCircuitCurrentDto> localVarResponse = ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGetWithHttpInfo(siteId, circuitId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dynamic Circuit Current Get dynamic circuit current of the primary charger
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsSiteDynamicCircuitCurrentDto</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteDynamicCircuitCurrentDto> ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGetWithHttpInfo(int siteId, int circuitId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsSiteDynamicCircuitCurrentDto>("/api/sites/{siteId}/circuits/{circuitId}/dynamicCurrent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dynamic Circuit Current Get dynamic circuit current of the primary charger
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsSiteDynamicCircuitCurrentDto</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsSiteDynamicCircuitCurrentDto> ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGetAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteDynamicCircuitCurrentDto> localVarResponse = await ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGetWithHttpInfoAsync(siteId, circuitId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dynamic Circuit Current Get dynamic circuit current of the primary charger
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsSiteDynamicCircuitCurrentDto)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteDynamicCircuitCurrentDto>> ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGetWithHttpInfoAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsSiteDynamicCircuitCurrentDto>("/api/sites/{siteId}/circuits/{circuitId}/dynamicCurrent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Dynamic Circuit Current Set dynamic circuit current. &lt;br /&gt;Time to Live should be specified in minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto">Dynamic Current Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPost(int siteId, int circuitId, EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto? easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto = default(EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto?), int operationIndex = 0)
        {
            ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPostWithHttpInfo(siteId, circuitId, easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto);
        }

        /// <summary>
        /// Set Dynamic Circuit Current Set dynamic circuit current. &lt;br /&gt;Time to Live should be specified in minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto">Dynamic Current Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPostWithHttpInfo(int siteId, int circuitId, EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto? easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto = default(EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sites/{siteId}/circuits/{circuitId}/dynamicCurrent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Dynamic Circuit Current Set dynamic circuit current. &lt;br /&gt;Time to Live should be specified in minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto">Dynamic Current Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPostAsync(int siteId, int circuitId, EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto? easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto = default(EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPostWithHttpInfoAsync(siteId, circuitId, easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Dynamic Circuit Current Set dynamic circuit current. &lt;br /&gt;Time to Live should be specified in minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto">Dynamic Current Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPostWithHttpInfoAsync(int siteId, int circuitId, EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto? easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto = default(EaseeCoreDTOsSiteDynamicCircuitCurrentTtlDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteDynamicCircuitCurrentTtlDto;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sites/{siteId}/circuits/{circuitId}/dynamicCurrent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdDynamicCurrentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Circuit Settings Get extended circuit settings for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsSiteExtendedCircuitSettingsDTO</returns>
        public EaseeCoreDTOsSiteExtendedCircuitSettingsDTO ApiSitesSiteIdCircuitsCircuitIdSettingsGet(int siteId, int circuitId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteExtendedCircuitSettingsDTO> localVarResponse = ApiSitesSiteIdCircuitsCircuitIdSettingsGetWithHttpInfo(siteId, circuitId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Circuit Settings Get extended circuit settings for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsSiteExtendedCircuitSettingsDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteExtendedCircuitSettingsDTO> ApiSitesSiteIdCircuitsCircuitIdSettingsGetWithHttpInfo(int siteId, int circuitId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdSettingsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsSiteExtendedCircuitSettingsDTO>("/api/sites/{siteId}/circuits/{circuitId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdSettingsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Circuit Settings Get extended circuit settings for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsSiteExtendedCircuitSettingsDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsSiteExtendedCircuitSettingsDTO> ApiSitesSiteIdCircuitsCircuitIdSettingsGetAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteExtendedCircuitSettingsDTO> localVarResponse = await ApiSitesSiteIdCircuitsCircuitIdSettingsGetWithHttpInfoAsync(siteId, circuitId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Circuit Settings Get extended circuit settings for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsSiteExtendedCircuitSettingsDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteExtendedCircuitSettingsDTO>> ApiSitesSiteIdCircuitsCircuitIdSettingsGetWithHttpInfoAsync(int siteId, int circuitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdSettingsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsSiteExtendedCircuitSettingsDTO>("/api/sites/{siteId}/circuits/{circuitId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdSettingsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Circuit Settings Set circuit settings of a site. Rate limited at max 20 request per minute. &lt;br /&gt; Please only specify keys you  want to change. Endpoint handles partial JSON objects and will give a 400 response if it does not understand the  request.&lt;br /&gt;Will only forward values for dynamicCircuitCurrentP1, P2, P3 to device if new value !&#x3D; old value
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitSettingsDTO">Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdCircuitsCircuitIdSettingsPost(int siteId, int circuitId, EaseeCoreDTOsSiteCircuitSettingsDTO? easeeCoreDTOsSiteCircuitSettingsDTO = default(EaseeCoreDTOsSiteCircuitSettingsDTO?), int operationIndex = 0)
        {
            ApiSitesSiteIdCircuitsCircuitIdSettingsPostWithHttpInfo(siteId, circuitId, easeeCoreDTOsSiteCircuitSettingsDTO);
        }

        /// <summary>
        /// Set Circuit Settings Set circuit settings of a site. Rate limited at max 20 request per minute. &lt;br /&gt; Please only specify keys you  want to change. Endpoint handles partial JSON objects and will give a 400 response if it does not understand the  request.&lt;br /&gt;Will only forward values for dynamicCircuitCurrentP1, P2, P3 to device if new value !&#x3D; old value
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitSettingsDTO">Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdCircuitsCircuitIdSettingsPostWithHttpInfo(int siteId, int circuitId, EaseeCoreDTOsSiteCircuitSettingsDTO? easeeCoreDTOsSiteCircuitSettingsDTO = default(EaseeCoreDTOsSiteCircuitSettingsDTO?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteCircuitSettingsDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdSettingsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sites/{siteId}/circuits/{circuitId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdSettingsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Circuit Settings Set circuit settings of a site. Rate limited at max 20 request per minute. &lt;br /&gt; Please only specify keys you  want to change. Endpoint handles partial JSON objects and will give a 400 response if it does not understand the  request.&lt;br /&gt;Will only forward values for dynamicCircuitCurrentP1, P2, P3 to device if new value !&#x3D; old value
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitSettingsDTO">Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdCircuitsCircuitIdSettingsPostAsync(int siteId, int circuitId, EaseeCoreDTOsSiteCircuitSettingsDTO? easeeCoreDTOsSiteCircuitSettingsDTO = default(EaseeCoreDTOsSiteCircuitSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdCircuitsCircuitIdSettingsPostWithHttpInfoAsync(siteId, circuitId, easeeCoreDTOsSiteCircuitSettingsDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Circuit Settings Set circuit settings of a site. Rate limited at max 20 request per minute. &lt;br /&gt; Please only specify keys you  want to change. Endpoint handles partial JSON objects and will give a 400 response if it does not understand the  request.&lt;br /&gt;Will only forward values for dynamicCircuitCurrentP1, P2, P3 to device if new value !&#x3D; old value
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="circuitId">Circuit ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitSettingsDTO">Settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdCircuitsCircuitIdSettingsPostWithHttpInfoAsync(int siteId, int circuitId, EaseeCoreDTOsSiteCircuitSettingsDTO? easeeCoreDTOsSiteCircuitSettingsDTO = default(EaseeCoreDTOsSiteCircuitSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteCircuitSettingsDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsCircuitIdSettingsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sites/{siteId}/circuits/{circuitId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsCircuitIdSettingsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Circuit Set circuit with backplates on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdCircuitsPost(int siteId, EaseeCoreDTOsSiteUpdateCircuitDTO? easeeCoreDTOsSiteUpdateCircuitDTO = default(EaseeCoreDTOsSiteUpdateCircuitDTO?), int operationIndex = 0)
        {
            ApiSitesSiteIdCircuitsPostWithHttpInfo(siteId, easeeCoreDTOsSiteUpdateCircuitDTO);
        }

        /// <summary>
        /// Set Circuit Set circuit with backplates on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdCircuitsPostWithHttpInfo(int siteId, EaseeCoreDTOsSiteUpdateCircuitDTO? easeeCoreDTOsSiteUpdateCircuitDTO = default(EaseeCoreDTOsSiteUpdateCircuitDTO?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteUpdateCircuitDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sites/{siteId}/circuits", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Circuit Set circuit with backplates on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdCircuitsPostAsync(int siteId, EaseeCoreDTOsSiteUpdateCircuitDTO? easeeCoreDTOsSiteUpdateCircuitDTO = default(EaseeCoreDTOsSiteUpdateCircuitDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdCircuitsPostWithHttpInfoAsync(siteId, easeeCoreDTOsSiteUpdateCircuitDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Circuit Set circuit with backplates on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier</param>
        /// <param name="easeeCoreDTOsSiteUpdateCircuitDTO">Circuit details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdCircuitsPostWithHttpInfoAsync(int siteId, EaseeCoreDTOsSiteUpdateCircuitDTO? easeeCoreDTOsSiteUpdateCircuitDTO = default(EaseeCoreDTOsSiteUpdateCircuitDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteUpdateCircuitDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sites/{siteId}/circuits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Circuits Update circuits on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitDTO">Circuit array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdCircuitsPut(int siteId, List<EaseeCoreDTOsSiteCircuitDTO>? easeeCoreDTOsSiteCircuitDTO = default(List<EaseeCoreDTOsSiteCircuitDTO>?), int operationIndex = 0)
        {
            ApiSitesSiteIdCircuitsPutWithHttpInfo(siteId, easeeCoreDTOsSiteCircuitDTO);
        }

        /// <summary>
        /// Update Circuits Update circuits on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitDTO">Circuit array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdCircuitsPutWithHttpInfo(int siteId, List<EaseeCoreDTOsSiteCircuitDTO>? easeeCoreDTOsSiteCircuitDTO = default(List<EaseeCoreDTOsSiteCircuitDTO>?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteCircuitDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/sites/{siteId}/circuits", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Circuits Update circuits on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitDTO">Circuit array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdCircuitsPutAsync(int siteId, List<EaseeCoreDTOsSiteCircuitDTO>? easeeCoreDTOsSiteCircuitDTO = default(List<EaseeCoreDTOsSiteCircuitDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdCircuitsPutWithHttpInfoAsync(siteId, easeeCoreDTOsSiteCircuitDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Circuits Update circuits on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteCircuitDTO">Circuit array (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdCircuitsPutWithHttpInfoAsync(int siteId, List<EaseeCoreDTOsSiteCircuitDTO>? easeeCoreDTOsSiteCircuitDTO = default(List<EaseeCoreDTOsSiteCircuitDTO>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteCircuitDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/sites/{siteId}/circuits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Circuit Move Initiate a request to move a circuit to a new site. If the source site has an owner then a confirmation email is sent.  If the source site has no owner then the circuit will be immediately transferred to the new site
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main Charger Serial Number</param>
        /// <param name="pinCode">Main Charger PIN Code</param>
        /// <param name="circuitName">Circuit Panel Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut(int siteId, string serialNumber, string pinCode, string circuitName, int operationIndex = 0)
        {
            ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePutWithHttpInfo(siteId, serialNumber, pinCode, circuitName);
        }

        /// <summary>
        /// Start Circuit Move Initiate a request to move a circuit to a new site. If the source site has an owner then a confirmation email is sent.  If the source site has no owner then the circuit will be immediately transferred to the new site
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main Charger Serial Number</param>
        /// <param name="pinCode">Main Charger PIN Code</param>
        /// <param name="circuitName">Circuit Panel Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePutWithHttpInfo(int siteId, string serialNumber, string pinCode, string circuitName, int operationIndex = 0)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'serialNumber' when calling SiteApi->ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut");
            }

            // verify the required parameter 'pinCode' is set
            if (pinCode == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'pinCode' when calling SiteApi->ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut");
            }

            // verify the required parameter 'circuitName' is set
            if (circuitName == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'circuitName' when calling SiteApi->ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serialNumber", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(serialNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("pinCode", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(pinCode)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitName", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitName)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/sites/{siteId}/circuits/{serialNumber}/{pinCode}/{circuitName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Circuit Move Initiate a request to move a circuit to a new site. If the source site has an owner then a confirmation email is sent.  If the source site has no owner then the circuit will be immediately transferred to the new site
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main Charger Serial Number</param>
        /// <param name="pinCode">Main Charger PIN Code</param>
        /// <param name="circuitName">Circuit Panel Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePutAsync(int siteId, string serialNumber, string pinCode, string circuitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePutWithHttpInfoAsync(siteId, serialNumber, pinCode, circuitName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Start Circuit Move Initiate a request to move a circuit to a new site. If the source site has an owner then a confirmation email is sent.  If the source site has no owner then the circuit will be immediately transferred to the new site
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main Charger Serial Number</param>
        /// <param name="pinCode">Main Charger PIN Code</param>
        /// <param name="circuitName">Circuit Panel Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePutWithHttpInfoAsync(int siteId, string serialNumber, string pinCode, string circuitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'serialNumber' when calling SiteApi->ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut");
            }

            // verify the required parameter 'pinCode' is set
            if (pinCode == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'pinCode' when calling SiteApi->ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut");
            }

            // verify the required parameter 'circuitName' is set
            if (circuitName == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'circuitName' when calling SiteApi->ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serialNumber", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(serialNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("pinCode", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(pinCode)); // path parameter
            localVarRequestOptions.PathParameters.Add("circuitName", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(circuitName)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/sites/{siteId}/circuits/{serialNumber}/{pinCode}/{circuitName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsSerialNumberPinCodeCircuitNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Circuit Attached Check if Circuit is attached to a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main charger serial number</param>
        /// <param name="pinCode">Main charger PIN code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeSiteStructureDomainPortsSiteCircuitDTO</returns>
        public EaseeSiteStructureDomainPortsSiteCircuitDTO ApiSitesSiteIdCircuitsSerialNumberPinCodeGet(int siteId, string serialNumber, string pinCode, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeSiteStructureDomainPortsSiteCircuitDTO> localVarResponse = ApiSitesSiteIdCircuitsSerialNumberPinCodeGetWithHttpInfo(siteId, serialNumber, pinCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Circuit Attached Check if Circuit is attached to a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main charger serial number</param>
        /// <param name="pinCode">Main charger PIN code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeSiteStructureDomainPortsSiteCircuitDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeSiteStructureDomainPortsSiteCircuitDTO> ApiSitesSiteIdCircuitsSerialNumberPinCodeGetWithHttpInfo(int siteId, string serialNumber, string pinCode, int operationIndex = 0)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'serialNumber' when calling SiteApi->ApiSitesSiteIdCircuitsSerialNumberPinCodeGet");
            }

            // verify the required parameter 'pinCode' is set
            if (pinCode == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'pinCode' when calling SiteApi->ApiSitesSiteIdCircuitsSerialNumberPinCodeGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serialNumber", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(serialNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("pinCode", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(pinCode)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsSerialNumberPinCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeSiteStructureDomainPortsSiteCircuitDTO>("/api/sites/{siteId}/circuits/{serialNumber}/{pinCode}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsSerialNumberPinCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Circuit Attached Check if Circuit is attached to a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main charger serial number</param>
        /// <param name="pinCode">Main charger PIN code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeSiteStructureDomainPortsSiteCircuitDTO</returns>
        public async System.Threading.Tasks.Task<EaseeSiteStructureDomainPortsSiteCircuitDTO> ApiSitesSiteIdCircuitsSerialNumberPinCodeGetAsync(int siteId, string serialNumber, string pinCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeSiteStructureDomainPortsSiteCircuitDTO> localVarResponse = await ApiSitesSiteIdCircuitsSerialNumberPinCodeGetWithHttpInfoAsync(siteId, serialNumber, pinCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Circuit Attached Check if Circuit is attached to a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="serialNumber">Main charger serial number</param>
        /// <param name="pinCode">Main charger PIN code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeSiteStructureDomainPortsSiteCircuitDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeSiteStructureDomainPortsSiteCircuitDTO>> ApiSitesSiteIdCircuitsSerialNumberPinCodeGetWithHttpInfoAsync(int siteId, string serialNumber, string pinCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'serialNumber' when calling SiteApi->ApiSitesSiteIdCircuitsSerialNumberPinCodeGet");
            }

            // verify the required parameter 'pinCode' is set
            if (pinCode == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'pinCode' when calling SiteApi->ApiSitesSiteIdCircuitsSerialNumberPinCodeGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serialNumber", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(serialNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("pinCode", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(pinCode)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdCircuitsSerialNumberPinCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeSiteStructureDomainPortsSiteCircuitDTO>("/api/sites/{siteId}/circuits/{serialNumber}/{pinCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdCircuitsSerialNumberPinCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Site Delete site (Global Admin or Partner Admin).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdDelete(int siteId, int operationIndex = 0)
        {
            ApiSitesSiteIdDeleteWithHttpInfo(siteId);
        }

        /// <summary>
        /// Delete Site Delete site (Global Admin or Partner Admin).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdDeleteWithHttpInfo(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/sites/{siteId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Site Delete site (Global Admin or Partner Admin).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdDeleteAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdDeleteWithHttpInfoAsync(siteId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Site Delete site (Global Admin or Partner Admin).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdDeleteWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/sites/{siteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lifetime Energy Get current lifetime energy for all chargers on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerChargerEnergyDTO&gt;</returns>
        public List<EaseeCoreDTOsChargerChargerEnergyDTO> ApiSitesSiteIdEnergyGet(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargerEnergyDTO>> localVarResponse = ApiSitesSiteIdEnergyGetWithHttpInfo(siteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lifetime Energy Get current lifetime energy for all chargers on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerChargerEnergyDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargerEnergyDTO>> ApiSitesSiteIdEnergyGetWithHttpInfo(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdEnergyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsChargerChargerEnergyDTO>>("/api/sites/{siteId}/energy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdEnergyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lifetime Energy Get current lifetime energy for all chargers on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerChargerEnergyDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerChargerEnergyDTO>> ApiSitesSiteIdEnergyGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargerEnergyDTO>> localVarResponse = await ApiSitesSiteIdEnergyGetWithHttpInfoAsync(siteId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lifetime Energy Get current lifetime energy for all chargers on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerChargerEnergyDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargerEnergyDTO>>> ApiSitesSiteIdEnergyGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdEnergyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsChargerChargerEnergyDTO>>("/api/sites/{siteId}/energy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdEnergyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Equalizer Remove equalizer from a site. The api will only remove the site and master backpalte id references from databse
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="equalizerId">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdEqualizersEqualizerIdDelete(int siteId, string equalizerId, int operationIndex = 0)
        {
            ApiSitesSiteIdEqualizersEqualizerIdDeleteWithHttpInfo(siteId, equalizerId);
        }

        /// <summary>
        /// Remove Equalizer Remove equalizer from a site. The api will only remove the site and master backpalte id references from databse
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="equalizerId">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdEqualizersEqualizerIdDeleteWithHttpInfo(int siteId, string equalizerId, int operationIndex = 0)
        {
            // verify the required parameter 'equalizerId' is set
            if (equalizerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'equalizerId' when calling SiteApi->ApiSitesSiteIdEqualizersEqualizerIdDelete");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("equalizerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(equalizerId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdEqualizersEqualizerIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/sites/{siteId}/equalizers/{equalizerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdEqualizersEqualizerIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Equalizer Remove equalizer from a site. The api will only remove the site and master backpalte id references from databse
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="equalizerId">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdEqualizersEqualizerIdDeleteAsync(int siteId, string equalizerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdEqualizersEqualizerIdDeleteWithHttpInfoAsync(siteId, equalizerId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Equalizer Remove equalizer from a site. The api will only remove the site and master backpalte id references from databse
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="equalizerId">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdEqualizersEqualizerIdDeleteWithHttpInfoAsync(int siteId, string equalizerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'equalizerId' is set
            if (equalizerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'equalizerId' when calling SiteApi->ApiSitesSiteIdEqualizersEqualizerIdDelete");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("equalizerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(equalizerId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdEqualizersEqualizerIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/sites/{siteId}/equalizers/{equalizerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdEqualizersEqualizerIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Site Invitation Send site invitation to user for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">Invitation Request with user phone number and role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdInvitePost(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0)
        {
            ApiSitesSiteIdInvitePostWithHttpInfo(siteId, easeeAccessControlModelsSitePermissionRequestDTO);
        }

        /// <summary>
        /// Send Site Invitation Send site invitation to user for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">Invitation Request with user phone number and role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdInvitePostWithHttpInfo(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeAccessControlModelsSitePermissionRequestDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdInvitePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sites/{siteId}/invite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdInvitePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Site Invitation Send site invitation to user for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">Invitation Request with user phone number and role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdInvitePostAsync(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdInvitePostWithHttpInfoAsync(siteId, easeeAccessControlModelsSitePermissionRequestDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send Site Invitation Send site invitation to user for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">Invitation Request with user phone number and role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdInvitePostWithHttpInfoAsync(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeAccessControlModelsSitePermissionRequestDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdInvitePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sites/{siteId}/invite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdInvitePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User to Invite as Admin Get user by phone number to invite to the site as administrator. (Site Admin)
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeUserAdministrationDomainDTOBasicProfile</returns>
        public EaseeUserAdministrationDomainDTOBasicProfile ApiSitesSiteIdLookupAdminGet(int siteId, string? phoneNo = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile> localVarResponse = ApiSitesSiteIdLookupAdminGetWithHttpInfo(siteId, phoneNo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User to Invite as Admin Get user by phone number to invite to the site as administrator. (Site Admin)
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeUserAdministrationDomainDTOBasicProfile</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile> ApiSitesSiteIdLookupAdminGetWithHttpInfo(int siteId, string? phoneNo = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            if (phoneNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "phone_no", phoneNo));
            }

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdLookupAdminGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeUserAdministrationDomainDTOBasicProfile>("/api/sites/{siteId}/lookup_admin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdLookupAdminGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User to Invite as Admin Get user by phone number to invite to the site as administrator. (Site Admin)
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeUserAdministrationDomainDTOBasicProfile</returns>
        public async System.Threading.Tasks.Task<EaseeUserAdministrationDomainDTOBasicProfile> ApiSitesSiteIdLookupAdminGetAsync(int siteId, string? phoneNo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile> localVarResponse = await ApiSitesSiteIdLookupAdminGetWithHttpInfoAsync(siteId, phoneNo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User to Invite as Admin Get user by phone number to invite to the site as administrator. (Site Admin)
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeUserAdministrationDomainDTOBasicProfile)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile>> ApiSitesSiteIdLookupAdminGetWithHttpInfoAsync(int siteId, string? phoneNo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            if (phoneNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "phone_no", phoneNo));
            }

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdLookupAdminGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeUserAdministrationDomainDTOBasicProfile>("/api/sites/{siteId}/lookup_admin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdLookupAdminGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User to Invite Get user by phone number to invite to site. (Site Admin)
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeUserAdministrationDomainDTOBasicProfile</returns>
        public EaseeUserAdministrationDomainDTOBasicProfile ApiSitesSiteIdLookupUserGet(int siteId, string? phoneNo = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile> localVarResponse = ApiSitesSiteIdLookupUserGetWithHttpInfo(siteId, phoneNo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User to Invite Get user by phone number to invite to site. (Site Admin)
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeUserAdministrationDomainDTOBasicProfile</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile> ApiSitesSiteIdLookupUserGetWithHttpInfo(int siteId, string? phoneNo = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            if (phoneNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "phone_no", phoneNo));
            }

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdLookupUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeUserAdministrationDomainDTOBasicProfile>("/api/sites/{siteId}/lookup_user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdLookupUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User to Invite Get user by phone number to invite to site. (Site Admin)
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeUserAdministrationDomainDTOBasicProfile</returns>
        public async System.Threading.Tasks.Task<EaseeUserAdministrationDomainDTOBasicProfile> ApiSitesSiteIdLookupUserGetAsync(int siteId, string? phoneNo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile> localVarResponse = await ApiSitesSiteIdLookupUserGetWithHttpInfoAsync(siteId, phoneNo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User to Invite Get user by phone number to invite to site. (Site Admin)
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">Send invite to phone no (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeUserAdministrationDomainDTOBasicProfile)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOBasicProfile>> ApiSitesSiteIdLookupUserGetWithHttpInfoAsync(int siteId, string? phoneNo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            if (phoneNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "phone_no", phoneNo));
            }

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdLookupUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeUserAdministrationDomainDTOBasicProfile>("/api/sites/{siteId}/lookup_user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdLookupUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Usage/Cost - Monthly Get monthly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionMonthlySummaryDTO> ApiSitesSiteIdMonthlyGet(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> localVarResponse = ApiSitesSiteIdMonthlyGetWithHttpInfo(siteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Usage/Cost - Monthly Get monthly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSitesSiteIdMonthlyGetWithHttpInfo(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>("/api/sites/{siteId}/monthly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Usage/Cost - Monthly Get monthly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSitesSiteIdMonthlyGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> localVarResponse = await ApiSitesSiteIdMonthlyGetWithHttpInfoAsync(siteId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Usage/Cost - Monthly Get monthly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>> ApiSitesSiteIdMonthlyGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>("/api/sites/{siteId}/monthly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Site Owner Change site owner (Global Admin, Partner Admin or Site Owner).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSiteOwnerDTO">New Owner (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdOwnerPost(int siteId, EaseeAccessControlModelsSiteOwnerDTO? easeeAccessControlModelsSiteOwnerDTO = default(EaseeAccessControlModelsSiteOwnerDTO?), int operationIndex = 0)
        {
            ApiSitesSiteIdOwnerPostWithHttpInfo(siteId, easeeAccessControlModelsSiteOwnerDTO);
        }

        /// <summary>
        /// Change Site Owner Change site owner (Global Admin, Partner Admin or Site Owner).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSiteOwnerDTO">New Owner (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdOwnerPostWithHttpInfo(int siteId, EaseeAccessControlModelsSiteOwnerDTO? easeeAccessControlModelsSiteOwnerDTO = default(EaseeAccessControlModelsSiteOwnerDTO?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeAccessControlModelsSiteOwnerDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdOwnerPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sites/{siteId}/owner", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdOwnerPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Site Owner Change site owner (Global Admin, Partner Admin or Site Owner).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSiteOwnerDTO">New Owner (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdOwnerPostAsync(int siteId, EaseeAccessControlModelsSiteOwnerDTO? easeeAccessControlModelsSiteOwnerDTO = default(EaseeAccessControlModelsSiteOwnerDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdOwnerPostWithHttpInfoAsync(siteId, easeeAccessControlModelsSiteOwnerDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Change Site Owner Change site owner (Global Admin, Partner Admin or Site Owner).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSiteOwnerDTO">New Owner (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdOwnerPostWithHttpInfoAsync(int siteId, EaseeAccessControlModelsSiteOwnerDTO? easeeAccessControlModelsSiteOwnerDTO = default(EaseeAccessControlModelsSiteOwnerDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeAccessControlModelsSiteOwnerDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdOwnerPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sites/{siteId}/owner", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdOwnerPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Site (Partial) More info: &lt;a&gt;http://jsonpatch.com&lt;/a&gt;&lt;br /&gt;  For example to change only &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Site Type&lt;/b&gt; of site: &lt;br /&gt;  [  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/name\&quot;, \&quot;value\&quot;: \&quot;test site\&quot; },  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/siteType\&quot;, \&quot;value\&quot;: 2 }  ]
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="microsoftAspNetCoreJsonPatchOperationsOperation">Site properties to update (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdPatch(int siteId, List<MicrosoftAspNetCoreJsonPatchOperationsOperation>? microsoftAspNetCoreJsonPatchOperationsOperation = default(List<MicrosoftAspNetCoreJsonPatchOperationsOperation>?), int operationIndex = 0)
        {
            ApiSitesSiteIdPatchWithHttpInfo(siteId, microsoftAspNetCoreJsonPatchOperationsOperation);
        }

        /// <summary>
        /// Update Site (Partial) More info: &lt;a&gt;http://jsonpatch.com&lt;/a&gt;&lt;br /&gt;  For example to change only &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Site Type&lt;/b&gt; of site: &lt;br /&gt;  [  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/name\&quot;, \&quot;value\&quot;: \&quot;test site\&quot; },  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/siteType\&quot;, \&quot;value\&quot;: 2 }  ]
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="microsoftAspNetCoreJsonPatchOperationsOperation">Site properties to update (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdPatchWithHttpInfo(int siteId, List<MicrosoftAspNetCoreJsonPatchOperationsOperation>? microsoftAspNetCoreJsonPatchOperationsOperation = default(List<MicrosoftAspNetCoreJsonPatchOperationsOperation>?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = microsoftAspNetCoreJsonPatchOperationsOperation;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/sites/{siteId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Site (Partial) More info: &lt;a&gt;http://jsonpatch.com&lt;/a&gt;&lt;br /&gt;  For example to change only &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Site Type&lt;/b&gt; of site: &lt;br /&gt;  [  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/name\&quot;, \&quot;value\&quot;: \&quot;test site\&quot; },  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/siteType\&quot;, \&quot;value\&quot;: 2 }  ]
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="microsoftAspNetCoreJsonPatchOperationsOperation">Site properties to update (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdPatchAsync(int siteId, List<MicrosoftAspNetCoreJsonPatchOperationsOperation>? microsoftAspNetCoreJsonPatchOperationsOperation = default(List<MicrosoftAspNetCoreJsonPatchOperationsOperation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdPatchWithHttpInfoAsync(siteId, microsoftAspNetCoreJsonPatchOperationsOperation, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Site (Partial) More info: &lt;a&gt;http://jsonpatch.com&lt;/a&gt;&lt;br /&gt;  For example to change only &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Site Type&lt;/b&gt; of site: &lt;br /&gt;  [  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/name\&quot;, \&quot;value\&quot;: \&quot;test site\&quot; },  { \&quot;op\&quot;: \&quot;replace\&quot;, \&quot;path\&quot;: \&quot;/siteType\&quot;, \&quot;value\&quot;: 2 }  ]
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="microsoftAspNetCoreJsonPatchOperationsOperation">Site properties to update (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdPatchWithHttpInfoAsync(int siteId, List<MicrosoftAspNetCoreJsonPatchOperationsOperation>? microsoftAspNetCoreJsonPatchOperationsOperation = default(List<MicrosoftAspNetCoreJsonPatchOperationsOperation>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = microsoftAspNetCoreJsonPatchOperationsOperation;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/sites/{siteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Site Permission Delete user permission for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">User Phone Number (optional)</param>
        /// <param name="email">user email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdPermissionDelete(int siteId, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0)
        {
            ApiSitesSiteIdPermissionDeleteWithHttpInfo(siteId, phoneNo, email);
        }

        /// <summary>
        /// Delete Site Permission Delete user permission for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">User Phone Number (optional)</param>
        /// <param name="email">user email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdPermissionDeleteWithHttpInfo(int siteId, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            if (phoneNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "phone_no", phoneNo));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdPermissionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/sites/{siteId}/permission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdPermissionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Site Permission Delete user permission for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">User Phone Number (optional)</param>
        /// <param name="email">user email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdPermissionDeleteAsync(int siteId, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdPermissionDeleteWithHttpInfoAsync(siteId, phoneNo, email, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Site Permission Delete user permission for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="phoneNo">User Phone Number (optional)</param>
        /// <param name="email">user email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdPermissionDeleteWithHttpInfoAsync(int siteId, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            if (phoneNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "phone_no", phoneNo));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdPermissionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/sites/{siteId}/permission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdPermissionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a site user&#39;s permissions 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="easeeCoreDTOsSiteUpdateSitePermissionRequestDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdPermissionPut(int siteId, EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO? easeeCoreDTOsSiteUpdateSitePermissionRequestDTO = default(EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO?), int operationIndex = 0)
        {
            ApiSitesSiteIdPermissionPutWithHttpInfo(siteId, easeeCoreDTOsSiteUpdateSitePermissionRequestDTO);
        }

        /// <summary>
        /// Updates a site user&#39;s permissions 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="easeeCoreDTOsSiteUpdateSitePermissionRequestDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdPermissionPutWithHttpInfo(int siteId, EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO? easeeCoreDTOsSiteUpdateSitePermissionRequestDTO = default(EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteUpdateSitePermissionRequestDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdPermissionPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/sites/{siteId}/permission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdPermissionPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a site user&#39;s permissions 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="easeeCoreDTOsSiteUpdateSitePermissionRequestDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdPermissionPutAsync(int siteId, EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO? easeeCoreDTOsSiteUpdateSitePermissionRequestDTO = default(EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdPermissionPutWithHttpInfoAsync(siteId, easeeCoreDTOsSiteUpdateSitePermissionRequestDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a site user&#39;s permissions 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="easeeCoreDTOsSiteUpdateSitePermissionRequestDTO"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdPermissionPutWithHttpInfoAsync(int siteId, EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO? easeeCoreDTOsSiteUpdateSitePermissionRequestDTO = default(EaseeCoreDTOsSiteUpdateSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteUpdateSitePermissionRequestDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdPermissionPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/sites/{siteId}/permission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdPermissionPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Charging Price Set fixed cost per kWh for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteSiteCostDTO">Fixed cost per kilowatt hour and currency id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdPricePost(int siteId, EaseeCoreDTOsSiteSiteCostDTO? easeeCoreDTOsSiteSiteCostDTO = default(EaseeCoreDTOsSiteSiteCostDTO?), int operationIndex = 0)
        {
            ApiSitesSiteIdPricePostWithHttpInfo(siteId, easeeCoreDTOsSiteSiteCostDTO);
        }

        /// <summary>
        /// Set Charging Price Set fixed cost per kWh for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteSiteCostDTO">Fixed cost per kilowatt hour and currency id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdPricePostWithHttpInfo(int siteId, EaseeCoreDTOsSiteSiteCostDTO? easeeCoreDTOsSiteSiteCostDTO = default(EaseeCoreDTOsSiteSiteCostDTO?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteSiteCostDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdPricePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sites/{siteId}/price", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdPricePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Charging Price Set fixed cost per kWh for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteSiteCostDTO">Fixed cost per kilowatt hour and currency id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdPricePostAsync(int siteId, EaseeCoreDTOsSiteSiteCostDTO? easeeCoreDTOsSiteSiteCostDTO = default(EaseeCoreDTOsSiteSiteCostDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdPricePostWithHttpInfoAsync(siteId, easeeCoreDTOsSiteSiteCostDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Charging Price Set fixed cost per kWh for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeCoreDTOsSiteSiteCostDTO">Fixed cost per kilowatt hour and currency id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdPricePostWithHttpInfoAsync(int siteId, EaseeCoreDTOsSiteSiteCostDTO? easeeCoreDTOsSiteSiteCostDTO = default(EaseeCoreDTOsSiteSiteCostDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsSiteSiteCostDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdPricePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sites/{siteId}/price", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdPricePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resend Site Invitation Resend site invitation to user for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">site permisssion reinvite request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdReinvitePost(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0)
        {
            ApiSitesSiteIdReinvitePostWithHttpInfo(siteId, easeeAccessControlModelsSitePermissionRequestDTO);
        }

        /// <summary>
        /// Resend Site Invitation Resend site invitation to user for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">site permisssion reinvite request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdReinvitePostWithHttpInfo(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeAccessControlModelsSitePermissionRequestDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdReinvitePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sites/{siteId}/reinvite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdReinvitePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resend Site Invitation Resend site invitation to user for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">site permisssion reinvite request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdReinvitePostAsync(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdReinvitePostWithHttpInfoAsync(siteId, easeeAccessControlModelsSitePermissionRequestDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Resend Site Invitation Resend site invitation to user for access to the site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="easeeAccessControlModelsSitePermissionRequestDTO">site permisssion reinvite request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdReinvitePostWithHttpInfoAsync(int siteId, EaseeAccessControlModelsSitePermissionRequestDTO? easeeAccessControlModelsSitePermissionRequestDTO = default(EaseeAccessControlModelsSitePermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = easeeAccessControlModelsSitePermissionRequestDTO;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdReinvitePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sites/{siteId}/reinvite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdReinvitePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request site access by logged in user(installer) Request site access by logged in user(installer) and send email to the site owner.  Rate limited at max 5 request per 30 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Site permission (allowed only admin or user) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiSitesSiteIdRequestAccessPost(int siteId, int? body = default(int?), int operationIndex = 0)
        {
            ApiSitesSiteIdRequestAccessPostWithHttpInfo(siteId, body);
        }

        /// <summary>
        /// Request site access by logged in user(installer) Request site access by logged in user(installer) and send email to the site owner.  Rate limited at max 5 request per 30 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Site permission (allowed only admin or user) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiSitesSiteIdRequestAccessPostWithHttpInfo(int siteId, int? body = default(int?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdRequestAccessPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sites/{siteId}/request_access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdRequestAccessPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request site access by logged in user(installer) Request site access by logged in user(installer) and send email to the site owner.  Rate limited at max 5 request per 30 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Site permission (allowed only admin or user) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSitesSiteIdRequestAccessPostAsync(int siteId, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSitesSiteIdRequestAccessPostWithHttpInfoAsync(siteId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request site access by logged in user(installer) Request site access by logged in user(installer) and send email to the site owner.  Rate limited at max 5 request per 30 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="body">Site permission (allowed only admin or user) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiSitesSiteIdRequestAccessPostWithHttpInfoAsync(int siteId, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdRequestAccessPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sites/{siteId}/request_access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdRequestAccessPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Site Groups Get site groups for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseePartnersDomainEntitiesPartnerSiteGroup&gt;</returns>
        public List<EaseePartnersDomainEntitiesPartnerSiteGroup> ApiSitesSiteIdSiteGroupsGet(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseePartnersDomainEntitiesPartnerSiteGroup>> localVarResponse = ApiSitesSiteIdSiteGroupsGetWithHttpInfo(siteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Site Groups Get site groups for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseePartnersDomainEntitiesPartnerSiteGroup&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseePartnersDomainEntitiesPartnerSiteGroup>> ApiSitesSiteIdSiteGroupsGetWithHttpInfo(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdSiteGroupsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseePartnersDomainEntitiesPartnerSiteGroup>>("/api/sites/{siteId}/siteGroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdSiteGroupsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Site Groups Get site groups for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseePartnersDomainEntitiesPartnerSiteGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseePartnersDomainEntitiesPartnerSiteGroup>> ApiSitesSiteIdSiteGroupsGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseePartnersDomainEntitiesPartnerSiteGroup>> localVarResponse = await ApiSitesSiteIdSiteGroupsGetWithHttpInfoAsync(siteId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Site Groups Get site groups for a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseePartnersDomainEntitiesPartnerSiteGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseePartnersDomainEntitiesPartnerSiteGroup>>> ApiSitesSiteIdSiteGroupsGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdSiteGroupsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseePartnersDomainEntitiesPartnerSiteGroup>>("/api/sites/{siteId}/siteGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdSiteGroupsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Users Get all users for a site with permissions.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeUserAdministrationDomainDTOSitePermissionDTO</returns>
        public EaseeUserAdministrationDomainDTOSitePermissionDTO ApiSitesSiteIdUsersGet(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOSitePermissionDTO> localVarResponse = ApiSitesSiteIdUsersGetWithHttpInfo(siteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Users Get all users for a site with permissions.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeUserAdministrationDomainDTOSitePermissionDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOSitePermissionDTO> ApiSitesSiteIdUsersGetWithHttpInfo(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdUsersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeUserAdministrationDomainDTOSitePermissionDTO>("/api/sites/{siteId}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdUsersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Users Get all users for a site with permissions.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeUserAdministrationDomainDTOSitePermissionDTO</returns>
        public async System.Threading.Tasks.Task<EaseeUserAdministrationDomainDTOSitePermissionDTO> ApiSitesSiteIdUsersGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOSitePermissionDTO> localVarResponse = await ApiSitesSiteIdUsersGetWithHttpInfoAsync(siteId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Users Get all users for a site with permissions.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeUserAdministrationDomainDTOSitePermissionDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDomainDTOSitePermissionDTO>> ApiSitesSiteIdUsersGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdUsersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeUserAdministrationDomainDTOSitePermissionDTO>("/api/sites/{siteId}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdUsersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Usage, All Chargers - Monthly Get monthly charger power usage for a user on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO> ApiSitesSiteIdUsersUserIdMonthlyGet(int siteId, int userId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> localVarResponse = ApiSitesSiteIdUsersUserIdMonthlyGetWithHttpInfo(siteId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Usage, All Chargers - Monthly Get monthly charger power usage for a user on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> ApiSitesSiteIdUsersUserIdMonthlyGetWithHttpInfo(int siteId, int userId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdUsersUserIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>>("/api/sites/{siteId}/users/{userId}/monthly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdUsersUserIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Usage, All Chargers - Monthly Get monthly charger power usage for a user on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> ApiSitesSiteIdUsersUserIdMonthlyGetAsync(int siteId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>> localVarResponse = await ApiSitesSiteIdUsersUserIdMonthlyGetWithHttpInfoAsync(siteId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Usage, All Chargers - Monthly Get monthly charger power usage for a user on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionMonthlySessionSummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>>> ApiSitesSiteIdUsersUserIdMonthlyGetWithHttpInfoAsync(int siteId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdUsersUserIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionMonthlySessionSummaryDTO>>("/api/sites/{siteId}/users/{userId}/monthly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdUsersUserIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Usage, All Chargers - Yearly Get yearly charger power usage for a user on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionYearlySessionSummaryDTO> ApiSitesSiteIdUsersUserIdYearlyGet(int siteId, int userId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> localVarResponse = ApiSitesSiteIdUsersUserIdYearlyGetWithHttpInfo(siteId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Usage, All Chargers - Yearly Get yearly charger power usage for a user on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> ApiSitesSiteIdUsersUserIdYearlyGetWithHttpInfo(int siteId, int userId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdUsersUserIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>>("/api/sites/{siteId}/users/{userId}/yearly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdUsersUserIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Usage, All Chargers - Yearly Get yearly charger power usage for a user on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> ApiSitesSiteIdUsersUserIdYearlyGetAsync(int siteId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>> localVarResponse = await ApiSitesSiteIdUsersUserIdYearlyGetWithHttpInfoAsync(siteId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Usage, All Chargers - Yearly Get yearly charger power usage for a user on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionYearlySessionSummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>>> ApiSitesSiteIdUsersUserIdYearlyGetWithHttpInfoAsync(int siteId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdUsersUserIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionYearlySessionSummaryDTO>>("/api/sites/{siteId}/users/{userId}/yearly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdUsersUserIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Power Usage/Cost - Weekly Get weekly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionWeeklySummaryDTO> ApiSitesSiteIdWeeklyGet(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> localVarResponse = ApiSitesSiteIdWeeklyGetWithHttpInfo(siteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Power Usage/Cost - Weekly Get weekly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> ApiSitesSiteIdWeeklyGetWithHttpInfo(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdWeeklyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionWeeklySummaryDTO>>("/api/sites/{siteId}/weekly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdWeeklyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Power Usage/Cost - Weekly Get weekly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> ApiSitesSiteIdWeeklyGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> localVarResponse = await ApiSitesSiteIdWeeklyGetWithHttpInfoAsync(siteId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Power Usage/Cost - Weekly Get weekly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>>> ApiSitesSiteIdWeeklyGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdWeeklyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionWeeklySummaryDTO>>("/api/sites/{siteId}/weekly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdWeeklyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Usage/Cost - Yearly Get yearly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionYearlySummaryDTO> ApiSitesSiteIdYearlyGet(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> localVarResponse = ApiSitesSiteIdYearlyGetWithHttpInfo(siteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Usage/Cost - Yearly Get yearly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSitesSiteIdYearlyGetWithHttpInfo(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionYearlySummaryDTO>>("/api/sites/{siteId}/yearly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Usage/Cost - Yearly Get yearly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSitesSiteIdYearlyGetAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> localVarResponse = await ApiSitesSiteIdYearlyGetWithHttpInfoAsync(siteId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Usage/Cost - Yearly Get yearly power usage and cost for charging sessions on a site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>>> ApiSitesSiteIdYearlyGetWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.ApiSitesSiteIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionYearlySummaryDTO>>("/api/sites/{siteId}/yearly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSitesSiteIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Site Get a site by id.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="detailed">Whether to include site details (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsSiteDetailSiteDTO</returns>
        public EaseeCoreDTOsSiteDetailSiteDTO GetSiteById(int siteId, bool? detailed = default(bool?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteDetailSiteDTO> localVarResponse = GetSiteByIdWithHttpInfo(siteId, detailed);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Site Get a site by id.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="detailed">Whether to include site details (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsSiteDetailSiteDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteDetailSiteDTO> GetSiteByIdWithHttpInfo(int siteId, bool? detailed = default(bool?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            if (detailed != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "detailed", detailed));
            }

            localVarRequestOptions.Operation = "SiteApi.GetSiteById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsSiteDetailSiteDTO>("/api/sites/{siteId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSiteById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Site Get a site by id.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="detailed">Whether to include site details (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsSiteDetailSiteDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsSiteDetailSiteDTO> GetSiteByIdAsync(int siteId, bool? detailed = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteDetailSiteDTO> localVarResponse = await GetSiteByIdWithHttpInfoAsync(siteId, detailed, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Site Get a site by id.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="detailed">Whether to include site details (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsSiteDetailSiteDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteDetailSiteDTO>> GetSiteByIdWithHttpInfoAsync(int siteId, bool? detailed = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            if (detailed != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "detailed", detailed));
            }

            localVarRequestOptions.Operation = "SiteApi.GetSiteById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsSiteDetailSiteDTO>("/api/sites/{siteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSiteById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dashboard Circuit States 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsDashboardDashboardStateDTO</returns>
        public EaseeCoreDTOsDashboardDashboardStateDTO GetSiteState(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsDashboardDashboardStateDTO> localVarResponse = GetSiteStateWithHttpInfo(siteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dashboard Circuit States 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsDashboardDashboardStateDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsDashboardDashboardStateDTO> GetSiteStateWithHttpInfo(int siteId, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.GetSiteState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsDashboardDashboardStateDTO>("/api/sites/{siteId}/state", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSiteState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dashboard Circuit States 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsDashboardDashboardStateDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsDashboardDashboardStateDTO> GetSiteStateAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsDashboardDashboardStateDTO> localVarResponse = await GetSiteStateWithHttpInfoAsync(siteId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dashboard Circuit States 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsDashboardDashboardStateDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsDashboardDashboardStateDTO>> GetSiteStateWithHttpInfoAsync(int siteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter

            localVarRequestOptions.Operation = "SiteApi.GetSiteState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsDashboardDashboardStateDTO>("/api/sites/{siteId}/state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSiteState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
