/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using kern.services.EaseeClient.Client;
using kern.services.EaseeClient.Model;

namespace kern.services.EaseeClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Invalidate refresh token
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The id for which the token belongs</param>
        /// <param name="token">Optional. Token to invalidate. If not present, all tokens for the accountId will be invalidated (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAccountsAccountIdInvalidateTokenDelete(int accountId, string? token = default(string?), int operationIndex = 0);

        /// <summary>
        /// Invalidate refresh token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The id for which the token belongs</param>
        /// <param name="token">Optional. Token to invalidate. If not present, all tokens for the accountId will be invalidated (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAccountsAccountIdInvalidateTokenDeleteWithHttpInfo(int accountId, string? token = default(string?), int operationIndex = 0);
        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        [Obsolete]
        List<EaseeAccessControlDomainDTOSiteDTO> ApiAccountsChargersGet(int operationIndex = 0);

        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        [Obsolete]
        ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>> ApiAccountsChargersGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Add Charger
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsProductPinDTO">Charger/equalizer PIN code details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        [Obsolete]
        void ApiAccountsChargersPost(EaseeAccessControlModelsProductPinDTO? easeeAccessControlModelsProductPinDTO = default(EaseeAccessControlModelsProductPinDTO?), int operationIndex = 0);

        /// <summary>
        /// Add Charger
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsProductPinDTO">Charger/equalizer PIN code details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> ApiAccountsChargersPostWithHttpInfo(EaseeAccessControlModelsProductPinDTO? easeeAccessControlModelsProductPinDTO = default(EaseeAccessControlModelsProductPinDTO?), int operationIndex = 0);
        /// <summary>
        /// Remove Charger
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNo">Charger/equalizer identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        [Obsolete]
        void ApiAccountsChargersSerialNoDelete(string serialNo, int operationIndex = 0);

        /// <summary>
        /// Remove Charger
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNo">Charger/equalizer identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> ApiAccountsChargersSerialNoDeleteWithHttpInfo(string serialNo, int operationIndex = 0);
        /// <summary>
        /// Authentication
        /// </summary>
        /// <remarks>
        /// Authenticate and retrieve access Token.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsLoginDto">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeUserAdministrationDTOUserToken</returns>
        EaseeUserAdministrationDTOUserToken ApiAccountsLoginPost(EaseeAccessControlModelsLoginDto? easeeAccessControlModelsLoginDto = default(EaseeAccessControlModelsLoginDto?), int operationIndex = 0);

        /// <summary>
        /// Authentication
        /// </summary>
        /// <remarks>
        /// Authenticate and retrieve access Token.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsLoginDto">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeUserAdministrationDTOUserToken</returns>
        ApiResponse<EaseeUserAdministrationDTOUserToken> ApiAccountsLoginPostWithHttpInfo(EaseeAccessControlModelsLoginDto? easeeAccessControlModelsLoginDto = default(EaseeAccessControlModelsLoginDto?), int operationIndex = 0);
        /// <summary>
        /// Products
        /// </summary>
        /// <remarks>
        /// Get products of logged in account. Product can be either charger or equalizer.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        List<EaseeAccessControlDomainDTOSiteDTO> ApiAccountsProductsGet(int? userId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Products
        /// </summary>
        /// <remarks>
        /// Get products of logged in account. Product can be either charger or equalizer.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>> ApiAccountsProductsGetWithHttpInfo(int? userId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Profile Info
        /// </summary>
        /// <remarks>
        /// Get profile info of logged in account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsAccountProfileDTO</returns>
        EaseeCoreDTOsAccountProfileDTO ApiAccountsProfileGet(int operationIndex = 0);

        /// <summary>
        /// Profile Info
        /// </summary>
        /// <remarks>
        /// Get profile info of logged in account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsAccountProfileDTO</returns>
        ApiResponse<EaseeCoreDTOsAccountProfileDTO> ApiAccountsProfileGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Refresh Token
        /// </summary>
        /// <remarks>
        /// Refresh access token.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsRefreshTokenDTO">Access token and refresh token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeUserAdministrationDTOUserToken</returns>
        EaseeUserAdministrationDTOUserToken ApiAccountsRefreshTokenPost(EaseeAccessControlModelsRefreshTokenDTO? easeeAccessControlModelsRefreshTokenDTO = default(EaseeAccessControlModelsRefreshTokenDTO?), int operationIndex = 0);

        /// <summary>
        /// Refresh Token
        /// </summary>
        /// <remarks>
        /// Refresh access token.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsRefreshTokenDTO">Access token and refresh token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeUserAdministrationDTOUserToken</returns>
        ApiResponse<EaseeUserAdministrationDTOUserToken> ApiAccountsRefreshTokenPostWithHttpInfo(EaseeAccessControlModelsRefreshTokenDTO? easeeAccessControlModelsRefreshTokenDTO = default(EaseeAccessControlModelsRefreshTokenDTO?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Invalidate refresh token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The id for which the token belongs</param>
        /// <param name="token">Optional. Token to invalidate. If not present, all tokens for the accountId will be invalidated (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAccountsAccountIdInvalidateTokenDeleteAsync(int accountId, string? token = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invalidate refresh token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The id for which the token belongs</param>
        /// <param name="token">Optional. Token to invalidate. If not present, all tokens for the accountId will be invalidated (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAccountsAccountIdInvalidateTokenDeleteWithHttpInfoAsync(int accountId, string? token = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<EaseeAccessControlDomainDTOSiteDTO>> ApiAccountsChargersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>>> ApiAccountsChargersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Charger
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsProductPinDTO">Charger/equalizer PIN code details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task ApiAccountsChargersPostAsync(EaseeAccessControlModelsProductPinDTO? easeeAccessControlModelsProductPinDTO = default(EaseeAccessControlModelsProductPinDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Charger
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsProductPinDTO">Charger/equalizer PIN code details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAccountsChargersPostWithHttpInfoAsync(EaseeAccessControlModelsProductPinDTO? easeeAccessControlModelsProductPinDTO = default(EaseeAccessControlModelsProductPinDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Charger
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNo">Charger/equalizer identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task ApiAccountsChargersSerialNoDeleteAsync(string serialNo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Charger
        /// </summary>
        /// <remarks>
        /// Replaced with products endpoint.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNo">Charger/equalizer identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAccountsChargersSerialNoDeleteWithHttpInfoAsync(string serialNo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authentication
        /// </summary>
        /// <remarks>
        /// Authenticate and retrieve access Token.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsLoginDto">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeUserAdministrationDTOUserToken</returns>
        System.Threading.Tasks.Task<EaseeUserAdministrationDTOUserToken> ApiAccountsLoginPostAsync(EaseeAccessControlModelsLoginDto? easeeAccessControlModelsLoginDto = default(EaseeAccessControlModelsLoginDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authentication
        /// </summary>
        /// <remarks>
        /// Authenticate and retrieve access Token.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsLoginDto">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeUserAdministrationDTOUserToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeUserAdministrationDTOUserToken>> ApiAccountsLoginPostWithHttpInfoAsync(EaseeAccessControlModelsLoginDto? easeeAccessControlModelsLoginDto = default(EaseeAccessControlModelsLoginDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Products
        /// </summary>
        /// <remarks>
        /// Get products of logged in account. Product can be either charger or equalizer.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeAccessControlDomainDTOSiteDTO>> ApiAccountsProductsGetAsync(int? userId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Products
        /// </summary>
        /// <remarks>
        /// Get products of logged in account. Product can be either charger or equalizer.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>>> ApiAccountsProductsGetWithHttpInfoAsync(int? userId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Profile Info
        /// </summary>
        /// <remarks>
        /// Get profile info of logged in account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsAccountProfileDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsAccountProfileDTO> ApiAccountsProfileGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Profile Info
        /// </summary>
        /// <remarks>
        /// Get profile info of logged in account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsAccountProfileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsAccountProfileDTO>> ApiAccountsProfileGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh Token
        /// </summary>
        /// <remarks>
        /// Refresh access token.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsRefreshTokenDTO">Access token and refresh token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeUserAdministrationDTOUserToken</returns>
        System.Threading.Tasks.Task<EaseeUserAdministrationDTOUserToken> ApiAccountsRefreshTokenPostAsync(EaseeAccessControlModelsRefreshTokenDTO? easeeAccessControlModelsRefreshTokenDTO = default(EaseeAccessControlModelsRefreshTokenDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh Token
        /// </summary>
        /// <remarks>
        /// Refresh access token.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsRefreshTokenDTO">Access token and refresh token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeUserAdministrationDTOUserToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeUserAdministrationDTOUserToken>> ApiAccountsRefreshTokenPostWithHttpInfoAsync(EaseeAccessControlModelsRefreshTokenDTO? easeeAccessControlModelsRefreshTokenDTO = default(EaseeAccessControlModelsRefreshTokenDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IAccountApiSync, IAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private kern.services.EaseeClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(string basePath)
        {
            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                new kern.services.EaseeClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(kern.services.EaseeClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountApi(kern.services.EaseeClient.Client.ISynchronousClient client, kern.services.EaseeClient.Client.IAsynchronousClient asyncClient, kern.services.EaseeClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public kern.services.EaseeClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public kern.services.EaseeClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Invalidate refresh token 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The id for which the token belongs</param>
        /// <param name="token">Optional. Token to invalidate. If not present, all tokens for the accountId will be invalidated (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAccountsAccountIdInvalidateTokenDelete(int accountId, string? token = default(string?), int operationIndex = 0)
        {
            ApiAccountsAccountIdInvalidateTokenDeleteWithHttpInfo(accountId, token);
        }

        /// <summary>
        /// Invalidate refresh token 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The id for which the token belongs</param>
        /// <param name="token">Optional. Token to invalidate. If not present, all tokens for the accountId will be invalidated (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiAccountsAccountIdInvalidateTokenDeleteWithHttpInfo(int accountId, string? token = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsAccountIdInvalidateTokenDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/accounts/{accountId}/invalidate_token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsAccountIdInvalidateTokenDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invalidate refresh token 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The id for which the token belongs</param>
        /// <param name="token">Optional. Token to invalidate. If not present, all tokens for the accountId will be invalidated (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAccountsAccountIdInvalidateTokenDeleteAsync(int accountId, string? token = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiAccountsAccountIdInvalidateTokenDeleteWithHttpInfoAsync(accountId, token, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Invalidate refresh token 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The id for which the token belongs</param>
        /// <param name="token">Optional. Token to invalidate. If not present, all tokens for the accountId will be invalidated (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiAccountsAccountIdInvalidateTokenDeleteWithHttpInfoAsync(int accountId, string? token = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsAccountIdInvalidateTokenDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/accounts/{accountId}/invalidate_token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsAccountIdInvalidateTokenDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Chargers Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        [Obsolete]
        public List<EaseeAccessControlDomainDTOSiteDTO> ApiAccountsChargersGet(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>> localVarResponse = ApiAccountsChargersGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Chargers Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        [Obsolete]
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>> ApiAccountsChargersGetWithHttpInfo(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.ApiAccountsChargersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeAccessControlDomainDTOSiteDTO>>("/api/accounts/chargers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsChargersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Chargers Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<EaseeAccessControlDomainDTOSiteDTO>> ApiAccountsChargersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>> localVarResponse = await ApiAccountsChargersGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Chargers Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>>> ApiAccountsChargersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.ApiAccountsChargersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeAccessControlDomainDTOSiteDTO>>("/api/accounts/chargers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsChargersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Charger Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsProductPinDTO">Charger/equalizer PIN code details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        [Obsolete]
        public void ApiAccountsChargersPost(EaseeAccessControlModelsProductPinDTO? easeeAccessControlModelsProductPinDTO = default(EaseeAccessControlModelsProductPinDTO?), int operationIndex = 0)
        {
            ApiAccountsChargersPostWithHttpInfo(easeeAccessControlModelsProductPinDTO);
        }

        /// <summary>
        /// Add Charger Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsProductPinDTO">Charger/equalizer PIN code details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiAccountsChargersPostWithHttpInfo(EaseeAccessControlModelsProductPinDTO? easeeAccessControlModelsProductPinDTO = default(EaseeAccessControlModelsProductPinDTO?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = easeeAccessControlModelsProductPinDTO;

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsChargersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/accounts/chargers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsChargersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Charger Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsProductPinDTO">Charger/equalizer PIN code details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task ApiAccountsChargersPostAsync(EaseeAccessControlModelsProductPinDTO? easeeAccessControlModelsProductPinDTO = default(EaseeAccessControlModelsProductPinDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiAccountsChargersPostWithHttpInfoAsync(easeeAccessControlModelsProductPinDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Charger Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsProductPinDTO">Charger/equalizer PIN code details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiAccountsChargersPostWithHttpInfoAsync(EaseeAccessControlModelsProductPinDTO? easeeAccessControlModelsProductPinDTO = default(EaseeAccessControlModelsProductPinDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = easeeAccessControlModelsProductPinDTO;

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsChargersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/accounts/chargers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsChargersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Charger Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNo">Charger/equalizer identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        [Obsolete]
        public void ApiAccountsChargersSerialNoDelete(string serialNo, int operationIndex = 0)
        {
            ApiAccountsChargersSerialNoDeleteWithHttpInfo(serialNo);
        }

        /// <summary>
        /// Remove Charger Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNo">Charger/equalizer identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiAccountsChargersSerialNoDeleteWithHttpInfo(string serialNo, int operationIndex = 0)
        {
            // verify the required parameter 'serialNo' is set
            if (serialNo == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'serialNo' when calling AccountApi->ApiAccountsChargersSerialNoDelete");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serial_no", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(serialNo)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsChargersSerialNoDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/accounts/chargers/{serial_no}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsChargersSerialNoDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Charger Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNo">Charger/equalizer identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task ApiAccountsChargersSerialNoDeleteAsync(string serialNo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiAccountsChargersSerialNoDeleteWithHttpInfoAsync(serialNo, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Charger Replaced with products endpoint.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNo">Charger/equalizer identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiAccountsChargersSerialNoDeleteWithHttpInfoAsync(string serialNo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serialNo' is set
            if (serialNo == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'serialNo' when calling AccountApi->ApiAccountsChargersSerialNoDelete");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serial_no", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(serialNo)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsChargersSerialNoDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/accounts/chargers/{serial_no}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsChargersSerialNoDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authentication Authenticate and retrieve access Token.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsLoginDto">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeUserAdministrationDTOUserToken</returns>
        public EaseeUserAdministrationDTOUserToken ApiAccountsLoginPost(EaseeAccessControlModelsLoginDto? easeeAccessControlModelsLoginDto = default(EaseeAccessControlModelsLoginDto?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDTOUserToken> localVarResponse = ApiAccountsLoginPostWithHttpInfo(easeeAccessControlModelsLoginDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authentication Authenticate and retrieve access Token.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsLoginDto">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeUserAdministrationDTOUserToken</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDTOUserToken> ApiAccountsLoginPostWithHttpInfo(EaseeAccessControlModelsLoginDto? easeeAccessControlModelsLoginDto = default(EaseeAccessControlModelsLoginDto?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = easeeAccessControlModelsLoginDto;

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsLoginPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EaseeUserAdministrationDTOUserToken>("/api/accounts/login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsLoginPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authentication Authenticate and retrieve access Token.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsLoginDto">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeUserAdministrationDTOUserToken</returns>
        public async System.Threading.Tasks.Task<EaseeUserAdministrationDTOUserToken> ApiAccountsLoginPostAsync(EaseeAccessControlModelsLoginDto? easeeAccessControlModelsLoginDto = default(EaseeAccessControlModelsLoginDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDTOUserToken> localVarResponse = await ApiAccountsLoginPostWithHttpInfoAsync(easeeAccessControlModelsLoginDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authentication Authenticate and retrieve access Token.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsLoginDto">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeUserAdministrationDTOUserToken)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDTOUserToken>> ApiAccountsLoginPostWithHttpInfoAsync(EaseeAccessControlModelsLoginDto? easeeAccessControlModelsLoginDto = default(EaseeAccessControlModelsLoginDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = easeeAccessControlModelsLoginDto;

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsLoginPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EaseeUserAdministrationDTOUserToken>("/api/accounts/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsLoginPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Products Get products of logged in account. Product can be either charger or equalizer.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        public List<EaseeAccessControlDomainDTOSiteDTO> ApiAccountsProductsGet(int? userId = default(int?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>> localVarResponse = ApiAccountsProductsGetWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Products Get products of logged in account. Product can be either charger or equalizer.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>> ApiAccountsProductsGetWithHttpInfo(int? userId = default(int?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsProductsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeAccessControlDomainDTOSiteDTO>>("/api/accounts/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsProductsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Products Get products of logged in account. Product can be either charger or equalizer.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeAccessControlDomainDTOSiteDTO>> ApiAccountsProductsGetAsync(int? userId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>> localVarResponse = await ApiAccountsProductsGetWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Products Get products of logged in account. Product can be either charger or equalizer.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeAccessControlDomainDTOSiteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOSiteDTO>>> ApiAccountsProductsGetWithHttpInfoAsync(int? userId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsProductsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeAccessControlDomainDTOSiteDTO>>("/api/accounts/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsProductsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Profile Info Get profile info of logged in account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsAccountProfileDTO</returns>
        public EaseeCoreDTOsAccountProfileDTO ApiAccountsProfileGet(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsAccountProfileDTO> localVarResponse = ApiAccountsProfileGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Profile Info Get profile info of logged in account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsAccountProfileDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsAccountProfileDTO> ApiAccountsProfileGetWithHttpInfo(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.ApiAccountsProfileGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsAccountProfileDTO>("/api/accounts/profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsProfileGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Profile Info Get profile info of logged in account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsAccountProfileDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsAccountProfileDTO> ApiAccountsProfileGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsAccountProfileDTO> localVarResponse = await ApiAccountsProfileGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Profile Info Get profile info of logged in account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsAccountProfileDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsAccountProfileDTO>> ApiAccountsProfileGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.ApiAccountsProfileGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsAccountProfileDTO>("/api/accounts/profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsProfileGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Token Refresh access token.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsRefreshTokenDTO">Access token and refresh token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeUserAdministrationDTOUserToken</returns>
        public EaseeUserAdministrationDTOUserToken ApiAccountsRefreshTokenPost(EaseeAccessControlModelsRefreshTokenDTO? easeeAccessControlModelsRefreshTokenDTO = default(EaseeAccessControlModelsRefreshTokenDTO?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDTOUserToken> localVarResponse = ApiAccountsRefreshTokenPostWithHttpInfo(easeeAccessControlModelsRefreshTokenDTO);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Token Refresh access token.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsRefreshTokenDTO">Access token and refresh token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeUserAdministrationDTOUserToken</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDTOUserToken> ApiAccountsRefreshTokenPostWithHttpInfo(EaseeAccessControlModelsRefreshTokenDTO? easeeAccessControlModelsRefreshTokenDTO = default(EaseeAccessControlModelsRefreshTokenDTO?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = easeeAccessControlModelsRefreshTokenDTO;

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsRefreshTokenPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EaseeUserAdministrationDTOUserToken>("/api/accounts/refresh_token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsRefreshTokenPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Token Refresh access token.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsRefreshTokenDTO">Access token and refresh token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeUserAdministrationDTOUserToken</returns>
        public async System.Threading.Tasks.Task<EaseeUserAdministrationDTOUserToken> ApiAccountsRefreshTokenPostAsync(EaseeAccessControlModelsRefreshTokenDTO? easeeAccessControlModelsRefreshTokenDTO = default(EaseeAccessControlModelsRefreshTokenDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDTOUserToken> localVarResponse = await ApiAccountsRefreshTokenPostWithHttpInfoAsync(easeeAccessControlModelsRefreshTokenDTO, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Token Refresh access token.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="easeeAccessControlModelsRefreshTokenDTO">Access token and refresh token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeUserAdministrationDTOUserToken)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeUserAdministrationDTOUserToken>> ApiAccountsRefreshTokenPostWithHttpInfoAsync(EaseeAccessControlModelsRefreshTokenDTO? easeeAccessControlModelsRefreshTokenDTO = default(EaseeAccessControlModelsRefreshTokenDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = easeeAccessControlModelsRefreshTokenDTO;

            localVarRequestOptions.Operation = "AccountApi.ApiAccountsRefreshTokenPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EaseeUserAdministrationDTOUserToken>("/api/accounts/refresh_token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountsRefreshTokenPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
