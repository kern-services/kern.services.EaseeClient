/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using kern.services.EaseeClient.Client;
using kern.services.EaseeClient.Model;

namespace kern.services.EaseeClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargeSessionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Charger Sessions - Daily
        /// </summary>
        /// <remarks>
        /// Get Daily charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionDailySummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionDailySummaryDTO> ApiSessionsChargerChargerIdDailyGet(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Charger Sessions - Daily
        /// </summary>
        /// <remarks>
        /// Get Daily charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionDailySummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionDailySummaryDTO>> ApiSessionsChargerChargerIdDailyGetWithHttpInfo(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Charger Sessions - Hourly
        /// </summary>
        /// <remarks>
        /// Get Hourly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionHourlySummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionHourlySummaryDTO> ApiSessionsChargerChargerIdHourlyGet(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Charger Sessions - Hourly
        /// </summary>
        /// <remarks>
        /// Get Hourly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionHourlySummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionHourlySummaryDTO>> ApiSessionsChargerChargerIdHourlyGetWithHttpInfo(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Charger Sessions - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionMonthlySummaryDTO> ApiSessionsChargerChargerIdMonthlyGet(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Charger Sessions - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSessionsChargerChargerIdMonthlyGetWithHttpInfo(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Charger Sessions
        /// </summary>
        /// <remarks>
        /// Get charging sessions for a charger for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        List<EaseeCoreDTOsSessionChargeSessionDTO> ApiSessionsChargerChargerIdSessionsFromToGet(string chargerId, DateTime from, DateTime to, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Charger Sessions
        /// </summary>
        /// <remarks>
        /// Get charging sessions for a charger for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>> ApiSessionsChargerChargerIdSessionsFromToGetWithHttpInfo(string chargerId, DateTime from, DateTime to, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Charger Power Usage
        /// </summary>
        /// <remarks>
        /// Get power usage (kWh/amount) for a charger for a specific period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>double</returns>
        double ApiSessionsChargerChargerIdTotalFromToGet(string chargerId, DateTime from, DateTime to, int operationIndex = 0);

        /// <summary>
        /// Charger Power Usage
        /// </summary>
        /// <remarks>
        /// Get power usage (kWh/amount) for a charger for a specific period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of double</returns>
        ApiResponse<double> ApiSessionsChargerChargerIdTotalFromToGetWithHttpInfo(string chargerId, DateTime from, DateTime to, int operationIndex = 0);
        /// <summary>
        /// Charger Sessions - Yearly
        /// </summary>
        /// <remarks>
        /// Get Yearly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionYearlySummaryDTO> ApiSessionsChargerChargerIdYearlyGet(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Charger Sessions - Yearly
        /// </summary>
        /// <remarks>
        /// Get Yearly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSessionsChargerChargerIdYearlyGetWithHttpInfo(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Site Consumption Report
        /// </summary>
        /// <remarks>
        /// Get site consumption report.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="category">Report Type</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="chargerId"> (optional)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ApiSessionsExportSiteIdCategoryFromToGet(int siteId, EaseeCoreEnumsReportCategory category, DateTime from, DateTime to, string? chargerId = default(string?), List<string>? rfidKeys = default(List<string>?), string? tz = default(string?), int operationIndex = 0);

        /// <summary>
        /// Site Consumption Report
        /// </summary>
        /// <remarks>
        /// Get site consumption report.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="category">Report Type</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="chargerId"> (optional)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ApiSessionsExportSiteIdCategoryFromToGetWithHttpInfo(int siteId, EaseeCoreEnumsReportCategory category, DateTime from, DateTime to, string? chargerId = default(string?), List<string>? rfidKeys = default(List<string>?), string? tz = default(string?), int operationIndex = 0);
        /// <summary>
        /// User Sessions - Grouped by Charger
        /// </summary>
        /// <remarks>
        /// Get charging sessions grouped by chargers for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        List<EaseeCoreDTOsSessionChargingSessionDetailDTO> ApiSessionsUserIdBreakdownFromToGet(int id, DateTime from, DateTime to, int operationIndex = 0);

        /// <summary>
        /// User Sessions - Grouped by Charger
        /// </summary>
        /// <remarks>
        /// Get charging sessions grouped by chargers for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> ApiSessionsUserIdBreakdownFromToGetWithHttpInfo(int id, DateTime from, DateTime to, int operationIndex = 0);
        /// <summary>
        /// User Sessions - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionMonthlySummaryDTO> ApiSessionsUserIdMonthlyGet(int id, int operationIndex = 0);

        /// <summary>
        /// User Sessions - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSessionsUserIdMonthlyGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// User Sessions
        /// </summary>
        /// <remarks>
        /// Get charging sessions for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        List<EaseeCoreDTOsSessionChargeSessionDTO> ApiSessionsUserIdSessionsFromToGet(int id, DateTime from, DateTime to, int operationIndex = 0);

        /// <summary>
        /// User Sessions
        /// </summary>
        /// <remarks>
        /// Get charging sessions for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>> ApiSessionsUserIdSessionsFromToGetWithHttpInfo(int id, DateTime from, DateTime to, int operationIndex = 0);
        /// <summary>
        /// User Power Usage
        /// </summary>
        /// <remarks>
        /// Get power usage (kWh/amount) for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>double</returns>
        double ApiSessionsUserIdTotalFromToGet(int id, DateTime from, DateTime to, int operationIndex = 0);

        /// <summary>
        /// User Power Usage
        /// </summary>
        /// <remarks>
        /// Get power usage (kWh/amount) for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of double</returns>
        ApiResponse<double> ApiSessionsUserIdTotalFromToGetWithHttpInfo(int id, DateTime from, DateTime to, int operationIndex = 0);
        /// <summary>
        /// User Sessions - Weekly
        /// </summary>
        /// <remarks>
        /// Get weekly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionWeeklySummaryDTO> ApiSessionsUserIdWeeklyGet(int id, int operationIndex = 0);

        /// <summary>
        /// User Sessions - Weekly
        /// </summary>
        /// <remarks>
        /// Get weekly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> ApiSessionsUserIdWeeklyGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// User Sessions - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        List<EaseeCoreDTOsSessionYearlySummaryDTO> ApiSessionsUserIdYearlyGet(int id, int operationIndex = 0);

        /// <summary>
        /// User Sessions - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSessionsUserIdYearlyGetWithHttpInfo(int id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargeSessionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Charger Sessions - Daily
        /// </summary>
        /// <remarks>
        /// Get Daily charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionDailySummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionDailySummaryDTO>> ApiSessionsChargerChargerIdDailyGetAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger Sessions - Daily
        /// </summary>
        /// <remarks>
        /// Get Daily charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionDailySummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionDailySummaryDTO>>> ApiSessionsChargerChargerIdDailyGetWithHttpInfoAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Charger Sessions - Hourly
        /// </summary>
        /// <remarks>
        /// Get Hourly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionHourlySummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionHourlySummaryDTO>> ApiSessionsChargerChargerIdHourlyGetAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger Sessions - Hourly
        /// </summary>
        /// <remarks>
        /// Get Hourly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionHourlySummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionHourlySummaryDTO>>> ApiSessionsChargerChargerIdHourlyGetWithHttpInfoAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Charger Sessions - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSessionsChargerChargerIdMonthlyGetAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger Sessions - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>> ApiSessionsChargerChargerIdMonthlyGetWithHttpInfoAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Charger Sessions
        /// </summary>
        /// <remarks>
        /// Get charging sessions for a charger for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionChargeSessionDTO>> ApiSessionsChargerChargerIdSessionsFromToGetAsync(string chargerId, DateTime from, DateTime to, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger Sessions
        /// </summary>
        /// <remarks>
        /// Get charging sessions for a charger for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>>> ApiSessionsChargerChargerIdSessionsFromToGetWithHttpInfoAsync(string chargerId, DateTime from, DateTime to, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Charger Power Usage
        /// </summary>
        /// <remarks>
        /// Get power usage (kWh/amount) for a charger for a specific period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of double</returns>
        System.Threading.Tasks.Task<double> ApiSessionsChargerChargerIdTotalFromToGetAsync(string chargerId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger Power Usage
        /// </summary>
        /// <remarks>
        /// Get power usage (kWh/amount) for a charger for a specific period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (double)</returns>
        System.Threading.Tasks.Task<ApiResponse<double>> ApiSessionsChargerChargerIdTotalFromToGetWithHttpInfoAsync(string chargerId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Charger Sessions - Yearly
        /// </summary>
        /// <remarks>
        /// Get Yearly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSessionsChargerChargerIdYearlyGetAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger Sessions - Yearly
        /// </summary>
        /// <remarks>
        /// Get Yearly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>>> ApiSessionsChargerChargerIdYearlyGetWithHttpInfoAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Site Consumption Report
        /// </summary>
        /// <remarks>
        /// Get site consumption report.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="category">Report Type</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="chargerId"> (optional)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ApiSessionsExportSiteIdCategoryFromToGetAsync(int siteId, EaseeCoreEnumsReportCategory category, DateTime from, DateTime to, string? chargerId = default(string?), List<string>? rfidKeys = default(List<string>?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Site Consumption Report
        /// </summary>
        /// <remarks>
        /// Get site consumption report.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="category">Report Type</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="chargerId"> (optional)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ApiSessionsExportSiteIdCategoryFromToGetWithHttpInfoAsync(int siteId, EaseeCoreEnumsReportCategory category, DateTime from, DateTime to, string? chargerId = default(string?), List<string>? rfidKeys = default(List<string>?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Sessions - Grouped by Charger
        /// </summary>
        /// <remarks>
        /// Get charging sessions grouped by chargers for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> ApiSessionsUserIdBreakdownFromToGetAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Sessions - Grouped by Charger
        /// </summary>
        /// <remarks>
        /// Get charging sessions grouped by chargers for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>>> ApiSessionsUserIdBreakdownFromToGetWithHttpInfoAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Sessions - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSessionsUserIdMonthlyGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Sessions - Monthly
        /// </summary>
        /// <remarks>
        /// Get monthly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>> ApiSessionsUserIdMonthlyGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Sessions
        /// </summary>
        /// <remarks>
        /// Get charging sessions for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionChargeSessionDTO>> ApiSessionsUserIdSessionsFromToGetAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Sessions
        /// </summary>
        /// <remarks>
        /// Get charging sessions for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>>> ApiSessionsUserIdSessionsFromToGetWithHttpInfoAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Power Usage
        /// </summary>
        /// <remarks>
        /// Get power usage (kWh/amount) for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of double</returns>
        System.Threading.Tasks.Task<double> ApiSessionsUserIdTotalFromToGetAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Power Usage
        /// </summary>
        /// <remarks>
        /// Get power usage (kWh/amount) for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (double)</returns>
        System.Threading.Tasks.Task<ApiResponse<double>> ApiSessionsUserIdTotalFromToGetWithHttpInfoAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Sessions - Weekly
        /// </summary>
        /// <remarks>
        /// Get weekly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> ApiSessionsUserIdWeeklyGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Sessions - Weekly
        /// </summary>
        /// <remarks>
        /// Get weekly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>>> ApiSessionsUserIdWeeklyGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Sessions - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSessionsUserIdYearlyGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Sessions - Yearly
        /// </summary>
        /// <remarks>
        /// Get yearly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>>> ApiSessionsUserIdYearlyGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargeSessionApi : IChargeSessionApiSync, IChargeSessionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChargeSessionApi : IChargeSessionApi
    {
        private kern.services.EaseeClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeSessionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChargeSessionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeSessionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChargeSessionApi(string basePath)
        {
            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                new kern.services.EaseeClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeSessionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChargeSessionApi(kern.services.EaseeClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeSessionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChargeSessionApi(kern.services.EaseeClient.Client.ISynchronousClient client, kern.services.EaseeClient.Client.IAsynchronousClient asyncClient, kern.services.EaseeClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public kern.services.EaseeClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public kern.services.EaseeClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Charger Sessions - Daily Get Daily charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionDailySummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionDailySummaryDTO> ApiSessionsChargerChargerIdDailyGet(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionDailySummaryDTO>> localVarResponse = ApiSessionsChargerChargerIdDailyGetWithHttpInfo(chargerId, rfidKeys);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Sessions - Daily Get Daily charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionDailySummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionDailySummaryDTO>> ApiSessionsChargerChargerIdDailyGetWithHttpInfo(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdDailyGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdDailyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionDailySummaryDTO>>("/api/sessions/charger/{chargerId}/daily", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdDailyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Sessions - Daily Get Daily charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionDailySummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionDailySummaryDTO>> ApiSessionsChargerChargerIdDailyGetAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionDailySummaryDTO>> localVarResponse = await ApiSessionsChargerChargerIdDailyGetWithHttpInfoAsync(chargerId, rfidKeys, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Sessions - Daily Get Daily charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionDailySummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionDailySummaryDTO>>> ApiSessionsChargerChargerIdDailyGetWithHttpInfoAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdDailyGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdDailyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionDailySummaryDTO>>("/api/sessions/charger/{chargerId}/daily", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdDailyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Sessions - Hourly Get Hourly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionHourlySummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionHourlySummaryDTO> ApiSessionsChargerChargerIdHourlyGet(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionHourlySummaryDTO>> localVarResponse = ApiSessionsChargerChargerIdHourlyGetWithHttpInfo(chargerId, rfidKeys);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Sessions - Hourly Get Hourly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionHourlySummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionHourlySummaryDTO>> ApiSessionsChargerChargerIdHourlyGetWithHttpInfo(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdHourlyGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdHourlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionHourlySummaryDTO>>("/api/sessions/charger/{chargerId}/hourly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdHourlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Sessions - Hourly Get Hourly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionHourlySummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionHourlySummaryDTO>> ApiSessionsChargerChargerIdHourlyGetAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionHourlySummaryDTO>> localVarResponse = await ApiSessionsChargerChargerIdHourlyGetWithHttpInfoAsync(chargerId, rfidKeys, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Sessions - Hourly Get Hourly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionHourlySummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionHourlySummaryDTO>>> ApiSessionsChargerChargerIdHourlyGetWithHttpInfoAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdHourlyGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdHourlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionHourlySummaryDTO>>("/api/sessions/charger/{chargerId}/hourly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdHourlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Sessions - Monthly Get monthly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionMonthlySummaryDTO> ApiSessionsChargerChargerIdMonthlyGet(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> localVarResponse = ApiSessionsChargerChargerIdMonthlyGetWithHttpInfo(chargerId, rfidKeys);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Sessions - Monthly Get monthly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSessionsChargerChargerIdMonthlyGetWithHttpInfo(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdMonthlyGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>("/api/sessions/charger/{chargerId}/monthly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Sessions - Monthly Get monthly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSessionsChargerChargerIdMonthlyGetAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> localVarResponse = await ApiSessionsChargerChargerIdMonthlyGetWithHttpInfoAsync(chargerId, rfidKeys, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Sessions - Monthly Get monthly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>> ApiSessionsChargerChargerIdMonthlyGetWithHttpInfoAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdMonthlyGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>("/api/sessions/charger/{chargerId}/monthly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Sessions Get charging sessions for a charger for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionChargeSessionDTO> ApiSessionsChargerChargerIdSessionsFromToGet(string chargerId, DateTime from, DateTime to, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>> localVarResponse = ApiSessionsChargerChargerIdSessionsFromToGetWithHttpInfo(chargerId, from, to, rfidKeys);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Sessions Get charging sessions for a charger for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>> ApiSessionsChargerChargerIdSessionsFromToGetWithHttpInfo(string chargerId, DateTime from, DateTime to, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdSessionsFromToGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdSessionsFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionChargeSessionDTO>>("/api/sessions/charger/{chargerId}/sessions/{from}/{to}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdSessionsFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Sessions Get charging sessions for a charger for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionChargeSessionDTO>> ApiSessionsChargerChargerIdSessionsFromToGetAsync(string chargerId, DateTime from, DateTime to, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>> localVarResponse = await ApiSessionsChargerChargerIdSessionsFromToGetWithHttpInfoAsync(chargerId, from, to, rfidKeys, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Sessions Get charging sessions for a charger for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>>> ApiSessionsChargerChargerIdSessionsFromToGetWithHttpInfoAsync(string chargerId, DateTime from, DateTime to, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdSessionsFromToGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdSessionsFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionChargeSessionDTO>>("/api/sessions/charger/{chargerId}/sessions/{from}/{to}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdSessionsFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Power Usage Get power usage (kWh/amount) for a charger for a specific period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>double</returns>
        public double ApiSessionsChargerChargerIdTotalFromToGet(string chargerId, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<double> localVarResponse = ApiSessionsChargerChargerIdTotalFromToGetWithHttpInfo(chargerId, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Power Usage Get power usage (kWh/amount) for a charger for a specific period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of double</returns>
        public kern.services.EaseeClient.Client.ApiResponse<double> ApiSessionsChargerChargerIdTotalFromToGetWithHttpInfo(string chargerId, DateTime from, DateTime to, int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdTotalFromToGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdTotalFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<double>("/api/sessions/charger/{chargerId}/total/{from}/{to}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdTotalFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Power Usage Get power usage (kWh/amount) for a charger for a specific period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of double</returns>
        public async System.Threading.Tasks.Task<double> ApiSessionsChargerChargerIdTotalFromToGetAsync(string chargerId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<double> localVarResponse = await ApiSessionsChargerChargerIdTotalFromToGetWithHttpInfoAsync(chargerId, from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Power Usage Get power usage (kWh/amount) for a charger for a specific period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (double)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<double>> ApiSessionsChargerChargerIdTotalFromToGetWithHttpInfoAsync(string chargerId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdTotalFromToGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdTotalFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<double>("/api/sessions/charger/{chargerId}/total/{from}/{to}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdTotalFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Sessions - Yearly Get Yearly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionYearlySummaryDTO> ApiSessionsChargerChargerIdYearlyGet(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> localVarResponse = ApiSessionsChargerChargerIdYearlyGetWithHttpInfo(chargerId, rfidKeys);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Sessions - Yearly Get Yearly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSessionsChargerChargerIdYearlyGetWithHttpInfo(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdYearlyGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionYearlySummaryDTO>>("/api/sessions/charger/{chargerId}/yearly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Sessions - Yearly Get Yearly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSessionsChargerChargerIdYearlyGetAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> localVarResponse = await ApiSessionsChargerChargerIdYearlyGetWithHttpInfoAsync(chargerId, rfidKeys, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Sessions - Yearly Get Yearly charging sessions for a charger. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">Charger Id</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>>> ApiSessionsChargerChargerIdYearlyGetWithHttpInfoAsync(string chargerId, List<string>? rfidKeys = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargeSessionApi->ApiSessionsChargerChargerIdYearlyGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsChargerChargerIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionYearlySummaryDTO>>("/api/sessions/charger/{chargerId}/yearly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsChargerChargerIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Site Consumption Report Get site consumption report.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="category">Report Type</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="chargerId"> (optional)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ApiSessionsExportSiteIdCategoryFromToGet(int siteId, EaseeCoreEnumsReportCategory category, DateTime from, DateTime to, string? chargerId = default(string?), List<string>? rfidKeys = default(List<string>?), string? tz = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<System.IO.Stream> localVarResponse = ApiSessionsExportSiteIdCategoryFromToGetWithHttpInfo(siteId, category, from, to, chargerId, rfidKeys, tz);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Site Consumption Report Get site consumption report.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="category">Report Type</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="chargerId"> (optional)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public kern.services.EaseeClient.Client.ApiResponse<System.IO.Stream> ApiSessionsExportSiteIdCategoryFromToGetWithHttpInfo(int siteId, EaseeCoreEnumsReportCategory category, DateTime from, DateTime to, string? chargerId = default(string?), List<string>? rfidKeys = default(List<string>?), string? tz = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("category", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(category)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter
            if (chargerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "chargerId", chargerId));
            }
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsExportSiteIdCategoryFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/api/sessions/export/{siteId}/{category}/{from}/{to}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsExportSiteIdCategoryFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Site Consumption Report Get site consumption report.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="category">Report Type</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="chargerId"> (optional)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ApiSessionsExportSiteIdCategoryFromToGetAsync(int siteId, EaseeCoreEnumsReportCategory category, DateTime from, DateTime to, string? chargerId = default(string?), List<string>? rfidKeys = default(List<string>?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await ApiSessionsExportSiteIdCategoryFromToGetWithHttpInfoAsync(siteId, category, from, to, chargerId, rfidKeys, tz, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Site Consumption Report Get site consumption report.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID</param>
        /// <param name="category">Report Type</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="chargerId"> (optional)</param>
        /// <param name="rfidKeys"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<System.IO.Stream>> ApiSessionsExportSiteIdCategoryFromToGetWithHttpInfoAsync(int siteId, EaseeCoreEnumsReportCategory category, DateTime from, DateTime to, string? chargerId = default(string?), List<string>? rfidKeys = default(List<string>?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siteId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(siteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("category", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(category)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter
            if (chargerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "chargerId", chargerId));
            }
            if (rfidKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("multi", "rfidKeys", rfidKeys));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsExportSiteIdCategoryFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/api/sessions/export/{siteId}/{category}/{from}/{to}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsExportSiteIdCategoryFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Sessions - Grouped by Charger Get charging sessions grouped by chargers for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionChargingSessionDetailDTO> ApiSessionsUserIdBreakdownFromToGet(int id, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> localVarResponse = ApiSessionsUserIdBreakdownFromToGetWithHttpInfo(id, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Sessions - Grouped by Charger Get charging sessions grouped by chargers for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> ApiSessionsUserIdBreakdownFromToGetWithHttpInfo(int id, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdBreakdownFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>>("/api/sessions/user/{id}/breakdown/{from}/{to}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdBreakdownFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Sessions - Grouped by Charger Get charging sessions grouped by chargers for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> ApiSessionsUserIdBreakdownFromToGetAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>> localVarResponse = await ApiSessionsUserIdBreakdownFromToGetWithHttpInfoAsync(id, from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Sessions - Grouped by Charger Get charging sessions grouped by chargers for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionChargingSessionDetailDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>>> ApiSessionsUserIdBreakdownFromToGetWithHttpInfoAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdBreakdownFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionChargingSessionDetailDTO>>("/api/sessions/user/{id}/breakdown/{from}/{to}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdBreakdownFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Sessions - Monthly Get monthly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionMonthlySummaryDTO> ApiSessionsUserIdMonthlyGet(int id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> localVarResponse = ApiSessionsUserIdMonthlyGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Sessions - Monthly Get monthly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSessionsUserIdMonthlyGetWithHttpInfo(int id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>("/api/sessions/user/{id}/monthly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Sessions - Monthly Get monthly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> ApiSessionsUserIdMonthlyGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>> localVarResponse = await ApiSessionsUserIdMonthlyGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Sessions - Monthly Get monthly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionMonthlySummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>> ApiSessionsUserIdMonthlyGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionMonthlySummaryDTO>>("/api/sessions/user/{id}/monthly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Sessions Get charging sessions for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionChargeSessionDTO> ApiSessionsUserIdSessionsFromToGet(int id, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>> localVarResponse = ApiSessionsUserIdSessionsFromToGetWithHttpInfo(id, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Sessions Get charging sessions for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>> ApiSessionsUserIdSessionsFromToGetWithHttpInfo(int id, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdSessionsFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionChargeSessionDTO>>("/api/sessions/user/{id}/sessions/{from}/{to}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdSessionsFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Sessions Get charging sessions for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionChargeSessionDTO>> ApiSessionsUserIdSessionsFromToGetAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>> localVarResponse = await ApiSessionsUserIdSessionsFromToGetWithHttpInfoAsync(id, from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Sessions Get charging sessions for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionChargeSessionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionChargeSessionDTO>>> ApiSessionsUserIdSessionsFromToGetWithHttpInfoAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdSessionsFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionChargeSessionDTO>>("/api/sessions/user/{id}/sessions/{from}/{to}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdSessionsFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Power Usage Get power usage (kWh/amount) for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>double</returns>
        public double ApiSessionsUserIdTotalFromToGet(int id, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<double> localVarResponse = ApiSessionsUserIdTotalFromToGetWithHttpInfo(id, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Power Usage Get power usage (kWh/amount) for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of double</returns>
        public kern.services.EaseeClient.Client.ApiResponse<double> ApiSessionsUserIdTotalFromToGetWithHttpInfo(int id, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdTotalFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<double>("/api/sessions/user/{id}/total/{from}/{to}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdTotalFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Power Usage Get power usage (kWh/amount) for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of double</returns>
        public async System.Threading.Tasks.Task<double> ApiSessionsUserIdTotalFromToGetAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<double> localVarResponse = await ApiSessionsUserIdTotalFromToGetWithHttpInfoAsync(id, from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Power Usage Get power usage (kWh/amount) for a user for a specific period. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (double)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<double>> ApiSessionsUserIdTotalFromToGetWithHttpInfoAsync(int id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdTotalFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<double>("/api/sessions/user/{id}/total/{from}/{to}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdTotalFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Sessions - Weekly Get weekly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionWeeklySummaryDTO> ApiSessionsUserIdWeeklyGet(int id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> localVarResponse = ApiSessionsUserIdWeeklyGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Sessions - Weekly Get weekly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> ApiSessionsUserIdWeeklyGetWithHttpInfo(int id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdWeeklyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionWeeklySummaryDTO>>("/api/sessions/user/{id}/weekly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdWeeklyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Sessions - Weekly Get weekly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> ApiSessionsUserIdWeeklyGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>> localVarResponse = await ApiSessionsUserIdWeeklyGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Sessions - Weekly Get weekly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionWeeklySummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionWeeklySummaryDTO>>> ApiSessionsUserIdWeeklyGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdWeeklyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionWeeklySummaryDTO>>("/api/sessions/user/{id}/weekly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdWeeklyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Sessions - Yearly Get yearly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionYearlySummaryDTO> ApiSessionsUserIdYearlyGet(int id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> localVarResponse = ApiSessionsUserIdYearlyGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Sessions - Yearly Get yearly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSessionsUserIdYearlyGetWithHttpInfo(int id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionYearlySummaryDTO>>("/api/sessions/user/{id}/yearly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Sessions - Yearly Get yearly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionYearlySummaryDTO>> ApiSessionsUserIdYearlyGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>> localVarResponse = await ApiSessionsUserIdYearlyGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Sessions - Yearly Get yearly charging sessions for a user. Rate limited at max 20 requests per 10 minutes.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionYearlySummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionYearlySummaryDTO>>> ApiSessionsUserIdYearlyGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargeSessionApi.ApiSessionsUserIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionYearlySummaryDTO>>("/api/sessions/user/{id}/yearly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSessionsUserIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
