/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using kern.services.EaseeClient.Client;
using kern.services.EaseeClient.Model;

namespace kern.services.EaseeClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEqualizerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Set max allocated current
        /// </summary>
        /// <remarks>
        /// Configure max allocated current for the whole charge installation  Rate limited max 1 requests per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO">Max current allocated settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPost(string id, EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO? easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO = default(EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO?), int operationIndex = 0);

        /// <summary>
        /// Set max allocated current
        /// </summary>
        /// <remarks>
        /// Configure max allocated current for the whole charge installation  Rate limited max 1 requests per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO">Max current allocated settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPostWithHttpInfo(string id, EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO? easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO = default(EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO?), int operationIndex = 0);
        /// <summary>
        /// Configure Meter Type
        /// </summary>
        /// <remarks>
        /// Configure the meter type for an equalizer. To change the equalizer meter type from P1/HAN to Modbus, set &lt;i&gt;deviceMode&lt;/i&gt; to 2 and set the &lt;i&gt;externalMeterType&lt;/i&gt;(1-4)  To change the equalizer back to P1/HAN set only &lt;i&gt;deviceMode&lt;/i&gt; to 1 since &lt;i&gt;externalMeterType&lt;/i&gt; is only applicable to Modbus  Rate limited at max 1 request per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMeterSettingsDTO">Meter settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiEqualizersIdCommandsConfigureMeterTypePost(string id, EaseeCoreDTOsEqualizerMeterSettingsDTO? easeeCoreDTOsEqualizerMeterSettingsDTO = default(EaseeCoreDTOsEqualizerMeterSettingsDTO?), int operationIndex = 0);

        /// <summary>
        /// Configure Meter Type
        /// </summary>
        /// <remarks>
        /// Configure the meter type for an equalizer. To change the equalizer meter type from P1/HAN to Modbus, set &lt;i&gt;deviceMode&lt;/i&gt; to 2 and set the &lt;i&gt;externalMeterType&lt;/i&gt;(1-4)  To change the equalizer back to P1/HAN set only &lt;i&gt;deviceMode&lt;/i&gt; to 1 since &lt;i&gt;externalMeterType&lt;/i&gt; is only applicable to Modbus  Rate limited at max 1 request per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMeterSettingsDTO">Meter settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiEqualizersIdCommandsConfigureMeterTypePostWithHttpInfo(string id, EaseeCoreDTOsEqualizerMeterSettingsDTO? easeeCoreDTOsEqualizerMeterSettingsDTO = default(EaseeCoreDTOsEqualizerMeterSettingsDTO?), int operationIndex = 0);
        /// <summary>
        /// Reboot
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiEqualizersIdCommandsRebootPost(string id, int operationIndex = 0);

        /// <summary>
        /// Reboot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiEqualizersIdCommandsRebootPostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Update Firmware
        /// </summary>
        /// <remarks>
        /// Updates firmware to latest public release
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiEqualizersIdCommandsUpdateFirmwarePost(string id, int operationIndex = 0);

        /// <summary>
        /// Update Firmware
        /// </summary>
        /// <remarks>
        /// Updates firmware to latest public release
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiEqualizersIdCommandsUpdateFirmwarePostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Configuration
        /// </summary>
        /// <remarks>
        /// Get equalizer configuration.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsEqualizerEqualizerConfigurationDTO</returns>
        EaseeCoreDTOsEqualizerEqualizerConfigurationDTO ApiEqualizersIdConfigGet(string id, int operationIndex = 0);

        /// <summary>
        /// Configuration
        /// </summary>
        /// <remarks>
        /// Get equalizer configuration.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsEqualizerEqualizerConfigurationDTO</returns>
        ApiResponse<EaseeCoreDTOsEqualizerEqualizerConfigurationDTO> ApiEqualizersIdConfigGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Equalizer Details
        /// </summary>
        /// <remarks>
        /// Get equalizer details.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsEqualizerDetailedEqualizerDTO</returns>
        EaseeCoreDTOsEqualizerDetailedEqualizerDTO ApiEqualizersIdDetailsGet(string id, int operationIndex = 0);

        /// <summary>
        /// Equalizer Details
        /// </summary>
        /// <remarks>
        /// Get equalizer details.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsEqualizerDetailedEqualizerDTO</returns>
        ApiResponse<EaseeCoreDTOsEqualizerDetailedEqualizerDTO> ApiEqualizersIdDetailsGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Equalizer
        /// </summary>
        /// <remarks>
        /// Get equalizer.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsEqualizerEqualizerDTO</returns>
        EaseeCoreDTOsEqualizerEqualizerDTO ApiEqualizersIdGet(string id, int operationIndex = 0);

        /// <summary>
        /// Equalizer
        /// </summary>
        /// <remarks>
        /// Get equalizer.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsEqualizerEqualizerDTO</returns>
        ApiResponse<EaseeCoreDTOsEqualizerEqualizerDTO> ApiEqualizersIdGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Site
        /// </summary>
        /// <remarks>
        /// Get equalizer site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsSiteSiteDTO</returns>
        EaseeCoreDTOsSiteSiteDTO ApiEqualizersIdSiteGet(string id, int operationIndex = 0);

        /// <summary>
        /// Site
        /// </summary>
        /// <remarks>
        /// Get equalizer site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsSiteSiteDTO</returns>
        ApiResponse<EaseeCoreDTOsSiteSiteDTO> ApiEqualizersIdSiteGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// State
        /// </summary>
        /// <remarks>
        /// Get current equalizer state.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsEqualizerEqualizerStateDTO</returns>
        EaseeCoreDTOsEqualizerEqualizerStateDTO ApiEqualizersIdStateGet(string id, int operationIndex = 0);

        /// <summary>
        /// State
        /// </summary>
        /// <remarks>
        /// Get current equalizer state.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsEqualizerEqualizerStateDTO</returns>
        ApiResponse<EaseeCoreDTOsEqualizerEqualizerStateDTO> ApiEqualizersIdStateGetWithHttpInfo(string id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEqualizerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Set max allocated current
        /// </summary>
        /// <remarks>
        /// Configure max allocated current for the whole charge installation  Rate limited max 1 requests per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO">Max current allocated settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPostAsync(string id, EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO? easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO = default(EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set max allocated current
        /// </summary>
        /// <remarks>
        /// Configure max allocated current for the whole charge installation  Rate limited max 1 requests per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO">Max current allocated settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPostWithHttpInfoAsync(string id, EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO? easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO = default(EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configure Meter Type
        /// </summary>
        /// <remarks>
        /// Configure the meter type for an equalizer. To change the equalizer meter type from P1/HAN to Modbus, set &lt;i&gt;deviceMode&lt;/i&gt; to 2 and set the &lt;i&gt;externalMeterType&lt;/i&gt;(1-4)  To change the equalizer back to P1/HAN set only &lt;i&gt;deviceMode&lt;/i&gt; to 1 since &lt;i&gt;externalMeterType&lt;/i&gt; is only applicable to Modbus  Rate limited at max 1 request per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMeterSettingsDTO">Meter settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiEqualizersIdCommandsConfigureMeterTypePostAsync(string id, EaseeCoreDTOsEqualizerMeterSettingsDTO? easeeCoreDTOsEqualizerMeterSettingsDTO = default(EaseeCoreDTOsEqualizerMeterSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configure Meter Type
        /// </summary>
        /// <remarks>
        /// Configure the meter type for an equalizer. To change the equalizer meter type from P1/HAN to Modbus, set &lt;i&gt;deviceMode&lt;/i&gt; to 2 and set the &lt;i&gt;externalMeterType&lt;/i&gt;(1-4)  To change the equalizer back to P1/HAN set only &lt;i&gt;deviceMode&lt;/i&gt; to 1 since &lt;i&gt;externalMeterType&lt;/i&gt; is only applicable to Modbus  Rate limited at max 1 request per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMeterSettingsDTO">Meter settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiEqualizersIdCommandsConfigureMeterTypePostWithHttpInfoAsync(string id, EaseeCoreDTOsEqualizerMeterSettingsDTO? easeeCoreDTOsEqualizerMeterSettingsDTO = default(EaseeCoreDTOsEqualizerMeterSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reboot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiEqualizersIdCommandsRebootPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reboot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiEqualizersIdCommandsRebootPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Firmware
        /// </summary>
        /// <remarks>
        /// Updates firmware to latest public release
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiEqualizersIdCommandsUpdateFirmwarePostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Firmware
        /// </summary>
        /// <remarks>
        /// Updates firmware to latest public release
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiEqualizersIdCommandsUpdateFirmwarePostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configuration
        /// </summary>
        /// <remarks>
        /// Get equalizer configuration.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsEqualizerEqualizerConfigurationDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsEqualizerEqualizerConfigurationDTO> ApiEqualizersIdConfigGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configuration
        /// </summary>
        /// <remarks>
        /// Get equalizer configuration.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsEqualizerEqualizerConfigurationDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsEqualizerEqualizerConfigurationDTO>> ApiEqualizersIdConfigGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Equalizer Details
        /// </summary>
        /// <remarks>
        /// Get equalizer details.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsEqualizerDetailedEqualizerDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsEqualizerDetailedEqualizerDTO> ApiEqualizersIdDetailsGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Equalizer Details
        /// </summary>
        /// <remarks>
        /// Get equalizer details.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsEqualizerDetailedEqualizerDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsEqualizerDetailedEqualizerDTO>> ApiEqualizersIdDetailsGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Equalizer
        /// </summary>
        /// <remarks>
        /// Get equalizer.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsEqualizerEqualizerDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsEqualizerEqualizerDTO> ApiEqualizersIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Equalizer
        /// </summary>
        /// <remarks>
        /// Get equalizer.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsEqualizerEqualizerDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsEqualizerEqualizerDTO>> ApiEqualizersIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Site
        /// </summary>
        /// <remarks>
        /// Get equalizer site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsSiteSiteDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsSiteSiteDTO> ApiEqualizersIdSiteGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Site
        /// </summary>
        /// <remarks>
        /// Get equalizer site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsSiteSiteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsSiteSiteDTO>> ApiEqualizersIdSiteGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// State
        /// </summary>
        /// <remarks>
        /// Get current equalizer state.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsEqualizerEqualizerStateDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsEqualizerEqualizerStateDTO> ApiEqualizersIdStateGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// State
        /// </summary>
        /// <remarks>
        /// Get current equalizer state.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsEqualizerEqualizerStateDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsEqualizerEqualizerStateDTO>> ApiEqualizersIdStateGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEqualizerApi : IEqualizerApiSync, IEqualizerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EqualizerApi : IEqualizerApi
    {
        private kern.services.EaseeClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EqualizerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EqualizerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EqualizerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EqualizerApi(string basePath)
        {
            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                new kern.services.EaseeClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EqualizerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EqualizerApi(kern.services.EaseeClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EqualizerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EqualizerApi(kern.services.EaseeClient.Client.ISynchronousClient client, kern.services.EaseeClient.Client.IAsynchronousClient asyncClient, kern.services.EaseeClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public kern.services.EaseeClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public kern.services.EaseeClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Set max allocated current Configure max allocated current for the whole charge installation  Rate limited max 1 requests per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO">Max current allocated settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPost(string id, EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO? easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO = default(EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO?), int operationIndex = 0)
        {
            ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPostWithHttpInfo(id, easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO);
        }

        /// <summary>
        /// Set max allocated current Configure max allocated current for the whole charge installation  Rate limited max 1 requests per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO">Max current allocated settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPostWithHttpInfo(string id, EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO? easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO = default(EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO;

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/equalizers/{id}/commands/configure_max_allocated_current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set max allocated current Configure max allocated current for the whole charge installation  Rate limited max 1 requests per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO">Max current allocated settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPostAsync(string id, EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO? easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO = default(EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPostWithHttpInfoAsync(id, easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set max allocated current Configure max allocated current for the whole charge installation  Rate limited max 1 requests per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO">Max current allocated settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPostWithHttpInfoAsync(string id, EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO? easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO = default(EaseeCoreDTOsEqualizerMaxAllocatedCurrentDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsEqualizerMaxAllocatedCurrentDTO;

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/equalizers/{id}/commands/configure_max_allocated_current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdCommandsConfigureMaxAllocatedCurrentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure Meter Type Configure the meter type for an equalizer. To change the equalizer meter type from P1/HAN to Modbus, set &lt;i&gt;deviceMode&lt;/i&gt; to 2 and set the &lt;i&gt;externalMeterType&lt;/i&gt;(1-4)  To change the equalizer back to P1/HAN set only &lt;i&gt;deviceMode&lt;/i&gt; to 1 since &lt;i&gt;externalMeterType&lt;/i&gt; is only applicable to Modbus  Rate limited at max 1 request per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMeterSettingsDTO">Meter settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiEqualizersIdCommandsConfigureMeterTypePost(string id, EaseeCoreDTOsEqualizerMeterSettingsDTO? easeeCoreDTOsEqualizerMeterSettingsDTO = default(EaseeCoreDTOsEqualizerMeterSettingsDTO?), int operationIndex = 0)
        {
            ApiEqualizersIdCommandsConfigureMeterTypePostWithHttpInfo(id, easeeCoreDTOsEqualizerMeterSettingsDTO);
        }

        /// <summary>
        /// Configure Meter Type Configure the meter type for an equalizer. To change the equalizer meter type from P1/HAN to Modbus, set &lt;i&gt;deviceMode&lt;/i&gt; to 2 and set the &lt;i&gt;externalMeterType&lt;/i&gt;(1-4)  To change the equalizer back to P1/HAN set only &lt;i&gt;deviceMode&lt;/i&gt; to 1 since &lt;i&gt;externalMeterType&lt;/i&gt; is only applicable to Modbus  Rate limited at max 1 request per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMeterSettingsDTO">Meter settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiEqualizersIdCommandsConfigureMeterTypePostWithHttpInfo(string id, EaseeCoreDTOsEqualizerMeterSettingsDTO? easeeCoreDTOsEqualizerMeterSettingsDTO = default(EaseeCoreDTOsEqualizerMeterSettingsDTO?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdCommandsConfigureMeterTypePost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsEqualizerMeterSettingsDTO;

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdCommandsConfigureMeterTypePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/equalizers/{id}/commands/configure_meter_type", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdCommandsConfigureMeterTypePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure Meter Type Configure the meter type for an equalizer. To change the equalizer meter type from P1/HAN to Modbus, set &lt;i&gt;deviceMode&lt;/i&gt; to 2 and set the &lt;i&gt;externalMeterType&lt;/i&gt;(1-4)  To change the equalizer back to P1/HAN set only &lt;i&gt;deviceMode&lt;/i&gt; to 1 since &lt;i&gt;externalMeterType&lt;/i&gt; is only applicable to Modbus  Rate limited at max 1 request per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMeterSettingsDTO">Meter settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiEqualizersIdCommandsConfigureMeterTypePostAsync(string id, EaseeCoreDTOsEqualizerMeterSettingsDTO? easeeCoreDTOsEqualizerMeterSettingsDTO = default(EaseeCoreDTOsEqualizerMeterSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiEqualizersIdCommandsConfigureMeterTypePostWithHttpInfoAsync(id, easeeCoreDTOsEqualizerMeterSettingsDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure Meter Type Configure the meter type for an equalizer. To change the equalizer meter type from P1/HAN to Modbus, set &lt;i&gt;deviceMode&lt;/i&gt; to 2 and set the &lt;i&gt;externalMeterType&lt;/i&gt;(1-4)  To change the equalizer back to P1/HAN set only &lt;i&gt;deviceMode&lt;/i&gt; to 1 since &lt;i&gt;externalMeterType&lt;/i&gt; is only applicable to Modbus  Rate limited at max 1 request per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="easeeCoreDTOsEqualizerMeterSettingsDTO">Meter settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiEqualizersIdCommandsConfigureMeterTypePostWithHttpInfoAsync(string id, EaseeCoreDTOsEqualizerMeterSettingsDTO? easeeCoreDTOsEqualizerMeterSettingsDTO = default(EaseeCoreDTOsEqualizerMeterSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdCommandsConfigureMeterTypePost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsEqualizerMeterSettingsDTO;

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdCommandsConfigureMeterTypePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/equalizers/{id}/commands/configure_meter_type", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdCommandsConfigureMeterTypePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reboot 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiEqualizersIdCommandsRebootPost(string id, int operationIndex = 0)
        {
            ApiEqualizersIdCommandsRebootPostWithHttpInfo(id);
        }

        /// <summary>
        /// Reboot 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiEqualizersIdCommandsRebootPostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdCommandsRebootPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdCommandsRebootPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/equalizers/{id}/commands/reboot", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdCommandsRebootPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reboot 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiEqualizersIdCommandsRebootPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiEqualizersIdCommandsRebootPostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reboot 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiEqualizersIdCommandsRebootPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdCommandsRebootPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdCommandsRebootPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/equalizers/{id}/commands/reboot", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdCommandsRebootPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Firmware Updates firmware to latest public release
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiEqualizersIdCommandsUpdateFirmwarePost(string id, int operationIndex = 0)
        {
            ApiEqualizersIdCommandsUpdateFirmwarePostWithHttpInfo(id);
        }

        /// <summary>
        /// Update Firmware Updates firmware to latest public release
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiEqualizersIdCommandsUpdateFirmwarePostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdCommandsUpdateFirmwarePost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdCommandsUpdateFirmwarePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/equalizers/{id}/commands/update_firmware", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdCommandsUpdateFirmwarePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Firmware Updates firmware to latest public release
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiEqualizersIdCommandsUpdateFirmwarePostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiEqualizersIdCommandsUpdateFirmwarePostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Firmware Updates firmware to latest public release
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiEqualizersIdCommandsUpdateFirmwarePostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdCommandsUpdateFirmwarePost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdCommandsUpdateFirmwarePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/equalizers/{id}/commands/update_firmware", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdCommandsUpdateFirmwarePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configuration Get equalizer configuration.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsEqualizerEqualizerConfigurationDTO</returns>
        public EaseeCoreDTOsEqualizerEqualizerConfigurationDTO ApiEqualizersIdConfigGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerConfigurationDTO> localVarResponse = ApiEqualizersIdConfigGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Configuration Get equalizer configuration.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsEqualizerEqualizerConfigurationDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerConfigurationDTO> ApiEqualizersIdConfigGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdConfigGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdConfigGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsEqualizerEqualizerConfigurationDTO>("/api/equalizers/{id}/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdConfigGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configuration Get equalizer configuration.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsEqualizerEqualizerConfigurationDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsEqualizerEqualizerConfigurationDTO> ApiEqualizersIdConfigGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerConfigurationDTO> localVarResponse = await ApiEqualizersIdConfigGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Configuration Get equalizer configuration.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsEqualizerEqualizerConfigurationDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerConfigurationDTO>> ApiEqualizersIdConfigGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdConfigGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdConfigGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsEqualizerEqualizerConfigurationDTO>("/api/equalizers/{id}/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdConfigGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equalizer Details Get equalizer details.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsEqualizerDetailedEqualizerDTO</returns>
        public EaseeCoreDTOsEqualizerDetailedEqualizerDTO ApiEqualizersIdDetailsGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerDetailedEqualizerDTO> localVarResponse = ApiEqualizersIdDetailsGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equalizer Details Get equalizer details.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsEqualizerDetailedEqualizerDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerDetailedEqualizerDTO> ApiEqualizersIdDetailsGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdDetailsGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsEqualizerDetailedEqualizerDTO>("/api/equalizers/{id}/details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equalizer Details Get equalizer details.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsEqualizerDetailedEqualizerDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsEqualizerDetailedEqualizerDTO> ApiEqualizersIdDetailsGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerDetailedEqualizerDTO> localVarResponse = await ApiEqualizersIdDetailsGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equalizer Details Get equalizer details.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsEqualizerDetailedEqualizerDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerDetailedEqualizerDTO>> ApiEqualizersIdDetailsGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdDetailsGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsEqualizerDetailedEqualizerDTO>("/api/equalizers/{id}/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equalizer Get equalizer.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsEqualizerEqualizerDTO</returns>
        public EaseeCoreDTOsEqualizerEqualizerDTO ApiEqualizersIdGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerDTO> localVarResponse = ApiEqualizersIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equalizer Get equalizer.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsEqualizerEqualizerDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerDTO> ApiEqualizersIdGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsEqualizerEqualizerDTO>("/api/equalizers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equalizer Get equalizer.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsEqualizerEqualizerDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsEqualizerEqualizerDTO> ApiEqualizersIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerDTO> localVarResponse = await ApiEqualizersIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equalizer Get equalizer.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsEqualizerEqualizerDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerDTO>> ApiEqualizersIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsEqualizerEqualizerDTO>("/api/equalizers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Site Get equalizer site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsSiteSiteDTO</returns>
        public EaseeCoreDTOsSiteSiteDTO ApiEqualizersIdSiteGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteSiteDTO> localVarResponse = ApiEqualizersIdSiteGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Site Get equalizer site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsSiteSiteDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteSiteDTO> ApiEqualizersIdSiteGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdSiteGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdSiteGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsSiteSiteDTO>("/api/equalizers/{id}/site", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdSiteGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Site Get equalizer site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsSiteSiteDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsSiteSiteDTO> ApiEqualizersIdSiteGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteSiteDTO> localVarResponse = await ApiEqualizersIdSiteGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Site Get equalizer site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsSiteSiteDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsSiteSiteDTO>> ApiEqualizersIdSiteGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdSiteGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdSiteGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsSiteSiteDTO>("/api/equalizers/{id}/site", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdSiteGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// State Get current equalizer state.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsEqualizerEqualizerStateDTO</returns>
        public EaseeCoreDTOsEqualizerEqualizerStateDTO ApiEqualizersIdStateGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerStateDTO> localVarResponse = ApiEqualizersIdStateGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// State Get current equalizer state.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsEqualizerEqualizerStateDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerStateDTO> ApiEqualizersIdStateGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdStateGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdStateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsEqualizerEqualizerStateDTO>("/api/equalizers/{id}/state", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdStateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// State Get current equalizer state.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsEqualizerEqualizerStateDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsEqualizerEqualizerStateDTO> ApiEqualizersIdStateGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerStateDTO> localVarResponse = await ApiEqualizersIdStateGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// State Get current equalizer state.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Equalizer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsEqualizerEqualizerStateDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsEqualizerEqualizerStateDTO>> ApiEqualizersIdStateGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling EqualizerApi->ApiEqualizersIdStateGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EqualizerApi.ApiEqualizersIdStateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsEqualizerEqualizerStateDTO>("/api/equalizers/{id}/state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiEqualizersIdStateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
