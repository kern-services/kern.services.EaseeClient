/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using kern.services.EaseeClient.Client;
using kern.services.EaseeClient.Model;

namespace kern.services.EaseeClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourcesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Active Countries
        /// </summary>
        /// <remarks>
        /// Get active countries.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        List<EaseeCoreDTOsSiteCountryDTO> ApiResourcesCountriesActiveGet(int operationIndex = 0);

        /// <summary>
        /// Active Countries
        /// </summary>
        /// <remarks>
        /// Get active countries.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>> ApiResourcesCountriesActiveGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Countries
        /// </summary>
        /// <remarks>
        /// Get countries.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        List<EaseeCoreDTOsSiteCountryDTO> ApiResourcesCountriesGet(int operationIndex = 0);

        /// <summary>
        /// Countries
        /// </summary>
        /// <remarks>
        /// Get countries.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>> ApiResourcesCountriesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Currencies
        /// </summary>
        /// <remarks>
        /// Get currencies.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreModelsSiteCurrency&gt;</returns>
        List<EaseeCoreModelsSiteCurrency> ApiResourcesCurrenciesGet(int operationIndex = 0);

        /// <summary>
        /// Currencies
        /// </summary>
        /// <remarks>
        /// Get currencies.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreModelsSiteCurrency&gt;</returns>
        ApiResponse<List<EaseeCoreModelsSiteCurrency>> ApiResourcesCurrenciesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Observations Properties
        /// </summary>
        /// <remarks>
        /// Gets all Observation Properties (ID and name).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerObservationPropertyDTO&gt;</returns>
        List<EaseeCoreDTOsChargerObservationPropertyDTO> ApiResourcesObservationPropertiesGet(int operationIndex = 0);

        /// <summary>
        /// Observations Properties
        /// </summary>
        /// <remarks>
        /// Gets all Observation Properties (ID and name).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerObservationPropertyDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsChargerObservationPropertyDTO>> ApiResourcesObservationPropertiesGetWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourcesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Active Countries
        /// </summary>
        /// <remarks>
        /// Get active countries.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSiteCountryDTO>> ApiResourcesCountriesActiveGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Active Countries
        /// </summary>
        /// <remarks>
        /// Get active countries.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSiteCountryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>>> ApiResourcesCountriesActiveGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Countries
        /// </summary>
        /// <remarks>
        /// Get countries.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSiteCountryDTO>> ApiResourcesCountriesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Countries
        /// </summary>
        /// <remarks>
        /// Get countries.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSiteCountryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>>> ApiResourcesCountriesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Currencies
        /// </summary>
        /// <remarks>
        /// Get currencies.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreModelsSiteCurrency&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreModelsSiteCurrency>> ApiResourcesCurrenciesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Currencies
        /// </summary>
        /// <remarks>
        /// Get currencies.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreModelsSiteCurrency&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreModelsSiteCurrency>>> ApiResourcesCurrenciesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Observations Properties
        /// </summary>
        /// <remarks>
        /// Gets all Observation Properties (ID and name).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerObservationPropertyDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerObservationPropertyDTO>> ApiResourcesObservationPropertiesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Observations Properties
        /// </summary>
        /// <remarks>
        /// Gets all Observation Properties (ID and name).
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerObservationPropertyDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsChargerObservationPropertyDTO>>> ApiResourcesObservationPropertiesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourcesApi : IResourcesApiSync, IResourcesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResourcesApi : IResourcesApi
    {
        private kern.services.EaseeClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResourcesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResourcesApi(string basePath)
        {
            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                new kern.services.EaseeClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ResourcesApi(kern.services.EaseeClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ResourcesApi(kern.services.EaseeClient.Client.ISynchronousClient client, kern.services.EaseeClient.Client.IAsynchronousClient asyncClient, kern.services.EaseeClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public kern.services.EaseeClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public kern.services.EaseeClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Active Countries Get active countries.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        public List<EaseeCoreDTOsSiteCountryDTO> ApiResourcesCountriesActiveGet(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>> localVarResponse = ApiResourcesCountriesActiveGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Active Countries Get active countries.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>> ApiResourcesCountriesActiveGetWithHttpInfo(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ResourcesApi.ApiResourcesCountriesActiveGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSiteCountryDTO>>("/api/resources/countries/active", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourcesCountriesActiveGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Active Countries Get active countries.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSiteCountryDTO>> ApiResourcesCountriesActiveGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>> localVarResponse = await ApiResourcesCountriesActiveGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Active Countries Get active countries.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSiteCountryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>>> ApiResourcesCountriesActiveGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ResourcesApi.ApiResourcesCountriesActiveGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSiteCountryDTO>>("/api/resources/countries/active", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourcesCountriesActiveGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Countries Get countries.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        public List<EaseeCoreDTOsSiteCountryDTO> ApiResourcesCountriesGet(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>> localVarResponse = ApiResourcesCountriesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Countries Get countries.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>> ApiResourcesCountriesGetWithHttpInfo(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ResourcesApi.ApiResourcesCountriesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSiteCountryDTO>>("/api/resources/countries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourcesCountriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Countries Get countries.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSiteCountryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSiteCountryDTO>> ApiResourcesCountriesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>> localVarResponse = await ApiResourcesCountriesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Countries Get countries.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSiteCountryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSiteCountryDTO>>> ApiResourcesCountriesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ResourcesApi.ApiResourcesCountriesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSiteCountryDTO>>("/api/resources/countries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourcesCountriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Currencies Get currencies.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreModelsSiteCurrency&gt;</returns>
        public List<EaseeCoreModelsSiteCurrency> ApiResourcesCurrenciesGet(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreModelsSiteCurrency>> localVarResponse = ApiResourcesCurrenciesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Currencies Get currencies.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreModelsSiteCurrency&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreModelsSiteCurrency>> ApiResourcesCurrenciesGetWithHttpInfo(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ResourcesApi.ApiResourcesCurrenciesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreModelsSiteCurrency>>("/api/resources/currencies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourcesCurrenciesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Currencies Get currencies.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreModelsSiteCurrency&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreModelsSiteCurrency>> ApiResourcesCurrenciesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreModelsSiteCurrency>> localVarResponse = await ApiResourcesCurrenciesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Currencies Get currencies.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreModelsSiteCurrency&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreModelsSiteCurrency>>> ApiResourcesCurrenciesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ResourcesApi.ApiResourcesCurrenciesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreModelsSiteCurrency>>("/api/resources/currencies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourcesCurrenciesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Observations Properties Gets all Observation Properties (ID and name).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerObservationPropertyDTO&gt;</returns>
        public List<EaseeCoreDTOsChargerObservationPropertyDTO> ApiResourcesObservationPropertiesGet(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerObservationPropertyDTO>> localVarResponse = ApiResourcesObservationPropertiesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Observations Properties Gets all Observation Properties (ID and name).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerObservationPropertyDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerObservationPropertyDTO>> ApiResourcesObservationPropertiesGetWithHttpInfo(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ResourcesApi.ApiResourcesObservationPropertiesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsChargerObservationPropertyDTO>>("/api/resources/observation_properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourcesObservationPropertiesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Observations Properties Gets all Observation Properties (ID and name).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerObservationPropertyDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerObservationPropertyDTO>> ApiResourcesObservationPropertiesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerObservationPropertyDTO>> localVarResponse = await ApiResourcesObservationPropertiesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Observations Properties Gets all Observation Properties (ID and name).
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerObservationPropertyDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerObservationPropertyDTO>>> ApiResourcesObservationPropertiesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ResourcesApi.ApiResourcesObservationPropertiesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsChargerObservationPropertyDTO>>("/api/resources/observation_properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourcesObservationPropertiesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
