/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using kern.services.EaseeClient.Client;
using kern.services.EaseeClient.Model;

namespace kern.services.EaseeClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILifetimeEnergyReportingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse</returns>
        EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse ApiChargersLifetimeEnergyIdAllGet(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse</returns>
        ApiResponse<EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse> ApiChargersLifetimeEnergyIdAllGetWithHttpInfo(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersLifetimeEnergyIdConfigurePut(string id, EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest? easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest = default(EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersLifetimeEnergyIdConfigurePutWithHttpInfo(string id, EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest? easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest = default(EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy> ApiChargersLifetimeEnergyIdDailyGet(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdDailyGetWithHttpInfo(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy> ApiChargersLifetimeEnergyIdHourlyGet(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdHourlyGetWithHttpInfo(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy> ApiChargersLifetimeEnergyIdMonthlyGet(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdMonthlyGetWithHttpInfo(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy> ApiChargersLifetimeEnergyIdYearlyGet(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdYearlyGetWithHttpInfo(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILifetimeEnergyReportingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse</returns>
        System.Threading.Tasks.Task<EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse> ApiChargersLifetimeEnergyIdAllGetAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse>> ApiChargersLifetimeEnergyIdAllGetWithHttpInfoAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersLifetimeEnergyIdConfigurePutAsync(string id, EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest? easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest = default(EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersLifetimeEnergyIdConfigurePutWithHttpInfoAsync(string id, EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest? easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest = default(EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdDailyGetAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>> ApiChargersLifetimeEnergyIdDailyGetWithHttpInfoAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdHourlyGetAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>> ApiChargersLifetimeEnergyIdHourlyGetWithHttpInfoAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdMonthlyGetAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>> ApiChargersLifetimeEnergyIdMonthlyGetWithHttpInfoAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdYearlyGetAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>> ApiChargersLifetimeEnergyIdYearlyGetWithHttpInfoAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILifetimeEnergyReportingApi : ILifetimeEnergyReportingApiSync, ILifetimeEnergyReportingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LifetimeEnergyReportingApi : ILifetimeEnergyReportingApi
    {
        private kern.services.EaseeClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LifetimeEnergyReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LifetimeEnergyReportingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LifetimeEnergyReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LifetimeEnergyReportingApi(string basePath)
        {
            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                new kern.services.EaseeClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LifetimeEnergyReportingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LifetimeEnergyReportingApi(kern.services.EaseeClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LifetimeEnergyReportingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LifetimeEnergyReportingApi(kern.services.EaseeClient.Client.ISynchronousClient client, kern.services.EaseeClient.Client.IAsynchronousClient asyncClient, kern.services.EaseeClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public kern.services.EaseeClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public kern.services.EaseeClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse</returns>
        public EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse ApiChargersLifetimeEnergyIdAllGet(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse> localVarResponse = ApiChargersLifetimeEnergyIdAllGetWithHttpInfo(id, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse> ApiChargersLifetimeEnergyIdAllGetWithHttpInfo(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdAllGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdAllGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse>("/api/chargers/lifetime-energy/{id}/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdAllGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse</returns>
        public async System.Threading.Tasks.Task<EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse> ApiChargersLifetimeEnergyIdAllGetAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse> localVarResponse = await ApiChargersLifetimeEnergyIdAllGetWithHttpInfoAsync(id, from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse>> ApiChargersLifetimeEnergyIdAllGetWithHttpInfoAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdAllGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdAllGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse>("/api/chargers/lifetime-energy/{id}/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdAllGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersLifetimeEnergyIdConfigurePut(string id, EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest? easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest = default(EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest?), int operationIndex = 0)
        {
            ApiChargersLifetimeEnergyIdConfigurePutWithHttpInfo(id, easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersLifetimeEnergyIdConfigurePutWithHttpInfo(string id, EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest? easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest = default(EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdConfigurePut");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest;

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdConfigurePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/chargers/lifetime-energy/{id}/configure", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdConfigurePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersLifetimeEnergyIdConfigurePutAsync(string id, EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest? easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest = default(EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersLifetimeEnergyIdConfigurePutWithHttpInfoAsync(id, easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersLifetimeEnergyIdConfigurePutWithHttpInfoAsync(string id, EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest? easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest = default(EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdConfigurePut");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest;

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdConfigurePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/chargers/lifetime-energy/{id}/configure", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdConfigurePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy> ApiChargersLifetimeEnergyIdDailyGet(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> localVarResponse = ApiChargersLifetimeEnergyIdDailyGetWithHttpInfo(id, from, to, tz);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdDailyGetWithHttpInfo(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdDailyGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdDailyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>("/api/chargers/lifetime-energy/{id}/daily", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdDailyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdDailyGetAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> localVarResponse = await ApiChargersLifetimeEnergyIdDailyGetWithHttpInfoAsync(id, from, to, tz, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>> ApiChargersLifetimeEnergyIdDailyGetWithHttpInfoAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdDailyGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdDailyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>("/api/chargers/lifetime-energy/{id}/daily", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdDailyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy> ApiChargersLifetimeEnergyIdHourlyGet(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> localVarResponse = ApiChargersLifetimeEnergyIdHourlyGetWithHttpInfo(id, from, to, tz);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdHourlyGetWithHttpInfo(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdHourlyGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdHourlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>("/api/chargers/lifetime-energy/{id}/hourly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdHourlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdHourlyGetAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> localVarResponse = await ApiChargersLifetimeEnergyIdHourlyGetWithHttpInfoAsync(id, from, to, tz, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>> ApiChargersLifetimeEnergyIdHourlyGetWithHttpInfoAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdHourlyGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdHourlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>("/api/chargers/lifetime-energy/{id}/hourly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdHourlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy> ApiChargersLifetimeEnergyIdMonthlyGet(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> localVarResponse = ApiChargersLifetimeEnergyIdMonthlyGetWithHttpInfo(id, from, to, tz);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdMonthlyGetWithHttpInfo(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdMonthlyGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>("/api/chargers/lifetime-energy/{id}/monthly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdMonthlyGetAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> localVarResponse = await ApiChargersLifetimeEnergyIdMonthlyGetWithHttpInfoAsync(id, from, to, tz, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>> ApiChargersLifetimeEnergyIdMonthlyGetWithHttpInfoAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdMonthlyGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdMonthlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>("/api/chargers/lifetime-energy/{id}/monthly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdMonthlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy> ApiChargersLifetimeEnergyIdYearlyGet(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> localVarResponse = ApiChargersLifetimeEnergyIdYearlyGetWithHttpInfo(id, from, to, tz);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdYearlyGetWithHttpInfo(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdYearlyGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>("/api/chargers/lifetime-energy/{id}/yearly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> ApiChargersLifetimeEnergyIdYearlyGetAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>> localVarResponse = await ApiChargersLifetimeEnergyIdYearlyGetWithHttpInfoAsync(id, from, to, tz, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="tz"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>> ApiChargersLifetimeEnergyIdYearlyGetWithHttpInfoAsync(string id, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), string? tz = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling LifetimeEnergyReportingApi->ApiChargersLifetimeEnergyIdYearlyGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "LifetimeEnergyReportingApi.ApiChargersLifetimeEnergyIdYearlyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeServicesLifetimeEnergyReportingAggregatedLifetimeEnergy>>("/api/chargers/lifetime-energy/{id}/yearly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersLifetimeEnergyIdYearlyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
