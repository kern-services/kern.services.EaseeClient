/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using kern.services.EaseeClient.Client;
using kern.services.EaseeClient.Model;

namespace kern.services.EaseeClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept Invitation
        /// </summary>
        /// <remarks>
        /// Accept user invitation to access a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Charger user permission invitation acceptance token (optional)</param>
        /// <param name="invitationId">Charger user permission invitation acceptance invitation_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersAcceptPost(string? email = default(string?), string? invitationId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Accept Invitation
        /// </summary>
        /// <remarks>
        /// Accept user invitation to access a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Charger user permission invitation acceptance token (optional)</param>
        /// <param name="invitationId">Charger user permission invitation acceptance invitation_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersAcceptPostWithHttpInfo(string? email = default(string?), string? invitationId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Get chargers.&lt;br /&gt;If role is Partner, all partner chargers will be returned.&lt;br /&gt;If role is User, the users  chargers will be returned.&lt;br /&gt;Rate limited: Rate limited at max 2 requests per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerBasicChargerDTO&gt;</returns>
        List<EaseeCoreDTOsChargerBasicChargerDTO> ApiChargersGet(int operationIndex = 0);

        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Get chargers.&lt;br /&gt;If role is Partner, all partner chargers will be returned.&lt;br /&gt;If role is User, the users  chargers will be returned.&lt;br /&gt;Rate limited: Rate limited at max 2 requests per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerBasicChargerDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsChargerBasicChargerDTO>> ApiChargersGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Remove Charger Access
        /// </summary>
        /// <remarks>
        /// Delete access level from the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdAccessDelete(string id, int operationIndex = 0);

        /// <summary>
        /// Remove Charger Access
        /// </summary>
        /// <remarks>
        /// Delete access level from the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdAccessDeleteWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Set Charger Access
        /// </summary>
        /// <remarks>
        /// Set access level to the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdAccessPut(string id, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// Set Charger Access
        /// </summary>
        /// <remarks>
        /// Set access level to the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdAccessPutWithHttpInfo(string id, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// Delete Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Delete basic charge plan of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdBasicChargePlanDelete(string id, int operationIndex = 0);

        /// <summary>
        /// Delete Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Delete basic charge plan of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdBasicChargePlanDeleteWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Get basic charge plan of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerChargePlanDTO&gt;</returns>
        List<EaseeCoreDTOsChargerChargePlanDTO> ApiChargersIdBasicChargePlanGet(string id, int operationIndex = 0);

        /// <summary>
        /// Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Get basic charge plan of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerChargePlanDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsChargerChargePlanDTO>> ApiChargersIdBasicChargePlanGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Set Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Set basic charge plan of charger. IsEnabled attribute allow to IsEnabled the charge plan
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargePlanDTO">Charge plan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdBasicChargePlanPost(string id, EaseeCoreDTOsChargerChargePlanDTO? easeeCoreDTOsChargerChargePlanDTO = default(EaseeCoreDTOsChargerChargePlanDTO?), int operationIndex = 0);

        /// <summary>
        /// Set Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Set basic charge plan of charger. IsEnabled attribute allow to IsEnabled the charge plan
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargePlanDTO">Charge plan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdBasicChargePlanPostWithHttpInfo(string id, EaseeCoreDTOsChargerChargePlanDTO? easeeCoreDTOsChargerChargePlanDTO = default(EaseeCoreDTOsChargerChargePlanDTO?), int operationIndex = 0);
        /// <summary>
        /// Turn on or off charge schedule features.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">charger id</param>
        /// <param name="easeeCoreDTOsScheduleScheduleFeatureRequestDto">charge schedule feature request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdChargeScheduleFeaturesPost(string id, EaseeCoreDTOsScheduleScheduleFeatureRequestDto? easeeCoreDTOsScheduleScheduleFeatureRequestDto = default(EaseeCoreDTOsScheduleScheduleFeatureRequestDto?), int operationIndex = 0);

        /// <summary>
        /// Turn on or off charge schedule features.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">charger id</param>
        /// <param name="easeeCoreDTOsScheduleScheduleFeatureRequestDto">charge schedule feature request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdChargeScheduleFeaturesPostWithHttpInfo(string id, EaseeCoreDTOsScheduleScheduleFeatureRequestDto? easeeCoreDTOsScheduleScheduleFeatureRequestDto = default(EaseeCoreDTOsScheduleScheduleFeatureRequestDto?), int operationIndex = 0);
        /// <summary>
        /// Set Cable Lock State
        /// </summary>
        /// <remarks>
        /// If state &#x3D; true, cable always locked in charger. state &#x3D; false, cable is unlocked when car is disconnected
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerLockStateDTO">Cable lock state (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsLockStatePost(string id, EaseeCoreDTOsChargerLockStateDTO? easeeCoreDTOsChargerLockStateDTO = default(EaseeCoreDTOsChargerLockStateDTO?), int operationIndex = 0);

        /// <summary>
        /// Set Cable Lock State
        /// </summary>
        /// <remarks>
        /// If state &#x3D; true, cable always locked in charger. state &#x3D; false, cable is unlocked when car is disconnected
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerLockStateDTO">Cable lock state (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsLockStatePostWithHttpInfo(string id, EaseeCoreDTOsChargerLockStateDTO? easeeCoreDTOsChargerLockStateDTO = default(EaseeCoreDTOsChargerLockStateDTO?), int operationIndex = 0);
        /// <summary>
        /// Override Charging Schedule
        /// </summary>
        /// <remarks>
        /// Allows current session to charge immediately provided that schedule is the only mechanism stopping charge  currently.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsOverrideSchedulePost(string id, int operationIndex = 0);

        /// <summary>
        /// Override Charging Schedule
        /// </summary>
        /// <remarks>
        /// Allows current session to charge immediately provided that schedule is the only mechanism stopping charge  currently.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsOverrideSchedulePostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Pause Charging
        /// </summary>
        /// <remarks>
        /// Pauses current charging session but keeps authorization. Limits dynamic charger current to 0. &lt;br /&gt;Reset on  on new car connection
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsPauseChargingPost(string id, int operationIndex = 0);

        /// <summary>
        /// Pause Charging
        /// </summary>
        /// <remarks>
        /// Pauses current charging session but keeps authorization. Limits dynamic charger current to 0. &lt;br /&gt;Reset on  on new car connection
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsPauseChargingPostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Polls for a new Charger Op Mode
        /// </summary>
        /// <remarks>
        /// Rate limited to once every 3 minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsPollChargeropmodePost(string id, int operationIndex = 0);

        /// <summary>
        /// Polls for a new Charger Op Mode
        /// </summary>
        /// <remarks>
        /// Rate limited to once every 3 minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsPollChargeropmodePostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Polls for a new Energy Reading
        /// </summary>
        /// <remarks>
        /// Rate limited to once every 3 minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsPollLifetimeenergyPost(string id, int operationIndex = 0);

        /// <summary>
        /// Polls for a new Energy Reading
        /// </summary>
        /// <remarks>
        /// Rate limited to once every 3 minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsPollLifetimeenergyPostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Reboot
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsRebootPost(string id, int operationIndex = 0);

        /// <summary>
        /// Reboot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsRebootPostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Resume Charging
        /// </summary>
        /// <remarks>
        /// Resumes current charging session. Resets output current limit set in dynamic charger current
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsResumeChargingPost(string id, int operationIndex = 0);

        /// <summary>
        /// Resume Charging
        /// </summary>
        /// <remarks>
        /// Resumes current charging session. Resets output current limit set in dynamic charger current
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsResumeChargingPostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Scan Wi-Fi
        /// </summary>
        /// <remarks>
        /// Sends a Wi-Fi scan command to the charger. Result available in SignalR command responses and observations.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerScanWifiSettingDTO">Limits the time spent by firmware to scan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsScanWifiPost(string id, EaseeCoreDTOsChargerScanWifiSettingDTO? easeeCoreDTOsChargerScanWifiSettingDTO = default(EaseeCoreDTOsChargerScanWifiSettingDTO?), int operationIndex = 0);

        /// <summary>
        /// Scan Wi-Fi
        /// </summary>
        /// <remarks>
        /// Sends a Wi-Fi scan command to the charger. Result available in SignalR command responses and observations.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerScanWifiSettingDTO">Limits the time spent by firmware to scan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsScanWifiPostWithHttpInfo(string id, EaseeCoreDTOsChargerScanWifiSettingDTO? easeeCoreDTOsChargerScanWifiSettingDTO = default(EaseeCoreDTOsChargerScanWifiSettingDTO?), int operationIndex = 0);
        /// <summary>
        /// Pair RFID Tag
        /// </summary>
        /// <remarks>
        /// Pair new RFID tag with charger. Listen to the \&quot;CommandResponse\&quot; stream and observation &#39;69:PairedUserIDToken&#39;  to get the new token as read by the charger
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerPairRFIDSettingsDTO">Pair RFID settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsSetRfidPairingModeAsyncPost(string id, EaseeCoreDTOsChargerPairRFIDSettingsDTO? easeeCoreDTOsChargerPairRFIDSettingsDTO = default(EaseeCoreDTOsChargerPairRFIDSettingsDTO?), int operationIndex = 0);

        /// <summary>
        /// Pair RFID Tag
        /// </summary>
        /// <remarks>
        /// Pair new RFID tag with charger. Listen to the \&quot;CommandResponse\&quot; stream and observation &#39;69:PairedUserIDToken&#39;  to get the new token as read by the charger
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerPairRFIDSettingsDTO">Pair RFID settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsSetRfidPairingModeAsyncPostWithHttpInfo(string id, EaseeCoreDTOsChargerPairRFIDSettingsDTO? easeeCoreDTOsChargerPairRFIDSettingsDTO = default(EaseeCoreDTOsChargerPairRFIDSettingsDTO?), int operationIndex = 0);
        /// <summary>
        /// Set Wi-Fi Configuration
        /// </summary>
        /// <remarks>
        /// Sends Wi-Fi configuration to the charger. The charger may be unavailable up to 1 hour if incorrect values are  set in firmware
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerWifiConfigDTO">SSID and Password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsSetWifiConfigPost(string id, EaseeCoreDTOsChargerWifiConfigDTO? easeeCoreDTOsChargerWifiConfigDTO = default(EaseeCoreDTOsChargerWifiConfigDTO?), int operationIndex = 0);

        /// <summary>
        /// Set Wi-Fi Configuration
        /// </summary>
        /// <remarks>
        /// Sends Wi-Fi configuration to the charger. The charger may be unavailable up to 1 hour if incorrect values are  set in firmware
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerWifiConfigDTO">SSID and Password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsSetWifiConfigPostWithHttpInfo(string id, EaseeCoreDTOsChargerWifiConfigDTO? easeeCoreDTOsChargerWifiConfigDTO = default(EaseeCoreDTOsChargerWifiConfigDTO?), int operationIndex = 0);
        /// <summary>
        /// Enable Smart Charging
        /// </summary>
        /// <remarks>
        /// Disable by using the &#39;settings&#39; endpoint
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsSmartChargingPost(string id, int operationIndex = 0);

        /// <summary>
        /// Enable Smart Charging
        /// </summary>
        /// <remarks>
        /// Disable by using the &#39;settings&#39; endpoint
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsSmartChargingPostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Start Charging
        /// </summary>
        /// <remarks>
        /// Allows a charger with &#39;authorizationRequired&#39; &#x3D; true to deliver power. Otherwise it will have no effect
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsStartChargingPost(string id, int operationIndex = 0);

        /// <summary>
        /// Start Charging
        /// </summary>
        /// <remarks>
        /// Allows a charger with &#39;authorizationRequired&#39; &#x3D; true to deliver power. Otherwise it will have no effect
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsStartChargingPostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Stop Charging
        /// </summary>
        /// <remarks>
        /// Stops a charger with an active authorization from delivering power and revokes authorization. Will have no  effect if &#39;authorizationRequired&#39; is false or charger is not authorized
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsStopChargingPost(string id, int operationIndex = 0);

        /// <summary>
        /// Stop Charging
        /// </summary>
        /// <remarks>
        /// Stops a charger with an active authorization from delivering power and revokes authorization. Will have no  effect if &#39;authorizationRequired&#39; is false or charger is not authorized
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsStopChargingPostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Toggle Charging
        /// </summary>
        /// <remarks>
        /// Send charging command (Start/Stop or Pause/Resume). For chargers requiring online authorization, start/stop  commands are used. &lt;br /&gt;For chargers without online authorization,  pause/resume commands are used.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsToggleChargingPost(string id, int operationIndex = 0);

        /// <summary>
        /// Toggle Charging
        /// </summary>
        /// <remarks>
        /// Send charging command (Start/Stop or Pause/Resume). For chargers requiring online authorization, start/stop  commands are used. &lt;br /&gt;For chargers without online authorization,  pause/resume commands are used.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsToggleChargingPostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Update Firmware
        /// </summary>
        /// <remarks>
        /// Updates firmware to latest public release
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdCommandsUpdateFirmwarePost(string id, int operationIndex = 0);

        /// <summary>
        /// Update Firmware
        /// </summary>
        /// <remarks>
        /// Updates firmware to latest public release
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdCommandsUpdateFirmwarePostWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Comments
        /// </summary>
        /// <remarks>
        /// Get user comments for a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerCommentDTO&gt;</returns>
        List<EaseeCoreDTOsChargerCommentDTO> ApiChargersIdCommentsGet(string id, int operationIndex = 0);

        /// <summary>
        /// Comments
        /// </summary>
        /// <remarks>
        /// Get user comments for a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerCommentDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsChargerCommentDTO>> ApiChargersIdCommentsGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <remarks>
        /// Get charger configuration.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerChargerConfigurationDTO</returns>
        EaseeCoreDTOsChargerChargerConfigurationDTO ApiChargersIdConfigGet(string id, int operationIndex = 0);

        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <remarks>
        /// Get charger configuration.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerChargerConfigurationDTO</returns>
        ApiResponse<EaseeCoreDTOsChargerChargerConfigurationDTO> ApiChargersIdConfigGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Charger Details
        /// </summary>
        /// <remarks>
        /// Get charger details.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerChargerInfoDTO</returns>
        EaseeCoreDTOsChargerChargerInfoDTO ApiChargersIdDetailsGet(string id, int operationIndex = 0);

        /// <summary>
        /// Charger Details
        /// </summary>
        /// <remarks>
        /// Get charger details.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerChargerInfoDTO</returns>
        ApiResponse<EaseeCoreDTOsChargerChargerInfoDTO> ApiChargersIdDetailsGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Errors
        /// </summary>
        /// <remarks>
        /// Get errors for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        List<MasterloopCoreTypesObservationsObservation> ApiChargersIdErrorsFromToGet(string id, DateTime from, DateTime to, int operationIndex = 0);

        /// <summary>
        /// Errors
        /// </summary>
        /// <remarks>
        /// Get errors for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        ApiResponse<List<MasterloopCoreTypesObservationsObservation>> ApiChargersIdErrorsFromToGetWithHttpInfo(string id, DateTime from, DateTime to, int operationIndex = 0);
        /// <summary>
        /// Charger
        /// </summary>
        /// <remarks>
        /// Get a specified charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerChargerDTO</returns>
        EaseeCoreDTOsChargerChargerDTO ApiChargersIdGet(string id, int operationIndex = 0);

        /// <summary>
        /// Charger
        /// </summary>
        /// <remarks>
        /// Get a specified charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerChargerDTO</returns>
        ApiResponse<EaseeCoreDTOsChargerChargerDTO> ApiChargersIdGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Log Events
        /// </summary>
        /// <remarks>
        /// Get log events in a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="logType">Log type</param>
        /// <param name="from">From timestamp (ISO8601 string)</param>
        /// <param name="to">To timestamp (ISO8601 string)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerChargerLogEventDTO&gt;</returns>
        List<EaseeCoreDTOsChargerChargerLogEventDTO> ApiChargersIdLogEventsLogTypeFromToGet(string id, EaseeCoreEnumsLogType logType, DateTime from, DateTime to, int operationIndex = 0);

        /// <summary>
        /// Log Events
        /// </summary>
        /// <remarks>
        /// Get log events in a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="logType">Log type</param>
        /// <param name="from">From timestamp (ISO8601 string)</param>
        /// <param name="to">To timestamp (ISO8601 string)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerChargerLogEventDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsChargerChargerLogEventDTO>> ApiChargersIdLogEventsLogTypeFromToGetWithHttpInfo(string id, EaseeCoreEnumsLogType logType, DateTime from, DateTime to, int operationIndex = 0);
        /// <summary>
        /// Observations
        /// </summary>
        /// <remarks>
        /// Get observations for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="observationId">Observation ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        List<MasterloopCoreTypesObservationsObservation> ApiChargersIdObservationsObservationIdFromToGet(string id, int observationId, DateTime from, DateTime to, int operationIndex = 0);

        /// <summary>
        /// Observations
        /// </summary>
        /// <remarks>
        /// Get observations for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="observationId">Observation ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        ApiResponse<List<MasterloopCoreTypesObservationsObservation>> ApiChargersIdObservationsObservationIdFromToGetWithHttpInfo(string id, int observationId, DateTime from, DateTime to, int operationIndex = 0);
        /// <summary>
        /// Pair
        /// </summary>
        /// <remarks>
        /// Pair a charger to an account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdPairPost(string id, string? pinCode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Pair
        /// </summary>
        /// <remarks>
        /// Pair a charger to an account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdPairPostWithHttpInfo(string id, string? pinCode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Partner
        /// </summary>
        /// <remarks>
        /// Get partner of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeAccessControlModelsPartnerDetailedDTO</returns>
        EaseeAccessControlModelsPartnerDetailedDTO ApiChargersIdPartnersGet(string id, int operationIndex = 0);

        /// <summary>
        /// Partner
        /// </summary>
        /// <remarks>
        /// Get partner of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeAccessControlModelsPartnerDetailedDTO</returns>
        ApiResponse<EaseeAccessControlModelsPartnerDetailedDTO> ApiChargersIdPartnersGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Remove Partner
        /// </summary>
        /// <remarks>
        /// Remove partner from a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="partnerId">Partner ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdPartnersPartnerIdDelete(string id, int partnerId, int operationIndex = 0);

        /// <summary>
        /// Remove Partner
        /// </summary>
        /// <remarks>
        /// Remove partner from a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="partnerId">Partner ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdPartnersPartnerIdDeleteWithHttpInfo(string id, int partnerId, int operationIndex = 0);
        /// <summary>
        /// Set Partner
        /// </summary>
        /// <remarks>
        /// Set partner of a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsPairChargerPartnerDTO">Partner ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdPartnersPost(string id, EaseeAccessControlModelsPairChargerPartnerDTO? easeeAccessControlModelsPairChargerPartnerDTO = default(EaseeAccessControlModelsPairChargerPartnerDTO?), int operationIndex = 0);

        /// <summary>
        /// Set Partner
        /// </summary>
        /// <remarks>
        /// Set partner of a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsPairChargerPartnerDTO">Partner ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdPartnersPostWithHttpInfo(string id, EaseeAccessControlModelsPairChargerPartnerDTO? easeeAccessControlModelsPairChargerPartnerDTO = default(EaseeAccessControlModelsPairChargerPartnerDTO?), int operationIndex = 0);
        /// <summary>
        /// Remove Charger Access
        /// </summary>
        /// <remarks>
        /// Remove permission from the charger for a given phone number.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="phoneNo">Phone number (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdPermissionDelete(string id, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0);

        /// <summary>
        /// Remove Charger Access
        /// </summary>
        /// <remarks>
        /// Remove permission from the charger for a given phone number.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="phoneNo">Phone number (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdPermissionDeleteWithHttpInfo(string id, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0);
        /// <summary>
        /// Permissions
        /// </summary>
        /// <remarks>
        /// Get permissions to the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeAccessControlDomainDTOUserChargerDTO&gt;</returns>
        List<EaseeAccessControlDomainDTOUserChargerDTO> ApiChargersIdPermissionGet(string id, int operationIndex = 0);

        /// <summary>
        /// Permissions
        /// </summary>
        /// <remarks>
        /// Get permissions to the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeAccessControlDomainDTOUserChargerDTO&gt;</returns>
        ApiResponse<List<EaseeAccessControlDomainDTOUserChargerDTO>> ApiChargersIdPermissionGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Grant Charger Access
        /// </summary>
        /// <remarks>
        /// Grant permissions to the charger for a given phone number.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsChargerPermissionRequestDTO">User phone number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdPermissionPost(string id, EaseeAccessControlModelsChargerPermissionRequestDTO? easeeAccessControlModelsChargerPermissionRequestDTO = default(EaseeAccessControlModelsChargerPermissionRequestDTO?), int operationIndex = 0);

        /// <summary>
        /// Grant Charger Access
        /// </summary>
        /// <remarks>
        /// Grant permissions to the charger for a given phone number.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsChargerPermissionRequestDTO">User phone number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdPermissionPostWithHttpInfo(string id, EaseeAccessControlModelsChargerPermissionRequestDTO? easeeAccessControlModelsChargerPermissionRequestDTO = default(EaseeAccessControlModelsChargerPermissionRequestDTO?), int operationIndex = 0);
        /// <summary>
        /// Latest Charging Session
        /// </summary>
        /// <remarks>
        /// Get last updated charging session.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        EaseeCoreDTOsChargerUsageStatisticsDTO ApiChargersIdSessionsLatestGet(string id, int operationIndex = 0);

        /// <summary>
        /// Latest Charging Session
        /// </summary>
        /// <remarks>
        /// Get last updated charging session.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO> ApiChargersIdSessionsLatestGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Ongoing Charging Session
        /// </summary>
        /// <remarks>
        /// Get current state of ongoing charging session.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        EaseeCoreDTOsChargerUsageStatisticsDTO ApiChargersIdSessionsOngoingGet(string id, int operationIndex = 0);

        /// <summary>
        /// Ongoing Charging Session
        /// </summary>
        /// <remarks>
        /// Get current state of ongoing charging session.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO> ApiChargersIdSessionsOngoingGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Change Charger Settings
        /// </summary>
        /// <remarks>
        /// Charger settings to update. Please only specify keys you want to change. Endpoint handles partial JSON objects  and will give a 400 response if it does not understand the request.&lt;br /&gt;Will only forward commands to device if  new value !&#x3D; old value &lt;br /&gt; Rate limited at max 20 requests per minute.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargerSettingDTO">Charger settings to set</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdSettingsPost(string id, EaseeCoreDTOsChargerChargerSettingDTO easeeCoreDTOsChargerChargerSettingDTO, int operationIndex = 0);

        /// <summary>
        /// Change Charger Settings
        /// </summary>
        /// <remarks>
        /// Charger settings to update. Please only specify keys you want to change. Endpoint handles partial JSON objects  and will give a 400 response if it does not understand the request.&lt;br /&gt;Will only forward commands to device if  new value !&#x3D; old value &lt;br /&gt; Rate limited at max 20 requests per minute.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargerSettingDTO">Charger settings to set</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdSettingsPostWithHttpInfo(string id, EaseeCoreDTOsChargerChargerSettingDTO easeeCoreDTOsChargerChargerSettingDTO, int operationIndex = 0);
        /// <summary>
        /// Site
        /// </summary>
        /// <remarks>
        /// Get charger site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeSiteStructureDomainPortsSiteDTO</returns>
        EaseeSiteStructureDomainPortsSiteDTO ApiChargersIdSiteGet(string id, int operationIndex = 0);

        /// <summary>
        /// Site
        /// </summary>
        /// <remarks>
        /// Get charger site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeSiteStructureDomainPortsSiteDTO</returns>
        ApiResponse<EaseeSiteStructureDomainPortsSiteDTO> ApiChargersIdSiteGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// State
        /// </summary>
        /// <remarks>
        /// Get charger state.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerChargerStateDTO</returns>
        EaseeCoreDTOsChargerChargerStateDTO ApiChargersIdStateGet(string id, int operationIndex = 0);

        /// <summary>
        /// State
        /// </summary>
        /// <remarks>
        /// Get charger state.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerChargerStateDTO</returns>
        ApiResponse<EaseeCoreDTOsChargerChargerStateDTO> ApiChargersIdStateGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Unpair
        /// </summary>
        /// <remarks>
        /// Unpair a charger from an account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdUnpairPost(string id, string? pinCode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Unpair
        /// </summary>
        /// <remarks>
        /// Unpair a charger from an account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdUnpairPostWithHttpInfo(string id, string? pinCode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Power Usage
        /// </summary>
        /// <remarks>
        /// Get hourly power usage for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionAggregatedUsageDTO&gt;</returns>
        List<EaseeCoreDTOsSessionAggregatedUsageDTO> ApiChargersIdUsageHourlyFromToGet(string id, DateTime from, DateTime to, int operationIndex = 0);

        /// <summary>
        /// Power Usage
        /// </summary>
        /// <remarks>
        /// Get hourly power usage for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionAggregatedUsageDTO&gt;</returns>
        ApiResponse<List<EaseeCoreDTOsSessionAggregatedUsageDTO>> ApiChargersIdUsageHourlyFromToGetWithHttpInfo(string id, DateTime from, DateTime to, int operationIndex = 0);
        /// <summary>
        /// Remove Weekly Charge Plan
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdWeeklyChargePlanDelete(string id, int operationIndex = 0);

        /// <summary>
        /// Remove Weekly Charge Plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdWeeklyChargePlanDeleteWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Weekly Charge Plan
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO</returns>
        EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO ApiChargersIdWeeklyChargePlanGet(string id, int operationIndex = 0);

        /// <summary>
        /// Weekly Charge Plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO</returns>
        ApiResponse<EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO> ApiChargersIdWeeklyChargePlanGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Set Weekly Charge Plan
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO">Weekly charge plan details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiChargersIdWeeklyChargePlanPost(string id, EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO? easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO = default(EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO?), int operationIndex = 0);

        /// <summary>
        /// Set Weekly Charge Plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO">Weekly charge plan details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiChargersIdWeeklyChargePlanPostWithHttpInfo(string id, EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO? easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO = default(EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept Invitation
        /// </summary>
        /// <remarks>
        /// Accept user invitation to access a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Charger user permission invitation acceptance token (optional)</param>
        /// <param name="invitationId">Charger user permission invitation acceptance invitation_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersAcceptPostAsync(string? email = default(string?), string? invitationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept Invitation
        /// </summary>
        /// <remarks>
        /// Accept user invitation to access a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Charger user permission invitation acceptance token (optional)</param>
        /// <param name="invitationId">Charger user permission invitation acceptance invitation_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersAcceptPostWithHttpInfoAsync(string? email = default(string?), string? invitationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Get chargers.&lt;br /&gt;If role is Partner, all partner chargers will be returned.&lt;br /&gt;If role is User, the users  chargers will be returned.&lt;br /&gt;Rate limited: Rate limited at max 2 requests per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerBasicChargerDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerBasicChargerDTO>> ApiChargersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Chargers
        /// </summary>
        /// <remarks>
        /// Get chargers.&lt;br /&gt;If role is Partner, all partner chargers will be returned.&lt;br /&gt;If role is User, the users  chargers will be returned.&lt;br /&gt;Rate limited: Rate limited at max 2 requests per minute
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerBasicChargerDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsChargerBasicChargerDTO>>> ApiChargersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Charger Access
        /// </summary>
        /// <remarks>
        /// Delete access level from the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdAccessDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Charger Access
        /// </summary>
        /// <remarks>
        /// Delete access level from the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdAccessDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Charger Access
        /// </summary>
        /// <remarks>
        /// Set access level to the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdAccessPutAsync(string id, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Charger Access
        /// </summary>
        /// <remarks>
        /// Set access level to the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdAccessPutWithHttpInfoAsync(string id, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Delete basic charge plan of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdBasicChargePlanDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Delete basic charge plan of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdBasicChargePlanDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Get basic charge plan of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerChargePlanDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerChargePlanDTO>> ApiChargersIdBasicChargePlanGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Get basic charge plan of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerChargePlanDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsChargerChargePlanDTO>>> ApiChargersIdBasicChargePlanGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Set basic charge plan of charger. IsEnabled attribute allow to IsEnabled the charge plan
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargePlanDTO">Charge plan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdBasicChargePlanPostAsync(string id, EaseeCoreDTOsChargerChargePlanDTO? easeeCoreDTOsChargerChargePlanDTO = default(EaseeCoreDTOsChargerChargePlanDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Basic Charge Plan
        /// </summary>
        /// <remarks>
        /// Set basic charge plan of charger. IsEnabled attribute allow to IsEnabled the charge plan
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargePlanDTO">Charge plan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdBasicChargePlanPostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerChargePlanDTO? easeeCoreDTOsChargerChargePlanDTO = default(EaseeCoreDTOsChargerChargePlanDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Turn on or off charge schedule features.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">charger id</param>
        /// <param name="easeeCoreDTOsScheduleScheduleFeatureRequestDto">charge schedule feature request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdChargeScheduleFeaturesPostAsync(string id, EaseeCoreDTOsScheduleScheduleFeatureRequestDto? easeeCoreDTOsScheduleScheduleFeatureRequestDto = default(EaseeCoreDTOsScheduleScheduleFeatureRequestDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Turn on or off charge schedule features.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">charger id</param>
        /// <param name="easeeCoreDTOsScheduleScheduleFeatureRequestDto">charge schedule feature request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdChargeScheduleFeaturesPostWithHttpInfoAsync(string id, EaseeCoreDTOsScheduleScheduleFeatureRequestDto? easeeCoreDTOsScheduleScheduleFeatureRequestDto = default(EaseeCoreDTOsScheduleScheduleFeatureRequestDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Cable Lock State
        /// </summary>
        /// <remarks>
        /// If state &#x3D; true, cable always locked in charger. state &#x3D; false, cable is unlocked when car is disconnected
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerLockStateDTO">Cable lock state (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsLockStatePostAsync(string id, EaseeCoreDTOsChargerLockStateDTO? easeeCoreDTOsChargerLockStateDTO = default(EaseeCoreDTOsChargerLockStateDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Cable Lock State
        /// </summary>
        /// <remarks>
        /// If state &#x3D; true, cable always locked in charger. state &#x3D; false, cable is unlocked when car is disconnected
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerLockStateDTO">Cable lock state (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsLockStatePostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerLockStateDTO? easeeCoreDTOsChargerLockStateDTO = default(EaseeCoreDTOsChargerLockStateDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Override Charging Schedule
        /// </summary>
        /// <remarks>
        /// Allows current session to charge immediately provided that schedule is the only mechanism stopping charge  currently.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsOverrideSchedulePostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Override Charging Schedule
        /// </summary>
        /// <remarks>
        /// Allows current session to charge immediately provided that schedule is the only mechanism stopping charge  currently.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsOverrideSchedulePostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pause Charging
        /// </summary>
        /// <remarks>
        /// Pauses current charging session but keeps authorization. Limits dynamic charger current to 0. &lt;br /&gt;Reset on  on new car connection
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsPauseChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pause Charging
        /// </summary>
        /// <remarks>
        /// Pauses current charging session but keeps authorization. Limits dynamic charger current to 0. &lt;br /&gt;Reset on  on new car connection
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsPauseChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Polls for a new Charger Op Mode
        /// </summary>
        /// <remarks>
        /// Rate limited to once every 3 minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsPollChargeropmodePostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Polls for a new Charger Op Mode
        /// </summary>
        /// <remarks>
        /// Rate limited to once every 3 minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsPollChargeropmodePostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Polls for a new Energy Reading
        /// </summary>
        /// <remarks>
        /// Rate limited to once every 3 minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsPollLifetimeenergyPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Polls for a new Energy Reading
        /// </summary>
        /// <remarks>
        /// Rate limited to once every 3 minutes
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsPollLifetimeenergyPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reboot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsRebootPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reboot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsRebootPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resume Charging
        /// </summary>
        /// <remarks>
        /// Resumes current charging session. Resets output current limit set in dynamic charger current
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsResumeChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resume Charging
        /// </summary>
        /// <remarks>
        /// Resumes current charging session. Resets output current limit set in dynamic charger current
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsResumeChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Scan Wi-Fi
        /// </summary>
        /// <remarks>
        /// Sends a Wi-Fi scan command to the charger. Result available in SignalR command responses and observations.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerScanWifiSettingDTO">Limits the time spent by firmware to scan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsScanWifiPostAsync(string id, EaseeCoreDTOsChargerScanWifiSettingDTO? easeeCoreDTOsChargerScanWifiSettingDTO = default(EaseeCoreDTOsChargerScanWifiSettingDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Scan Wi-Fi
        /// </summary>
        /// <remarks>
        /// Sends a Wi-Fi scan command to the charger. Result available in SignalR command responses and observations.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerScanWifiSettingDTO">Limits the time spent by firmware to scan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsScanWifiPostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerScanWifiSettingDTO? easeeCoreDTOsChargerScanWifiSettingDTO = default(EaseeCoreDTOsChargerScanWifiSettingDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pair RFID Tag
        /// </summary>
        /// <remarks>
        /// Pair new RFID tag with charger. Listen to the \&quot;CommandResponse\&quot; stream and observation &#39;69:PairedUserIDToken&#39;  to get the new token as read by the charger
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerPairRFIDSettingsDTO">Pair RFID settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsSetRfidPairingModeAsyncPostAsync(string id, EaseeCoreDTOsChargerPairRFIDSettingsDTO? easeeCoreDTOsChargerPairRFIDSettingsDTO = default(EaseeCoreDTOsChargerPairRFIDSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pair RFID Tag
        /// </summary>
        /// <remarks>
        /// Pair new RFID tag with charger. Listen to the \&quot;CommandResponse\&quot; stream and observation &#39;69:PairedUserIDToken&#39;  to get the new token as read by the charger
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerPairRFIDSettingsDTO">Pair RFID settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsSetRfidPairingModeAsyncPostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerPairRFIDSettingsDTO? easeeCoreDTOsChargerPairRFIDSettingsDTO = default(EaseeCoreDTOsChargerPairRFIDSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Wi-Fi Configuration
        /// </summary>
        /// <remarks>
        /// Sends Wi-Fi configuration to the charger. The charger may be unavailable up to 1 hour if incorrect values are  set in firmware
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerWifiConfigDTO">SSID and Password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsSetWifiConfigPostAsync(string id, EaseeCoreDTOsChargerWifiConfigDTO? easeeCoreDTOsChargerWifiConfigDTO = default(EaseeCoreDTOsChargerWifiConfigDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Wi-Fi Configuration
        /// </summary>
        /// <remarks>
        /// Sends Wi-Fi configuration to the charger. The charger may be unavailable up to 1 hour if incorrect values are  set in firmware
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerWifiConfigDTO">SSID and Password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsSetWifiConfigPostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerWifiConfigDTO? easeeCoreDTOsChargerWifiConfigDTO = default(EaseeCoreDTOsChargerWifiConfigDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enable Smart Charging
        /// </summary>
        /// <remarks>
        /// Disable by using the &#39;settings&#39; endpoint
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsSmartChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enable Smart Charging
        /// </summary>
        /// <remarks>
        /// Disable by using the &#39;settings&#39; endpoint
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsSmartChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start Charging
        /// </summary>
        /// <remarks>
        /// Allows a charger with &#39;authorizationRequired&#39; &#x3D; true to deliver power. Otherwise it will have no effect
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsStartChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start Charging
        /// </summary>
        /// <remarks>
        /// Allows a charger with &#39;authorizationRequired&#39; &#x3D; true to deliver power. Otherwise it will have no effect
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsStartChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop Charging
        /// </summary>
        /// <remarks>
        /// Stops a charger with an active authorization from delivering power and revokes authorization. Will have no  effect if &#39;authorizationRequired&#39; is false or charger is not authorized
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsStopChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop Charging
        /// </summary>
        /// <remarks>
        /// Stops a charger with an active authorization from delivering power and revokes authorization. Will have no  effect if &#39;authorizationRequired&#39; is false or charger is not authorized
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsStopChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Toggle Charging
        /// </summary>
        /// <remarks>
        /// Send charging command (Start/Stop or Pause/Resume). For chargers requiring online authorization, start/stop  commands are used. &lt;br /&gt;For chargers without online authorization,  pause/resume commands are used.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsToggleChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Toggle Charging
        /// </summary>
        /// <remarks>
        /// Send charging command (Start/Stop or Pause/Resume). For chargers requiring online authorization, start/stop  commands are used. &lt;br /&gt;For chargers without online authorization,  pause/resume commands are used.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsToggleChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Firmware
        /// </summary>
        /// <remarks>
        /// Updates firmware to latest public release
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdCommandsUpdateFirmwarePostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Firmware
        /// </summary>
        /// <remarks>
        /// Updates firmware to latest public release
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdCommandsUpdateFirmwarePostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Comments
        /// </summary>
        /// <remarks>
        /// Get user comments for a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerCommentDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerCommentDTO>> ApiChargersIdCommentsGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Comments
        /// </summary>
        /// <remarks>
        /// Get user comments for a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerCommentDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsChargerCommentDTO>>> ApiChargersIdCommentsGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <remarks>
        /// Get charger configuration.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerChargerConfigurationDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsChargerChargerConfigurationDTO> ApiChargersIdConfigGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Configuration
        /// </summary>
        /// <remarks>
        /// Get charger configuration.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerChargerConfigurationDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsChargerChargerConfigurationDTO>> ApiChargersIdConfigGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Charger Details
        /// </summary>
        /// <remarks>
        /// Get charger details.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerChargerInfoDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsChargerChargerInfoDTO> ApiChargersIdDetailsGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger Details
        /// </summary>
        /// <remarks>
        /// Get charger details.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerChargerInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsChargerChargerInfoDTO>> ApiChargersIdDetailsGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Errors
        /// </summary>
        /// <remarks>
        /// Get errors for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        System.Threading.Tasks.Task<List<MasterloopCoreTypesObservationsObservation>> ApiChargersIdErrorsFromToGetAsync(string id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Errors
        /// </summary>
        /// <remarks>
        /// Get errors for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MasterloopCoreTypesObservationsObservation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MasterloopCoreTypesObservationsObservation>>> ApiChargersIdErrorsFromToGetWithHttpInfoAsync(string id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Charger
        /// </summary>
        /// <remarks>
        /// Get a specified charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerChargerDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsChargerChargerDTO> ApiChargersIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Charger
        /// </summary>
        /// <remarks>
        /// Get a specified charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerChargerDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsChargerChargerDTO>> ApiChargersIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log Events
        /// </summary>
        /// <remarks>
        /// Get log events in a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="logType">Log type</param>
        /// <param name="from">From timestamp (ISO8601 string)</param>
        /// <param name="to">To timestamp (ISO8601 string)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerChargerLogEventDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerChargerLogEventDTO>> ApiChargersIdLogEventsLogTypeFromToGetAsync(string id, EaseeCoreEnumsLogType logType, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log Events
        /// </summary>
        /// <remarks>
        /// Get log events in a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="logType">Log type</param>
        /// <param name="from">From timestamp (ISO8601 string)</param>
        /// <param name="to">To timestamp (ISO8601 string)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerChargerLogEventDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsChargerChargerLogEventDTO>>> ApiChargersIdLogEventsLogTypeFromToGetWithHttpInfoAsync(string id, EaseeCoreEnumsLogType logType, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Observations
        /// </summary>
        /// <remarks>
        /// Get observations for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="observationId">Observation ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        System.Threading.Tasks.Task<List<MasterloopCoreTypesObservationsObservation>> ApiChargersIdObservationsObservationIdFromToGetAsync(string id, int observationId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Observations
        /// </summary>
        /// <remarks>
        /// Get observations for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="observationId">Observation ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MasterloopCoreTypesObservationsObservation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MasterloopCoreTypesObservationsObservation>>> ApiChargersIdObservationsObservationIdFromToGetWithHttpInfoAsync(string id, int observationId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pair
        /// </summary>
        /// <remarks>
        /// Pair a charger to an account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdPairPostAsync(string id, string? pinCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pair
        /// </summary>
        /// <remarks>
        /// Pair a charger to an account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdPairPostWithHttpInfoAsync(string id, string? pinCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Partner
        /// </summary>
        /// <remarks>
        /// Get partner of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeAccessControlModelsPartnerDetailedDTO</returns>
        System.Threading.Tasks.Task<EaseeAccessControlModelsPartnerDetailedDTO> ApiChargersIdPartnersGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Partner
        /// </summary>
        /// <remarks>
        /// Get partner of charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeAccessControlModelsPartnerDetailedDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeAccessControlModelsPartnerDetailedDTO>> ApiChargersIdPartnersGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Partner
        /// </summary>
        /// <remarks>
        /// Remove partner from a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="partnerId">Partner ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdPartnersPartnerIdDeleteAsync(string id, int partnerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Partner
        /// </summary>
        /// <remarks>
        /// Remove partner from a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="partnerId">Partner ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdPartnersPartnerIdDeleteWithHttpInfoAsync(string id, int partnerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Partner
        /// </summary>
        /// <remarks>
        /// Set partner of a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsPairChargerPartnerDTO">Partner ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdPartnersPostAsync(string id, EaseeAccessControlModelsPairChargerPartnerDTO? easeeAccessControlModelsPairChargerPartnerDTO = default(EaseeAccessControlModelsPairChargerPartnerDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Partner
        /// </summary>
        /// <remarks>
        /// Set partner of a charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsPairChargerPartnerDTO">Partner ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdPartnersPostWithHttpInfoAsync(string id, EaseeAccessControlModelsPairChargerPartnerDTO? easeeAccessControlModelsPairChargerPartnerDTO = default(EaseeAccessControlModelsPairChargerPartnerDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Charger Access
        /// </summary>
        /// <remarks>
        /// Remove permission from the charger for a given phone number.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="phoneNo">Phone number (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdPermissionDeleteAsync(string id, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Charger Access
        /// </summary>
        /// <remarks>
        /// Remove permission from the charger for a given phone number.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="phoneNo">Phone number (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdPermissionDeleteWithHttpInfoAsync(string id, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Permissions
        /// </summary>
        /// <remarks>
        /// Get permissions to the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeAccessControlDomainDTOUserChargerDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeAccessControlDomainDTOUserChargerDTO>> ApiChargersIdPermissionGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Permissions
        /// </summary>
        /// <remarks>
        /// Get permissions to the charger.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeAccessControlDomainDTOUserChargerDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeAccessControlDomainDTOUserChargerDTO>>> ApiChargersIdPermissionGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Grant Charger Access
        /// </summary>
        /// <remarks>
        /// Grant permissions to the charger for a given phone number.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsChargerPermissionRequestDTO">User phone number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdPermissionPostAsync(string id, EaseeAccessControlModelsChargerPermissionRequestDTO? easeeAccessControlModelsChargerPermissionRequestDTO = default(EaseeAccessControlModelsChargerPermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Grant Charger Access
        /// </summary>
        /// <remarks>
        /// Grant permissions to the charger for a given phone number.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsChargerPermissionRequestDTO">User phone number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdPermissionPostWithHttpInfoAsync(string id, EaseeAccessControlModelsChargerPermissionRequestDTO? easeeAccessControlModelsChargerPermissionRequestDTO = default(EaseeAccessControlModelsChargerPermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Latest Charging Session
        /// </summary>
        /// <remarks>
        /// Get last updated charging session.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsChargerUsageStatisticsDTO> ApiChargersIdSessionsLatestGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Latest Charging Session
        /// </summary>
        /// <remarks>
        /// Get last updated charging session.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerUsageStatisticsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO>> ApiChargersIdSessionsLatestGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ongoing Charging Session
        /// </summary>
        /// <remarks>
        /// Get current state of ongoing charging session.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsChargerUsageStatisticsDTO> ApiChargersIdSessionsOngoingGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ongoing Charging Session
        /// </summary>
        /// <remarks>
        /// Get current state of ongoing charging session.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerUsageStatisticsDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO>> ApiChargersIdSessionsOngoingGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Change Charger Settings
        /// </summary>
        /// <remarks>
        /// Charger settings to update. Please only specify keys you want to change. Endpoint handles partial JSON objects  and will give a 400 response if it does not understand the request.&lt;br /&gt;Will only forward commands to device if  new value !&#x3D; old value &lt;br /&gt; Rate limited at max 20 requests per minute.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargerSettingDTO">Charger settings to set</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdSettingsPostAsync(string id, EaseeCoreDTOsChargerChargerSettingDTO easeeCoreDTOsChargerChargerSettingDTO, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change Charger Settings
        /// </summary>
        /// <remarks>
        /// Charger settings to update. Please only specify keys you want to change. Endpoint handles partial JSON objects  and will give a 400 response if it does not understand the request.&lt;br /&gt;Will only forward commands to device if  new value !&#x3D; old value &lt;br /&gt; Rate limited at max 20 requests per minute.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargerSettingDTO">Charger settings to set</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdSettingsPostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerChargerSettingDTO easeeCoreDTOsChargerChargerSettingDTO, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Site
        /// </summary>
        /// <remarks>
        /// Get charger site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeSiteStructureDomainPortsSiteDTO</returns>
        System.Threading.Tasks.Task<EaseeSiteStructureDomainPortsSiteDTO> ApiChargersIdSiteGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Site
        /// </summary>
        /// <remarks>
        /// Get charger site.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeSiteStructureDomainPortsSiteDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeSiteStructureDomainPortsSiteDTO>> ApiChargersIdSiteGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// State
        /// </summary>
        /// <remarks>
        /// Get charger state.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerChargerStateDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsChargerChargerStateDTO> ApiChargersIdStateGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// State
        /// </summary>
        /// <remarks>
        /// Get charger state.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerChargerStateDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsChargerChargerStateDTO>> ApiChargersIdStateGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unpair
        /// </summary>
        /// <remarks>
        /// Unpair a charger from an account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdUnpairPostAsync(string id, string? pinCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unpair
        /// </summary>
        /// <remarks>
        /// Unpair a charger from an account.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdUnpairPostWithHttpInfoAsync(string id, string? pinCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Power Usage
        /// </summary>
        /// <remarks>
        /// Get hourly power usage for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionAggregatedUsageDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionAggregatedUsageDTO>> ApiChargersIdUsageHourlyFromToGetAsync(string id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Power Usage
        /// </summary>
        /// <remarks>
        /// Get hourly power usage for a given period.
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionAggregatedUsageDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EaseeCoreDTOsSessionAggregatedUsageDTO>>> ApiChargersIdUsageHourlyFromToGetWithHttpInfoAsync(string id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Weekly Charge Plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdWeeklyChargePlanDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Weekly Charge Plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdWeeklyChargePlanDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Weekly Charge Plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO</returns>
        System.Threading.Tasks.Task<EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO> ApiChargersIdWeeklyChargePlanGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Weekly Charge Plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO>> ApiChargersIdWeeklyChargePlanGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Weekly Charge Plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO">Weekly charge plan details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiChargersIdWeeklyChargePlanPostAsync(string id, EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO? easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO = default(EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Weekly Charge Plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO">Weekly charge plan details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiChargersIdWeeklyChargePlanPostWithHttpInfoAsync(string id, EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO? easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO = default(EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargerApi : IChargerApiSync, IChargerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChargerApi : IChargerApi
    {
        private kern.services.EaseeClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChargerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChargerApi(string basePath)
        {
            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                new kern.services.EaseeClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChargerApi(kern.services.EaseeClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = kern.services.EaseeClient.Client.Configuration.MergeConfigurations(
                kern.services.EaseeClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.EaseeClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChargerApi(kern.services.EaseeClient.Client.ISynchronousClient client, kern.services.EaseeClient.Client.IAsynchronousClient asyncClient, kern.services.EaseeClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = kern.services.EaseeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public kern.services.EaseeClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public kern.services.EaseeClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public kern.services.EaseeClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept Invitation Accept user invitation to access a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Charger user permission invitation acceptance token (optional)</param>
        /// <param name="invitationId">Charger user permission invitation acceptance invitation_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersAcceptPost(string? email = default(string?), string? invitationId = default(string?), int operationIndex = 0)
        {
            ApiChargersAcceptPostWithHttpInfo(email, invitationId);
        }

        /// <summary>
        /// Accept Invitation Accept user invitation to access a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Charger user permission invitation acceptance token (optional)</param>
        /// <param name="invitationId">Charger user permission invitation acceptance invitation_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersAcceptPostWithHttpInfo(string? email = default(string?), string? invitationId = default(string?), int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (invitationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "invitation_id", invitationId));
            }

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersAcceptPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersAcceptPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept Invitation Accept user invitation to access a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Charger user permission invitation acceptance token (optional)</param>
        /// <param name="invitationId">Charger user permission invitation acceptance invitation_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersAcceptPostAsync(string? email = default(string?), string? invitationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersAcceptPostWithHttpInfoAsync(email, invitationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Accept Invitation Accept user invitation to access a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Charger user permission invitation acceptance token (optional)</param>
        /// <param name="invitationId">Charger user permission invitation acceptance invitation_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersAcceptPostWithHttpInfoAsync(string? email = default(string?), string? invitationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (invitationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "invitation_id", invitationId));
            }

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersAcceptPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersAcceptPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Chargers Get chargers.&lt;br /&gt;If role is Partner, all partner chargers will be returned.&lt;br /&gt;If role is User, the users  chargers will be returned.&lt;br /&gt;Rate limited: Rate limited at max 2 requests per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerBasicChargerDTO&gt;</returns>
        public List<EaseeCoreDTOsChargerBasicChargerDTO> ApiChargersGet(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerBasicChargerDTO>> localVarResponse = ApiChargersGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Chargers Get chargers.&lt;br /&gt;If role is Partner, all partner chargers will be returned.&lt;br /&gt;If role is User, the users  chargers will be returned.&lt;br /&gt;Rate limited: Rate limited at max 2 requests per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerBasicChargerDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerBasicChargerDTO>> ApiChargersGetWithHttpInfo(int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ChargerApi.ApiChargersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsChargerBasicChargerDTO>>("/api/chargers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Chargers Get chargers.&lt;br /&gt;If role is Partner, all partner chargers will be returned.&lt;br /&gt;If role is User, the users  chargers will be returned.&lt;br /&gt;Rate limited: Rate limited at max 2 requests per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerBasicChargerDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerBasicChargerDTO>> ApiChargersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerBasicChargerDTO>> localVarResponse = await ApiChargersGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Chargers Get chargers.&lt;br /&gt;If role is Partner, all partner chargers will be returned.&lt;br /&gt;If role is User, the users  chargers will be returned.&lt;br /&gt;Rate limited: Rate limited at max 2 requests per minute
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerBasicChargerDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerBasicChargerDTO>>> ApiChargersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ChargerApi.ApiChargersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsChargerBasicChargerDTO>>("/api/chargers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Charger Access Delete access level from the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdAccessDelete(string id, int operationIndex = 0)
        {
            ApiChargersIdAccessDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Remove Charger Access Delete access level from the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdAccessDeleteWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdAccessDelete");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdAccessDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/chargers/{id}/access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdAccessDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Charger Access Delete access level from the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdAccessDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdAccessDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Charger Access Delete access level from the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdAccessDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdAccessDelete");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdAccessDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/chargers/{id}/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdAccessDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Charger Access Set access level to the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdAccessPut(string id, int? body = default(int?), int operationIndex = 0)
        {
            ApiChargersIdAccessPutWithHttpInfo(id, body);
        }

        /// <summary>
        /// Set Charger Access Set access level to the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdAccessPutWithHttpInfo(string id, int? body = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdAccessPut");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdAccessPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/chargers/{id}/access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdAccessPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Charger Access Set access level to the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdAccessPutAsync(string id, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdAccessPutWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Charger Access Set access level to the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="body">Access level (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdAccessPutWithHttpInfoAsync(string id, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdAccessPut");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdAccessPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/chargers/{id}/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdAccessPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Basic Charge Plan Delete basic charge plan of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdBasicChargePlanDelete(string id, int operationIndex = 0)
        {
            ApiChargersIdBasicChargePlanDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Basic Charge Plan Delete basic charge plan of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdBasicChargePlanDeleteWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdBasicChargePlanDelete");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdBasicChargePlanDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/chargers/{id}/basic_charge_plan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdBasicChargePlanDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Basic Charge Plan Delete basic charge plan of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdBasicChargePlanDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdBasicChargePlanDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Basic Charge Plan Delete basic charge plan of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdBasicChargePlanDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdBasicChargePlanDelete");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdBasicChargePlanDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/chargers/{id}/basic_charge_plan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdBasicChargePlanDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Basic Charge Plan Get basic charge plan of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerChargePlanDTO&gt;</returns>
        public List<EaseeCoreDTOsChargerChargePlanDTO> ApiChargersIdBasicChargePlanGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargePlanDTO>> localVarResponse = ApiChargersIdBasicChargePlanGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic Charge Plan Get basic charge plan of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerChargePlanDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargePlanDTO>> ApiChargersIdBasicChargePlanGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdBasicChargePlanGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdBasicChargePlanGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsChargerChargePlanDTO>>("/api/chargers/{id}/basic_charge_plan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdBasicChargePlanGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Basic Charge Plan Get basic charge plan of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerChargePlanDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerChargePlanDTO>> ApiChargersIdBasicChargePlanGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargePlanDTO>> localVarResponse = await ApiChargersIdBasicChargePlanGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic Charge Plan Get basic charge plan of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerChargePlanDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargePlanDTO>>> ApiChargersIdBasicChargePlanGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdBasicChargePlanGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdBasicChargePlanGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsChargerChargePlanDTO>>("/api/chargers/{id}/basic_charge_plan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdBasicChargePlanGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Basic Charge Plan Set basic charge plan of charger. IsEnabled attribute allow to IsEnabled the charge plan
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargePlanDTO">Charge plan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdBasicChargePlanPost(string id, EaseeCoreDTOsChargerChargePlanDTO? easeeCoreDTOsChargerChargePlanDTO = default(EaseeCoreDTOsChargerChargePlanDTO?), int operationIndex = 0)
        {
            ApiChargersIdBasicChargePlanPostWithHttpInfo(id, easeeCoreDTOsChargerChargePlanDTO);
        }

        /// <summary>
        /// Set Basic Charge Plan Set basic charge plan of charger. IsEnabled attribute allow to IsEnabled the charge plan
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargePlanDTO">Charge plan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdBasicChargePlanPostWithHttpInfo(string id, EaseeCoreDTOsChargerChargePlanDTO? easeeCoreDTOsChargerChargePlanDTO = default(EaseeCoreDTOsChargerChargePlanDTO?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdBasicChargePlanPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerChargePlanDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdBasicChargePlanPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/basic_charge_plan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdBasicChargePlanPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Basic Charge Plan Set basic charge plan of charger. IsEnabled attribute allow to IsEnabled the charge plan
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargePlanDTO">Charge plan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdBasicChargePlanPostAsync(string id, EaseeCoreDTOsChargerChargePlanDTO? easeeCoreDTOsChargerChargePlanDTO = default(EaseeCoreDTOsChargerChargePlanDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdBasicChargePlanPostWithHttpInfoAsync(id, easeeCoreDTOsChargerChargePlanDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Basic Charge Plan Set basic charge plan of charger. IsEnabled attribute allow to IsEnabled the charge plan
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargePlanDTO">Charge plan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdBasicChargePlanPostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerChargePlanDTO? easeeCoreDTOsChargerChargePlanDTO = default(EaseeCoreDTOsChargerChargePlanDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdBasicChargePlanPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerChargePlanDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdBasicChargePlanPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/basic_charge_plan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdBasicChargePlanPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Turn on or off charge schedule features. 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">charger id</param>
        /// <param name="easeeCoreDTOsScheduleScheduleFeatureRequestDto">charge schedule feature request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdChargeScheduleFeaturesPost(string id, EaseeCoreDTOsScheduleScheduleFeatureRequestDto? easeeCoreDTOsScheduleScheduleFeatureRequestDto = default(EaseeCoreDTOsScheduleScheduleFeatureRequestDto?), int operationIndex = 0)
        {
            ApiChargersIdChargeScheduleFeaturesPostWithHttpInfo(id, easeeCoreDTOsScheduleScheduleFeatureRequestDto);
        }

        /// <summary>
        /// Turn on or off charge schedule features. 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">charger id</param>
        /// <param name="easeeCoreDTOsScheduleScheduleFeatureRequestDto">charge schedule feature request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdChargeScheduleFeaturesPostWithHttpInfo(string id, EaseeCoreDTOsScheduleScheduleFeatureRequestDto? easeeCoreDTOsScheduleScheduleFeatureRequestDto = default(EaseeCoreDTOsScheduleScheduleFeatureRequestDto?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdChargeScheduleFeaturesPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsScheduleScheduleFeatureRequestDto;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdChargeScheduleFeaturesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/charge_schedule/features", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdChargeScheduleFeaturesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Turn on or off charge schedule features. 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">charger id</param>
        /// <param name="easeeCoreDTOsScheduleScheduleFeatureRequestDto">charge schedule feature request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdChargeScheduleFeaturesPostAsync(string id, EaseeCoreDTOsScheduleScheduleFeatureRequestDto? easeeCoreDTOsScheduleScheduleFeatureRequestDto = default(EaseeCoreDTOsScheduleScheduleFeatureRequestDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdChargeScheduleFeaturesPostWithHttpInfoAsync(id, easeeCoreDTOsScheduleScheduleFeatureRequestDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Turn on or off charge schedule features. 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">charger id</param>
        /// <param name="easeeCoreDTOsScheduleScheduleFeatureRequestDto">charge schedule feature request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdChargeScheduleFeaturesPostWithHttpInfoAsync(string id, EaseeCoreDTOsScheduleScheduleFeatureRequestDto? easeeCoreDTOsScheduleScheduleFeatureRequestDto = default(EaseeCoreDTOsScheduleScheduleFeatureRequestDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdChargeScheduleFeaturesPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsScheduleScheduleFeatureRequestDto;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdChargeScheduleFeaturesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/charge_schedule/features", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdChargeScheduleFeaturesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Cable Lock State If state &#x3D; true, cable always locked in charger. state &#x3D; false, cable is unlocked when car is disconnected
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerLockStateDTO">Cable lock state (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsLockStatePost(string id, EaseeCoreDTOsChargerLockStateDTO? easeeCoreDTOsChargerLockStateDTO = default(EaseeCoreDTOsChargerLockStateDTO?), int operationIndex = 0)
        {
            ApiChargersIdCommandsLockStatePostWithHttpInfo(id, easeeCoreDTOsChargerLockStateDTO);
        }

        /// <summary>
        /// Set Cable Lock State If state &#x3D; true, cable always locked in charger. state &#x3D; false, cable is unlocked when car is disconnected
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerLockStateDTO">Cable lock state (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsLockStatePostWithHttpInfo(string id, EaseeCoreDTOsChargerLockStateDTO? easeeCoreDTOsChargerLockStateDTO = default(EaseeCoreDTOsChargerLockStateDTO?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsLockStatePost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerLockStateDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsLockStatePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/lock_state", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsLockStatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Cable Lock State If state &#x3D; true, cable always locked in charger. state &#x3D; false, cable is unlocked when car is disconnected
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerLockStateDTO">Cable lock state (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsLockStatePostAsync(string id, EaseeCoreDTOsChargerLockStateDTO? easeeCoreDTOsChargerLockStateDTO = default(EaseeCoreDTOsChargerLockStateDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsLockStatePostWithHttpInfoAsync(id, easeeCoreDTOsChargerLockStateDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Cable Lock State If state &#x3D; true, cable always locked in charger. state &#x3D; false, cable is unlocked when car is disconnected
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerLockStateDTO">Cable lock state (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsLockStatePostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerLockStateDTO? easeeCoreDTOsChargerLockStateDTO = default(EaseeCoreDTOsChargerLockStateDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsLockStatePost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerLockStateDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsLockStatePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/lock_state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsLockStatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Override Charging Schedule Allows current session to charge immediately provided that schedule is the only mechanism stopping charge  currently.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsOverrideSchedulePost(string id, int operationIndex = 0)
        {
            ApiChargersIdCommandsOverrideSchedulePostWithHttpInfo(id);
        }

        /// <summary>
        /// Override Charging Schedule Allows current session to charge immediately provided that schedule is the only mechanism stopping charge  currently.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsOverrideSchedulePostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsOverrideSchedulePost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsOverrideSchedulePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/override_schedule", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsOverrideSchedulePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Override Charging Schedule Allows current session to charge immediately provided that schedule is the only mechanism stopping charge  currently.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsOverrideSchedulePostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsOverrideSchedulePostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Override Charging Schedule Allows current session to charge immediately provided that schedule is the only mechanism stopping charge  currently.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsOverrideSchedulePostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsOverrideSchedulePost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsOverrideSchedulePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/override_schedule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsOverrideSchedulePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause Charging Pauses current charging session but keeps authorization. Limits dynamic charger current to 0. &lt;br /&gt;Reset on  on new car connection
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsPauseChargingPost(string id, int operationIndex = 0)
        {
            ApiChargersIdCommandsPauseChargingPostWithHttpInfo(id);
        }

        /// <summary>
        /// Pause Charging Pauses current charging session but keeps authorization. Limits dynamic charger current to 0. &lt;br /&gt;Reset on  on new car connection
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsPauseChargingPostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsPauseChargingPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsPauseChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/pause_charging", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsPauseChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause Charging Pauses current charging session but keeps authorization. Limits dynamic charger current to 0. &lt;br /&gt;Reset on  on new car connection
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsPauseChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsPauseChargingPostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Pause Charging Pauses current charging session but keeps authorization. Limits dynamic charger current to 0. &lt;br /&gt;Reset on  on new car connection
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsPauseChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsPauseChargingPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsPauseChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/pause_charging", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsPauseChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Polls for a new Charger Op Mode Rate limited to once every 3 minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsPollChargeropmodePost(string id, int operationIndex = 0)
        {
            ApiChargersIdCommandsPollChargeropmodePostWithHttpInfo(id);
        }

        /// <summary>
        /// Polls for a new Charger Op Mode Rate limited to once every 3 minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsPollChargeropmodePostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsPollChargeropmodePost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsPollChargeropmodePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/poll_chargeropmode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsPollChargeropmodePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Polls for a new Charger Op Mode Rate limited to once every 3 minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsPollChargeropmodePostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsPollChargeropmodePostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Polls for a new Charger Op Mode Rate limited to once every 3 minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsPollChargeropmodePostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsPollChargeropmodePost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsPollChargeropmodePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/poll_chargeropmode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsPollChargeropmodePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Polls for a new Energy Reading Rate limited to once every 3 minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsPollLifetimeenergyPost(string id, int operationIndex = 0)
        {
            ApiChargersIdCommandsPollLifetimeenergyPostWithHttpInfo(id);
        }

        /// <summary>
        /// Polls for a new Energy Reading Rate limited to once every 3 minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsPollLifetimeenergyPostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsPollLifetimeenergyPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsPollLifetimeenergyPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/poll_lifetimeenergy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsPollLifetimeenergyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Polls for a new Energy Reading Rate limited to once every 3 minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsPollLifetimeenergyPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsPollLifetimeenergyPostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Polls for a new Energy Reading Rate limited to once every 3 minutes
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsPollLifetimeenergyPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsPollLifetimeenergyPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsPollLifetimeenergyPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/poll_lifetimeenergy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsPollLifetimeenergyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reboot 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsRebootPost(string id, int operationIndex = 0)
        {
            ApiChargersIdCommandsRebootPostWithHttpInfo(id);
        }

        /// <summary>
        /// Reboot 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsRebootPostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsRebootPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsRebootPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/reboot", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsRebootPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reboot 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsRebootPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsRebootPostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reboot 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsRebootPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsRebootPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsRebootPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/reboot", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsRebootPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume Charging Resumes current charging session. Resets output current limit set in dynamic charger current
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsResumeChargingPost(string id, int operationIndex = 0)
        {
            ApiChargersIdCommandsResumeChargingPostWithHttpInfo(id);
        }

        /// <summary>
        /// Resume Charging Resumes current charging session. Resets output current limit set in dynamic charger current
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsResumeChargingPostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsResumeChargingPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsResumeChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/resume_charging", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsResumeChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume Charging Resumes current charging session. Resets output current limit set in dynamic charger current
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsResumeChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsResumeChargingPostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Resume Charging Resumes current charging session. Resets output current limit set in dynamic charger current
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsResumeChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsResumeChargingPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsResumeChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/resume_charging", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsResumeChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan Wi-Fi Sends a Wi-Fi scan command to the charger. Result available in SignalR command responses and observations.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerScanWifiSettingDTO">Limits the time spent by firmware to scan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsScanWifiPost(string id, EaseeCoreDTOsChargerScanWifiSettingDTO? easeeCoreDTOsChargerScanWifiSettingDTO = default(EaseeCoreDTOsChargerScanWifiSettingDTO?), int operationIndex = 0)
        {
            ApiChargersIdCommandsScanWifiPostWithHttpInfo(id, easeeCoreDTOsChargerScanWifiSettingDTO);
        }

        /// <summary>
        /// Scan Wi-Fi Sends a Wi-Fi scan command to the charger. Result available in SignalR command responses and observations.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerScanWifiSettingDTO">Limits the time spent by firmware to scan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsScanWifiPostWithHttpInfo(string id, EaseeCoreDTOsChargerScanWifiSettingDTO? easeeCoreDTOsChargerScanWifiSettingDTO = default(EaseeCoreDTOsChargerScanWifiSettingDTO?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsScanWifiPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerScanWifiSettingDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsScanWifiPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/scan_wifi", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsScanWifiPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan Wi-Fi Sends a Wi-Fi scan command to the charger. Result available in SignalR command responses and observations.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerScanWifiSettingDTO">Limits the time spent by firmware to scan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsScanWifiPostAsync(string id, EaseeCoreDTOsChargerScanWifiSettingDTO? easeeCoreDTOsChargerScanWifiSettingDTO = default(EaseeCoreDTOsChargerScanWifiSettingDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsScanWifiPostWithHttpInfoAsync(id, easeeCoreDTOsChargerScanWifiSettingDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Scan Wi-Fi Sends a Wi-Fi scan command to the charger. Result available in SignalR command responses and observations.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerScanWifiSettingDTO">Limits the time spent by firmware to scan (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsScanWifiPostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerScanWifiSettingDTO? easeeCoreDTOsChargerScanWifiSettingDTO = default(EaseeCoreDTOsChargerScanWifiSettingDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsScanWifiPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerScanWifiSettingDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsScanWifiPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/scan_wifi", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsScanWifiPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pair RFID Tag Pair new RFID tag with charger. Listen to the \&quot;CommandResponse\&quot; stream and observation &#39;69:PairedUserIDToken&#39;  to get the new token as read by the charger
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerPairRFIDSettingsDTO">Pair RFID settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsSetRfidPairingModeAsyncPost(string id, EaseeCoreDTOsChargerPairRFIDSettingsDTO? easeeCoreDTOsChargerPairRFIDSettingsDTO = default(EaseeCoreDTOsChargerPairRFIDSettingsDTO?), int operationIndex = 0)
        {
            ApiChargersIdCommandsSetRfidPairingModeAsyncPostWithHttpInfo(id, easeeCoreDTOsChargerPairRFIDSettingsDTO);
        }

        /// <summary>
        /// Pair RFID Tag Pair new RFID tag with charger. Listen to the \&quot;CommandResponse\&quot; stream and observation &#39;69:PairedUserIDToken&#39;  to get the new token as read by the charger
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerPairRFIDSettingsDTO">Pair RFID settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsSetRfidPairingModeAsyncPostWithHttpInfo(string id, EaseeCoreDTOsChargerPairRFIDSettingsDTO? easeeCoreDTOsChargerPairRFIDSettingsDTO = default(EaseeCoreDTOsChargerPairRFIDSettingsDTO?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsSetRfidPairingModeAsyncPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerPairRFIDSettingsDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsSetRfidPairingModeAsyncPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/set_rfid_pairing_mode_async", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsSetRfidPairingModeAsyncPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pair RFID Tag Pair new RFID tag with charger. Listen to the \&quot;CommandResponse\&quot; stream and observation &#39;69:PairedUserIDToken&#39;  to get the new token as read by the charger
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerPairRFIDSettingsDTO">Pair RFID settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsSetRfidPairingModeAsyncPostAsync(string id, EaseeCoreDTOsChargerPairRFIDSettingsDTO? easeeCoreDTOsChargerPairRFIDSettingsDTO = default(EaseeCoreDTOsChargerPairRFIDSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsSetRfidPairingModeAsyncPostWithHttpInfoAsync(id, easeeCoreDTOsChargerPairRFIDSettingsDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Pair RFID Tag Pair new RFID tag with charger. Listen to the \&quot;CommandResponse\&quot; stream and observation &#39;69:PairedUserIDToken&#39;  to get the new token as read by the charger
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerPairRFIDSettingsDTO">Pair RFID settings (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsSetRfidPairingModeAsyncPostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerPairRFIDSettingsDTO? easeeCoreDTOsChargerPairRFIDSettingsDTO = default(EaseeCoreDTOsChargerPairRFIDSettingsDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsSetRfidPairingModeAsyncPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerPairRFIDSettingsDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsSetRfidPairingModeAsyncPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/set_rfid_pairing_mode_async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsSetRfidPairingModeAsyncPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Wi-Fi Configuration Sends Wi-Fi configuration to the charger. The charger may be unavailable up to 1 hour if incorrect values are  set in firmware
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerWifiConfigDTO">SSID and Password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsSetWifiConfigPost(string id, EaseeCoreDTOsChargerWifiConfigDTO? easeeCoreDTOsChargerWifiConfigDTO = default(EaseeCoreDTOsChargerWifiConfigDTO?), int operationIndex = 0)
        {
            ApiChargersIdCommandsSetWifiConfigPostWithHttpInfo(id, easeeCoreDTOsChargerWifiConfigDTO);
        }

        /// <summary>
        /// Set Wi-Fi Configuration Sends Wi-Fi configuration to the charger. The charger may be unavailable up to 1 hour if incorrect values are  set in firmware
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerWifiConfigDTO">SSID and Password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsSetWifiConfigPostWithHttpInfo(string id, EaseeCoreDTOsChargerWifiConfigDTO? easeeCoreDTOsChargerWifiConfigDTO = default(EaseeCoreDTOsChargerWifiConfigDTO?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsSetWifiConfigPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerWifiConfigDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsSetWifiConfigPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/set_wifi_config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsSetWifiConfigPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Wi-Fi Configuration Sends Wi-Fi configuration to the charger. The charger may be unavailable up to 1 hour if incorrect values are  set in firmware
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerWifiConfigDTO">SSID and Password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsSetWifiConfigPostAsync(string id, EaseeCoreDTOsChargerWifiConfigDTO? easeeCoreDTOsChargerWifiConfigDTO = default(EaseeCoreDTOsChargerWifiConfigDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsSetWifiConfigPostWithHttpInfoAsync(id, easeeCoreDTOsChargerWifiConfigDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Wi-Fi Configuration Sends Wi-Fi configuration to the charger. The charger may be unavailable up to 1 hour if incorrect values are  set in firmware
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerWifiConfigDTO">SSID and Password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsSetWifiConfigPostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerWifiConfigDTO? easeeCoreDTOsChargerWifiConfigDTO = default(EaseeCoreDTOsChargerWifiConfigDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsSetWifiConfigPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerWifiConfigDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsSetWifiConfigPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/set_wifi_config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsSetWifiConfigPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable Smart Charging Disable by using the &#39;settings&#39; endpoint
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsSmartChargingPost(string id, int operationIndex = 0)
        {
            ApiChargersIdCommandsSmartChargingPostWithHttpInfo(id);
        }

        /// <summary>
        /// Enable Smart Charging Disable by using the &#39;settings&#39; endpoint
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsSmartChargingPostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsSmartChargingPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsSmartChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/smart_charging", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsSmartChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable Smart Charging Disable by using the &#39;settings&#39; endpoint
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsSmartChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsSmartChargingPostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Enable Smart Charging Disable by using the &#39;settings&#39; endpoint
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsSmartChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsSmartChargingPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsSmartChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/smart_charging", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsSmartChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Charging Allows a charger with &#39;authorizationRequired&#39; &#x3D; true to deliver power. Otherwise it will have no effect
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsStartChargingPost(string id, int operationIndex = 0)
        {
            ApiChargersIdCommandsStartChargingPostWithHttpInfo(id);
        }

        /// <summary>
        /// Start Charging Allows a charger with &#39;authorizationRequired&#39; &#x3D; true to deliver power. Otherwise it will have no effect
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsStartChargingPostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsStartChargingPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsStartChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/start_charging", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsStartChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Charging Allows a charger with &#39;authorizationRequired&#39; &#x3D; true to deliver power. Otherwise it will have no effect
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsStartChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsStartChargingPostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Start Charging Allows a charger with &#39;authorizationRequired&#39; &#x3D; true to deliver power. Otherwise it will have no effect
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsStartChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsStartChargingPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsStartChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/start_charging", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsStartChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop Charging Stops a charger with an active authorization from delivering power and revokes authorization. Will have no  effect if &#39;authorizationRequired&#39; is false or charger is not authorized
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsStopChargingPost(string id, int operationIndex = 0)
        {
            ApiChargersIdCommandsStopChargingPostWithHttpInfo(id);
        }

        /// <summary>
        /// Stop Charging Stops a charger with an active authorization from delivering power and revokes authorization. Will have no  effect if &#39;authorizationRequired&#39; is false or charger is not authorized
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsStopChargingPostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsStopChargingPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsStopChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/stop_charging", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsStopChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop Charging Stops a charger with an active authorization from delivering power and revokes authorization. Will have no  effect if &#39;authorizationRequired&#39; is false or charger is not authorized
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsStopChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsStopChargingPostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Stop Charging Stops a charger with an active authorization from delivering power and revokes authorization. Will have no  effect if &#39;authorizationRequired&#39; is false or charger is not authorized
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsStopChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsStopChargingPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsStopChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/stop_charging", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsStopChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Toggle Charging Send charging command (Start/Stop or Pause/Resume). For chargers requiring online authorization, start/stop  commands are used. &lt;br /&gt;For chargers without online authorization,  pause/resume commands are used.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsToggleChargingPost(string id, int operationIndex = 0)
        {
            ApiChargersIdCommandsToggleChargingPostWithHttpInfo(id);
        }

        /// <summary>
        /// Toggle Charging Send charging command (Start/Stop or Pause/Resume). For chargers requiring online authorization, start/stop  commands are used. &lt;br /&gt;For chargers without online authorization,  pause/resume commands are used.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsToggleChargingPostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsToggleChargingPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsToggleChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/toggle_charging", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsToggleChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Toggle Charging Send charging command (Start/Stop or Pause/Resume). For chargers requiring online authorization, start/stop  commands are used. &lt;br /&gt;For chargers without online authorization,  pause/resume commands are used.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsToggleChargingPostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsToggleChargingPostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Toggle Charging Send charging command (Start/Stop or Pause/Resume). For chargers requiring online authorization, start/stop  commands are used. &lt;br /&gt;For chargers without online authorization,  pause/resume commands are used.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsToggleChargingPostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsToggleChargingPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsToggleChargingPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/toggle_charging", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsToggleChargingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Firmware Updates firmware to latest public release
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdCommandsUpdateFirmwarePost(string id, int operationIndex = 0)
        {
            ApiChargersIdCommandsUpdateFirmwarePostWithHttpInfo(id);
        }

        /// <summary>
        /// Update Firmware Updates firmware to latest public release
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdCommandsUpdateFirmwarePostWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsUpdateFirmwarePost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsUpdateFirmwarePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/commands/update_firmware", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsUpdateFirmwarePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Firmware Updates firmware to latest public release
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdCommandsUpdateFirmwarePostAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdCommandsUpdateFirmwarePostWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Firmware Updates firmware to latest public release
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdCommandsUpdateFirmwarePostWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommandsUpdateFirmwarePost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommandsUpdateFirmwarePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/commands/update_firmware", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommandsUpdateFirmwarePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comments Get user comments for a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerCommentDTO&gt;</returns>
        public List<EaseeCoreDTOsChargerCommentDTO> ApiChargersIdCommentsGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerCommentDTO>> localVarResponse = ApiChargersIdCommentsGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Comments Get user comments for a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerCommentDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerCommentDTO>> ApiChargersIdCommentsGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommentsGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsChargerCommentDTO>>("/api/chargers/{id}/comments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comments Get user comments for a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerCommentDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerCommentDTO>> ApiChargersIdCommentsGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerCommentDTO>> localVarResponse = await ApiChargersIdCommentsGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Comments Get user comments for a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerCommentDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerCommentDTO>>> ApiChargersIdCommentsGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdCommentsGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdCommentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsChargerCommentDTO>>("/api/chargers/{id}/comments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdCommentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Configuration Get charger configuration.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerChargerConfigurationDTO</returns>
        public EaseeCoreDTOsChargerChargerConfigurationDTO ApiChargersIdConfigGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerConfigurationDTO> localVarResponse = ApiChargersIdConfigGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Configuration Get charger configuration.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerChargerConfigurationDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerConfigurationDTO> ApiChargersIdConfigGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdConfigGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdConfigGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsChargerChargerConfigurationDTO>("/api/chargers/{id}/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdConfigGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Configuration Get charger configuration.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerChargerConfigurationDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsChargerChargerConfigurationDTO> ApiChargersIdConfigGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerConfigurationDTO> localVarResponse = await ApiChargersIdConfigGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Configuration Get charger configuration.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerChargerConfigurationDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerConfigurationDTO>> ApiChargersIdConfigGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdConfigGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdConfigGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsChargerChargerConfigurationDTO>("/api/chargers/{id}/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdConfigGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Details Get charger details.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerChargerInfoDTO</returns>
        public EaseeCoreDTOsChargerChargerInfoDTO ApiChargersIdDetailsGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerInfoDTO> localVarResponse = ApiChargersIdDetailsGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Details Get charger details.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerChargerInfoDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerInfoDTO> ApiChargersIdDetailsGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdDetailsGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsChargerChargerInfoDTO>("/api/chargers/{id}/details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Details Get charger details.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerChargerInfoDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsChargerChargerInfoDTO> ApiChargersIdDetailsGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerInfoDTO> localVarResponse = await ApiChargersIdDetailsGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Details Get charger details.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerChargerInfoDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerInfoDTO>> ApiChargersIdDetailsGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdDetailsGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsChargerChargerInfoDTO>("/api/chargers/{id}/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Errors Get errors for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        public List<MasterloopCoreTypesObservationsObservation> ApiChargersIdErrorsFromToGet(string id, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<MasterloopCoreTypesObservationsObservation>> localVarResponse = ApiChargersIdErrorsFromToGetWithHttpInfo(id, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Errors Get errors for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<MasterloopCoreTypesObservationsObservation>> ApiChargersIdErrorsFromToGetWithHttpInfo(string id, DateTime from, DateTime to, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdErrorsFromToGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdErrorsFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MasterloopCoreTypesObservationsObservation>>("/api/chargers/{id}/errors/{from}/{to}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdErrorsFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Errors Get errors for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        public async System.Threading.Tasks.Task<List<MasterloopCoreTypesObservationsObservation>> ApiChargersIdErrorsFromToGetAsync(string id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<MasterloopCoreTypesObservationsObservation>> localVarResponse = await ApiChargersIdErrorsFromToGetWithHttpInfoAsync(id, from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Errors Get errors for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MasterloopCoreTypesObservationsObservation&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<MasterloopCoreTypesObservationsObservation>>> ApiChargersIdErrorsFromToGetWithHttpInfoAsync(string id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdErrorsFromToGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdErrorsFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MasterloopCoreTypesObservationsObservation>>("/api/chargers/{id}/errors/{from}/{to}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdErrorsFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Get a specified charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerChargerDTO</returns>
        public EaseeCoreDTOsChargerChargerDTO ApiChargersIdGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerDTO> localVarResponse = ApiChargersIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Get a specified charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerChargerDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerDTO> ApiChargersIdGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsChargerChargerDTO>("/api/chargers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Charger Get a specified charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerChargerDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsChargerChargerDTO> ApiChargersIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerDTO> localVarResponse = await ApiChargersIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Charger Get a specified charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerChargerDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerDTO>> ApiChargersIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsChargerChargerDTO>("/api/chargers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log Events Get log events in a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="logType">Log type</param>
        /// <param name="from">From timestamp (ISO8601 string)</param>
        /// <param name="to">To timestamp (ISO8601 string)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsChargerChargerLogEventDTO&gt;</returns>
        public List<EaseeCoreDTOsChargerChargerLogEventDTO> ApiChargersIdLogEventsLogTypeFromToGet(string id, EaseeCoreEnumsLogType logType, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargerLogEventDTO>> localVarResponse = ApiChargersIdLogEventsLogTypeFromToGetWithHttpInfo(id, logType, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Log Events Get log events in a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="logType">Log type</param>
        /// <param name="from">From timestamp (ISO8601 string)</param>
        /// <param name="to">To timestamp (ISO8601 string)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsChargerChargerLogEventDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargerLogEventDTO>> ApiChargersIdLogEventsLogTypeFromToGetWithHttpInfo(string id, EaseeCoreEnumsLogType logType, DateTime from, DateTime to, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdLogEventsLogTypeFromToGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("logType", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(logType)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdLogEventsLogTypeFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsChargerChargerLogEventDTO>>("/api/chargers/{id}/log_events/{logType}/{from}/{to}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdLogEventsLogTypeFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log Events Get log events in a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="logType">Log type</param>
        /// <param name="from">From timestamp (ISO8601 string)</param>
        /// <param name="to">To timestamp (ISO8601 string)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsChargerChargerLogEventDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsChargerChargerLogEventDTO>> ApiChargersIdLogEventsLogTypeFromToGetAsync(string id, EaseeCoreEnumsLogType logType, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargerLogEventDTO>> localVarResponse = await ApiChargersIdLogEventsLogTypeFromToGetWithHttpInfoAsync(id, logType, from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Log Events Get log events in a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="logType">Log type</param>
        /// <param name="from">From timestamp (ISO8601 string)</param>
        /// <param name="to">To timestamp (ISO8601 string)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsChargerChargerLogEventDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsChargerChargerLogEventDTO>>> ApiChargersIdLogEventsLogTypeFromToGetWithHttpInfoAsync(string id, EaseeCoreEnumsLogType logType, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdLogEventsLogTypeFromToGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("logType", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(logType)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdLogEventsLogTypeFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsChargerChargerLogEventDTO>>("/api/chargers/{id}/log_events/{logType}/{from}/{to}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdLogEventsLogTypeFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Observations Get observations for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="observationId">Observation ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        public List<MasterloopCoreTypesObservationsObservation> ApiChargersIdObservationsObservationIdFromToGet(string id, int observationId, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<MasterloopCoreTypesObservationsObservation>> localVarResponse = ApiChargersIdObservationsObservationIdFromToGetWithHttpInfo(id, observationId, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Observations Get observations for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="observationId">Observation ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<MasterloopCoreTypesObservationsObservation>> ApiChargersIdObservationsObservationIdFromToGetWithHttpInfo(string id, int observationId, DateTime from, DateTime to, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdObservationsObservationIdFromToGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("observationId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(observationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdObservationsObservationIdFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MasterloopCoreTypesObservationsObservation>>("/api/chargers/{id}/observations/{observationId}/{from}/{to}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdObservationsObservationIdFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Observations Get observations for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="observationId">Observation ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MasterloopCoreTypesObservationsObservation&gt;</returns>
        public async System.Threading.Tasks.Task<List<MasterloopCoreTypesObservationsObservation>> ApiChargersIdObservationsObservationIdFromToGetAsync(string id, int observationId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<MasterloopCoreTypesObservationsObservation>> localVarResponse = await ApiChargersIdObservationsObservationIdFromToGetWithHttpInfoAsync(id, observationId, from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Observations Get observations for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="observationId">Observation ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MasterloopCoreTypesObservationsObservation&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<MasterloopCoreTypesObservationsObservation>>> ApiChargersIdObservationsObservationIdFromToGetWithHttpInfoAsync(string id, int observationId, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdObservationsObservationIdFromToGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("observationId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(observationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdObservationsObservationIdFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MasterloopCoreTypesObservationsObservation>>("/api/chargers/{id}/observations/{observationId}/{from}/{to}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdObservationsObservationIdFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pair Pair a charger to an account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdPairPost(string id, string? pinCode = default(string?), int operationIndex = 0)
        {
            ApiChargersIdPairPostWithHttpInfo(id, pinCode);
        }

        /// <summary>
        /// Pair Pair a charger to an account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdPairPostWithHttpInfo(string id, string? pinCode = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPairPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (pinCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "pinCode", pinCode));
            }

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPairPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/pair", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPairPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pair Pair a charger to an account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdPairPostAsync(string id, string? pinCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdPairPostWithHttpInfoAsync(id, pinCode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Pair Pair a charger to an account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdPairPostWithHttpInfoAsync(string id, string? pinCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPairPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (pinCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "pinCode", pinCode));
            }

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPairPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/pair", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPairPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partner Get partner of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeAccessControlModelsPartnerDetailedDTO</returns>
        public EaseeAccessControlModelsPartnerDetailedDTO ApiChargersIdPartnersGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeAccessControlModelsPartnerDetailedDTO> localVarResponse = ApiChargersIdPartnersGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Partner Get partner of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeAccessControlModelsPartnerDetailedDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeAccessControlModelsPartnerDetailedDTO> ApiChargersIdPartnersGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPartnersGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPartnersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeAccessControlModelsPartnerDetailedDTO>("/api/chargers/{id}/partners", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPartnersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Partner Get partner of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeAccessControlModelsPartnerDetailedDTO</returns>
        public async System.Threading.Tasks.Task<EaseeAccessControlModelsPartnerDetailedDTO> ApiChargersIdPartnersGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeAccessControlModelsPartnerDetailedDTO> localVarResponse = await ApiChargersIdPartnersGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Partner Get partner of charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeAccessControlModelsPartnerDetailedDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeAccessControlModelsPartnerDetailedDTO>> ApiChargersIdPartnersGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPartnersGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPartnersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeAccessControlModelsPartnerDetailedDTO>("/api/chargers/{id}/partners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPartnersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Partner Remove partner from a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="partnerId">Partner ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdPartnersPartnerIdDelete(string id, int partnerId, int operationIndex = 0)
        {
            ApiChargersIdPartnersPartnerIdDeleteWithHttpInfo(id, partnerId);
        }

        /// <summary>
        /// Remove Partner Remove partner from a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="partnerId">Partner ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdPartnersPartnerIdDeleteWithHttpInfo(string id, int partnerId, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPartnersPartnerIdDelete");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("partnerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(partnerId)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPartnersPartnerIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/chargers/{id}/partners/{partnerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPartnersPartnerIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Partner Remove partner from a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="partnerId">Partner ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdPartnersPartnerIdDeleteAsync(string id, int partnerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdPartnersPartnerIdDeleteWithHttpInfoAsync(id, partnerId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Partner Remove partner from a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="partnerId">Partner ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdPartnersPartnerIdDeleteWithHttpInfoAsync(string id, int partnerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPartnersPartnerIdDelete");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("partnerId", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(partnerId)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPartnersPartnerIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/chargers/{id}/partners/{partnerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPartnersPartnerIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Partner Set partner of a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsPairChargerPartnerDTO">Partner ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdPartnersPost(string id, EaseeAccessControlModelsPairChargerPartnerDTO? easeeAccessControlModelsPairChargerPartnerDTO = default(EaseeAccessControlModelsPairChargerPartnerDTO?), int operationIndex = 0)
        {
            ApiChargersIdPartnersPostWithHttpInfo(id, easeeAccessControlModelsPairChargerPartnerDTO);
        }

        /// <summary>
        /// Set Partner Set partner of a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsPairChargerPartnerDTO">Partner ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdPartnersPostWithHttpInfo(string id, EaseeAccessControlModelsPairChargerPartnerDTO? easeeAccessControlModelsPairChargerPartnerDTO = default(EaseeAccessControlModelsPairChargerPartnerDTO?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPartnersPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeAccessControlModelsPairChargerPartnerDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPartnersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/partners", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPartnersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Partner Set partner of a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsPairChargerPartnerDTO">Partner ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdPartnersPostAsync(string id, EaseeAccessControlModelsPairChargerPartnerDTO? easeeAccessControlModelsPairChargerPartnerDTO = default(EaseeAccessControlModelsPairChargerPartnerDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdPartnersPostWithHttpInfoAsync(id, easeeAccessControlModelsPairChargerPartnerDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Partner Set partner of a charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsPairChargerPartnerDTO">Partner ID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdPartnersPostWithHttpInfoAsync(string id, EaseeAccessControlModelsPairChargerPartnerDTO? easeeAccessControlModelsPairChargerPartnerDTO = default(EaseeAccessControlModelsPairChargerPartnerDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPartnersPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeAccessControlModelsPairChargerPartnerDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPartnersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/partners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPartnersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Charger Access Remove permission from the charger for a given phone number.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="phoneNo">Phone number (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdPermissionDelete(string id, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0)
        {
            ApiChargersIdPermissionDeleteWithHttpInfo(id, phoneNo, email);
        }

        /// <summary>
        /// Remove Charger Access Remove permission from the charger for a given phone number.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="phoneNo">Phone number (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdPermissionDeleteWithHttpInfo(string id, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPermissionDelete");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (phoneNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "phone_no", phoneNo));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPermissionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/chargers/{id}/permission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPermissionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Charger Access Remove permission from the charger for a given phone number.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="phoneNo">Phone number (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdPermissionDeleteAsync(string id, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdPermissionDeleteWithHttpInfoAsync(id, phoneNo, email, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Charger Access Remove permission from the charger for a given phone number.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="phoneNo">Phone number (optional)</param>
        /// <param name="email">Email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdPermissionDeleteWithHttpInfoAsync(string id, string? phoneNo = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPermissionDelete");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (phoneNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "phone_no", phoneNo));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPermissionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/chargers/{id}/permission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPermissionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permissions Get permissions to the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeAccessControlDomainDTOUserChargerDTO&gt;</returns>
        public List<EaseeAccessControlDomainDTOUserChargerDTO> ApiChargersIdPermissionGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOUserChargerDTO>> localVarResponse = ApiChargersIdPermissionGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Permissions Get permissions to the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeAccessControlDomainDTOUserChargerDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOUserChargerDTO>> ApiChargersIdPermissionGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPermissionGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPermissionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeAccessControlDomainDTOUserChargerDTO>>("/api/chargers/{id}/permission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPermissionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permissions Get permissions to the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeAccessControlDomainDTOUserChargerDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeAccessControlDomainDTOUserChargerDTO>> ApiChargersIdPermissionGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOUserChargerDTO>> localVarResponse = await ApiChargersIdPermissionGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Permissions Get permissions to the charger.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeAccessControlDomainDTOUserChargerDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeAccessControlDomainDTOUserChargerDTO>>> ApiChargersIdPermissionGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPermissionGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPermissionGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeAccessControlDomainDTOUserChargerDTO>>("/api/chargers/{id}/permission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPermissionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Grant Charger Access Grant permissions to the charger for a given phone number.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsChargerPermissionRequestDTO">User phone number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdPermissionPost(string id, EaseeAccessControlModelsChargerPermissionRequestDTO? easeeAccessControlModelsChargerPermissionRequestDTO = default(EaseeAccessControlModelsChargerPermissionRequestDTO?), int operationIndex = 0)
        {
            ApiChargersIdPermissionPostWithHttpInfo(id, easeeAccessControlModelsChargerPermissionRequestDTO);
        }

        /// <summary>
        /// Grant Charger Access Grant permissions to the charger for a given phone number.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsChargerPermissionRequestDTO">User phone number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdPermissionPostWithHttpInfo(string id, EaseeAccessControlModelsChargerPermissionRequestDTO? easeeAccessControlModelsChargerPermissionRequestDTO = default(EaseeAccessControlModelsChargerPermissionRequestDTO?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPermissionPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeAccessControlModelsChargerPermissionRequestDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPermissionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/permission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPermissionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Grant Charger Access Grant permissions to the charger for a given phone number.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsChargerPermissionRequestDTO">User phone number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdPermissionPostAsync(string id, EaseeAccessControlModelsChargerPermissionRequestDTO? easeeAccessControlModelsChargerPermissionRequestDTO = default(EaseeAccessControlModelsChargerPermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdPermissionPostWithHttpInfoAsync(id, easeeAccessControlModelsChargerPermissionRequestDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Grant Charger Access Grant permissions to the charger for a given phone number.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeAccessControlModelsChargerPermissionRequestDTO">User phone number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdPermissionPostWithHttpInfoAsync(string id, EaseeAccessControlModelsChargerPermissionRequestDTO? easeeAccessControlModelsChargerPermissionRequestDTO = default(EaseeAccessControlModelsChargerPermissionRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdPermissionPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeAccessControlModelsChargerPermissionRequestDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdPermissionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/permission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdPermissionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Latest Charging Session Get last updated charging session.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        public EaseeCoreDTOsChargerUsageStatisticsDTO ApiChargersIdSessionsLatestGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO> localVarResponse = ApiChargersIdSessionsLatestGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Latest Charging Session Get last updated charging session.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO> ApiChargersIdSessionsLatestGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdSessionsLatestGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdSessionsLatestGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsChargerUsageStatisticsDTO>("/api/chargers/{id}/sessions/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdSessionsLatestGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Latest Charging Session Get last updated charging session.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsChargerUsageStatisticsDTO> ApiChargersIdSessionsLatestGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO> localVarResponse = await ApiChargersIdSessionsLatestGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Latest Charging Session Get last updated charging session.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerUsageStatisticsDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO>> ApiChargersIdSessionsLatestGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdSessionsLatestGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdSessionsLatestGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsChargerUsageStatisticsDTO>("/api/chargers/{id}/sessions/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdSessionsLatestGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ongoing Charging Session Get current state of ongoing charging session.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        public EaseeCoreDTOsChargerUsageStatisticsDTO ApiChargersIdSessionsOngoingGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO> localVarResponse = ApiChargersIdSessionsOngoingGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ongoing Charging Session Get current state of ongoing charging session.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO> ApiChargersIdSessionsOngoingGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdSessionsOngoingGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdSessionsOngoingGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsChargerUsageStatisticsDTO>("/api/chargers/{id}/sessions/ongoing", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdSessionsOngoingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ongoing Charging Session Get current state of ongoing charging session.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerUsageStatisticsDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsChargerUsageStatisticsDTO> ApiChargersIdSessionsOngoingGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO> localVarResponse = await ApiChargersIdSessionsOngoingGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ongoing Charging Session Get current state of ongoing charging session.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerUsageStatisticsDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerUsageStatisticsDTO>> ApiChargersIdSessionsOngoingGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdSessionsOngoingGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdSessionsOngoingGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsChargerUsageStatisticsDTO>("/api/chargers/{id}/sessions/ongoing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdSessionsOngoingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Charger Settings Charger settings to update. Please only specify keys you want to change. Endpoint handles partial JSON objects  and will give a 400 response if it does not understand the request.&lt;br /&gt;Will only forward commands to device if  new value !&#x3D; old value &lt;br /&gt; Rate limited at max 20 requests per minute.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargerSettingDTO">Charger settings to set</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdSettingsPost(string id, EaseeCoreDTOsChargerChargerSettingDTO easeeCoreDTOsChargerChargerSettingDTO, int operationIndex = 0)
        {
            ApiChargersIdSettingsPostWithHttpInfo(id, easeeCoreDTOsChargerChargerSettingDTO);
        }

        /// <summary>
        /// Change Charger Settings Charger settings to update. Please only specify keys you want to change. Endpoint handles partial JSON objects  and will give a 400 response if it does not understand the request.&lt;br /&gt;Will only forward commands to device if  new value !&#x3D; old value &lt;br /&gt; Rate limited at max 20 requests per minute.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargerSettingDTO">Charger settings to set</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdSettingsPostWithHttpInfo(string id, EaseeCoreDTOsChargerChargerSettingDTO easeeCoreDTOsChargerChargerSettingDTO, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdSettingsPost");
            }

            // verify the required parameter 'easeeCoreDTOsChargerChargerSettingDTO' is set
            if (easeeCoreDTOsChargerChargerSettingDTO == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'easeeCoreDTOsChargerChargerSettingDTO' when calling ChargerApi->ApiChargersIdSettingsPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerChargerSettingDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdSettingsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdSettingsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Charger Settings Charger settings to update. Please only specify keys you want to change. Endpoint handles partial JSON objects  and will give a 400 response if it does not understand the request.&lt;br /&gt;Will only forward commands to device if  new value !&#x3D; old value &lt;br /&gt; Rate limited at max 20 requests per minute.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargerSettingDTO">Charger settings to set</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdSettingsPostAsync(string id, EaseeCoreDTOsChargerChargerSettingDTO easeeCoreDTOsChargerChargerSettingDTO, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdSettingsPostWithHttpInfoAsync(id, easeeCoreDTOsChargerChargerSettingDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Change Charger Settings Charger settings to update. Please only specify keys you want to change. Endpoint handles partial JSON objects  and will give a 400 response if it does not understand the request.&lt;br /&gt;Will only forward commands to device if  new value !&#x3D; old value &lt;br /&gt; Rate limited at max 20 requests per minute.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsChargerChargerSettingDTO">Charger settings to set</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdSettingsPostWithHttpInfoAsync(string id, EaseeCoreDTOsChargerChargerSettingDTO easeeCoreDTOsChargerChargerSettingDTO, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdSettingsPost");
            }

            // verify the required parameter 'easeeCoreDTOsChargerChargerSettingDTO' is set
            if (easeeCoreDTOsChargerChargerSettingDTO == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'easeeCoreDTOsChargerChargerSettingDTO' when calling ChargerApi->ApiChargersIdSettingsPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsChargerChargerSettingDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdSettingsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdSettingsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Site Get charger site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeSiteStructureDomainPortsSiteDTO</returns>
        public EaseeSiteStructureDomainPortsSiteDTO ApiChargersIdSiteGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeSiteStructureDomainPortsSiteDTO> localVarResponse = ApiChargersIdSiteGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Site Get charger site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeSiteStructureDomainPortsSiteDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeSiteStructureDomainPortsSiteDTO> ApiChargersIdSiteGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdSiteGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdSiteGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeSiteStructureDomainPortsSiteDTO>("/api/chargers/{id}/site", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdSiteGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Site Get charger site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeSiteStructureDomainPortsSiteDTO</returns>
        public async System.Threading.Tasks.Task<EaseeSiteStructureDomainPortsSiteDTO> ApiChargersIdSiteGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeSiteStructureDomainPortsSiteDTO> localVarResponse = await ApiChargersIdSiteGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Site Get charger site.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeSiteStructureDomainPortsSiteDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeSiteStructureDomainPortsSiteDTO>> ApiChargersIdSiteGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdSiteGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdSiteGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeSiteStructureDomainPortsSiteDTO>("/api/chargers/{id}/site", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdSiteGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// State Get charger state.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsChargerChargerStateDTO</returns>
        public EaseeCoreDTOsChargerChargerStateDTO ApiChargersIdStateGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerStateDTO> localVarResponse = ApiChargersIdStateGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// State Get charger state.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsChargerChargerStateDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerStateDTO> ApiChargersIdStateGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdStateGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdStateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsChargerChargerStateDTO>("/api/chargers/{id}/state", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdStateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// State Get charger state.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsChargerChargerStateDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsChargerChargerStateDTO> ApiChargersIdStateGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerStateDTO> localVarResponse = await ApiChargersIdStateGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// State Get charger state.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsChargerChargerStateDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsChargerChargerStateDTO>> ApiChargersIdStateGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdStateGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdStateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsChargerChargerStateDTO>("/api/chargers/{id}/state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdStateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpair Unpair a charger from an account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdUnpairPost(string id, string? pinCode = default(string?), int operationIndex = 0)
        {
            ApiChargersIdUnpairPostWithHttpInfo(id, pinCode);
        }

        /// <summary>
        /// Unpair Unpair a charger from an account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdUnpairPostWithHttpInfo(string id, string? pinCode = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdUnpairPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (pinCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "pinCode", pinCode));
            }

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdUnpairPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/unpair", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdUnpairPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpair Unpair a charger from an account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdUnpairPostAsync(string id, string? pinCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdUnpairPostWithHttpInfoAsync(id, pinCode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unpair Unpair a charger from an account.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="pinCode">Charger PIN (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdUnpairPostWithHttpInfoAsync(string id, string? pinCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdUnpairPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (pinCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.EaseeClient.Client.ClientUtils.ParameterToMultiMap("", "pinCode", pinCode));
            }

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdUnpairPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/unpair", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdUnpairPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Power Usage Get hourly power usage for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EaseeCoreDTOsSessionAggregatedUsageDTO&gt;</returns>
        public List<EaseeCoreDTOsSessionAggregatedUsageDTO> ApiChargersIdUsageHourlyFromToGet(string id, DateTime from, DateTime to, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionAggregatedUsageDTO>> localVarResponse = ApiChargersIdUsageHourlyFromToGetWithHttpInfo(id, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Power Usage Get hourly power usage for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EaseeCoreDTOsSessionAggregatedUsageDTO&gt;</returns>
        public kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionAggregatedUsageDTO>> ApiChargersIdUsageHourlyFromToGetWithHttpInfo(string id, DateTime from, DateTime to, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdUsageHourlyFromToGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdUsageHourlyFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EaseeCoreDTOsSessionAggregatedUsageDTO>>("/api/chargers/{id}/usage/hourly/{from}/{to}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdUsageHourlyFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Power Usage Get hourly power usage for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EaseeCoreDTOsSessionAggregatedUsageDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EaseeCoreDTOsSessionAggregatedUsageDTO>> ApiChargersIdUsageHourlyFromToGetAsync(string id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionAggregatedUsageDTO>> localVarResponse = await ApiChargersIdUsageHourlyFromToGetWithHttpInfoAsync(id, from, to, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Power Usage Get hourly power usage for a given period.
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="from">From (ISO8601 datetime)</param>
        /// <param name="to">To (ISO8601 datetime)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EaseeCoreDTOsSessionAggregatedUsageDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<List<EaseeCoreDTOsSessionAggregatedUsageDTO>>> ApiChargersIdUsageHourlyFromToGetWithHttpInfoAsync(string id, DateTime from, DateTime to, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdUsageHourlyFromToGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("from", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(from)); // path parameter
            localVarRequestOptions.PathParameters.Add("to", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(to)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdUsageHourlyFromToGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EaseeCoreDTOsSessionAggregatedUsageDTO>>("/api/chargers/{id}/usage/hourly/{from}/{to}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdUsageHourlyFromToGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdWeeklyChargePlanDelete(string id, int operationIndex = 0)
        {
            ApiChargersIdWeeklyChargePlanDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Remove Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdWeeklyChargePlanDeleteWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdWeeklyChargePlanDelete");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdWeeklyChargePlanDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/chargers/{id}/weekly_charge_plan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdWeeklyChargePlanDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdWeeklyChargePlanDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdWeeklyChargePlanDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdWeeklyChargePlanDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdWeeklyChargePlanDelete");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdWeeklyChargePlanDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/chargers/{id}/weekly_charge_plan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdWeeklyChargePlanDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO</returns>
        public EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO ApiChargersIdWeeklyChargePlanGet(string id, int operationIndex = 0)
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO> localVarResponse = ApiChargersIdWeeklyChargePlanGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO</returns>
        public kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO> ApiChargersIdWeeklyChargePlanGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdWeeklyChargePlanGet");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdWeeklyChargePlanGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO>("/api/chargers/{id}/weekly_charge_plan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdWeeklyChargePlanGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO</returns>
        public async System.Threading.Tasks.Task<EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO> ApiChargersIdWeeklyChargePlanGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO> localVarResponse = await ApiChargersIdWeeklyChargePlanGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO)</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO>> ApiChargersIdWeeklyChargePlanGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdWeeklyChargePlanGet");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdWeeklyChargePlanGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EaseeCoreDTOsScheduleWeeklyChargeScheduleResponseDTO>("/api/chargers/{id}/weekly_charge_plan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdWeeklyChargePlanGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO">Weekly charge plan details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiChargersIdWeeklyChargePlanPost(string id, EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO? easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO = default(EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO?), int operationIndex = 0)
        {
            ApiChargersIdWeeklyChargePlanPostWithHttpInfo(id, easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO);
        }

        /// <summary>
        /// Set Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO">Weekly charge plan details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.EaseeClient.Client.ApiResponse<Object> ApiChargersIdWeeklyChargePlanPostWithHttpInfo(string id, EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO? easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO = default(EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdWeeklyChargePlanPost");
            }

            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdWeeklyChargePlanPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chargers/{id}/weekly_charge_plan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdWeeklyChargePlanPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO">Weekly charge plan details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiChargersIdWeeklyChargePlanPostAsync(string id, EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO? easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO = default(EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiChargersIdWeeklyChargePlanPostWithHttpInfoAsync(id, easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set Weekly Charge Plan 
        /// </summary>
        /// <exception cref="kern.services.EaseeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Charger ID</param>
        /// <param name="easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO">Weekly charge plan details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.EaseeClient.Client.ApiResponse<Object>> ApiChargersIdWeeklyChargePlanPostWithHttpInfoAsync(string id, EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO? easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO = default(EaseeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new kern.services.EaseeClient.Client.ApiException(400, "Missing required parameter 'id' when calling ChargerApi->ApiChargersIdWeeklyChargePlanPost");
            }


            kern.services.EaseeClient.Client.RequestOptions localVarRequestOptions = new kern.services.EaseeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.EaseeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", kern.services.EaseeClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = easeeCoreDTOsScheduleWeeklyChargeScheduleRequestDTO;

            localVarRequestOptions.Operation = "ChargerApi.ApiChargersIdWeeklyChargePlanPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chargers/{id}/weekly_charge_plan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChargersIdWeeklyChargePlanPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
