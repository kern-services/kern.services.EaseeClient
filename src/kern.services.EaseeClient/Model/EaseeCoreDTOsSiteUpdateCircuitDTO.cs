/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsSiteUpdateCircuitDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Site.UpdateCircuitDTO")]
    public partial class EaseeCoreDTOsSiteUpdateCircuitDTO : IEquatable<EaseeCoreDTOsSiteUpdateCircuitDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsSiteUpdateCircuitDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="siteId">siteId.</param>
        /// <param name="circuitPanelId">circuitPanelId.</param>
        /// <param name="panelName">panelName.</param>
        /// <param name="ratedCurrent">ratedCurrent.</param>
        /// <param name="backplates">backplates.</param>
        public EaseeCoreDTOsSiteUpdateCircuitDTO(int id = default(int), int siteId = default(int), int circuitPanelId = default(int), string panelName = default(string), double ratedCurrent = default(double), List<EaseeCoreDTOsChargerBackPlateDTO> backplates = default(List<EaseeCoreDTOsChargerBackPlateDTO>))
        {
            this.Id = id;
            this.SiteId = siteId;
            this.CircuitPanelId = circuitPanelId;
            this.PanelName = panelName;
            this.RatedCurrent = ratedCurrent;
            this.Backplates = backplates;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets SiteId
        /// </summary>
        [DataMember(Name = "siteId", EmitDefaultValue = false)]
        public int SiteId { get; set; }

        /// <summary>
        /// Gets or Sets CircuitPanelId
        /// </summary>
        [DataMember(Name = "circuitPanelId", EmitDefaultValue = false)]
        public int CircuitPanelId { get; set; }

        /// <summary>
        /// Gets or Sets PanelName
        /// </summary>
        [DataMember(Name = "panelName", EmitDefaultValue = true)]
        public string PanelName { get; set; }

        /// <summary>
        /// Gets or Sets RatedCurrent
        /// </summary>
        [DataMember(Name = "ratedCurrent", EmitDefaultValue = false)]
        public double RatedCurrent { get; set; }

        /// <summary>
        /// Gets or Sets Backplates
        /// </summary>
        [DataMember(Name = "backplates", EmitDefaultValue = true)]
        public List<EaseeCoreDTOsChargerBackPlateDTO> Backplates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsSiteUpdateCircuitDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  CircuitPanelId: ").Append(CircuitPanelId).Append("\n");
            sb.Append("  PanelName: ").Append(PanelName).Append("\n");
            sb.Append("  RatedCurrent: ").Append(RatedCurrent).Append("\n");
            sb.Append("  Backplates: ").Append(Backplates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsSiteUpdateCircuitDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsSiteUpdateCircuitDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsSiteUpdateCircuitDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsSiteUpdateCircuitDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.SiteId == input.SiteId ||
                    this.SiteId.Equals(input.SiteId)
                ) && 
                (
                    this.CircuitPanelId == input.CircuitPanelId ||
                    this.CircuitPanelId.Equals(input.CircuitPanelId)
                ) && 
                (
                    this.PanelName == input.PanelName ||
                    (this.PanelName != null &&
                    this.PanelName.Equals(input.PanelName))
                ) && 
                (
                    this.RatedCurrent == input.RatedCurrent ||
                    this.RatedCurrent.Equals(input.RatedCurrent)
                ) && 
                (
                    this.Backplates == input.Backplates ||
                    this.Backplates != null &&
                    input.Backplates != null &&
                    this.Backplates.SequenceEqual(input.Backplates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.SiteId.GetHashCode();
                hashCode = (hashCode * 59) + this.CircuitPanelId.GetHashCode();
                if (this.PanelName != null)
                {
                    hashCode = (hashCode * 59) + this.PanelName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RatedCurrent.GetHashCode();
                if (this.Backplates != null)
                {
                    hashCode = (hashCode * 59) + this.Backplates.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
