/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsChargerWifiConfigDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Charger.WifiConfigDTO")]
    public partial class EaseeCoreDTOsChargerWifiConfigDTO : IEquatable<EaseeCoreDTOsChargerWifiConfigDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsChargerWifiConfigDTO" /> class.
        /// </summary>
        /// <param name="ssid">ssid.</param>
        /// <param name="password">password.</param>
        public EaseeCoreDTOsChargerWifiConfigDTO(string ssid = default(string), string password = default(string))
        {
            this.Ssid = ssid;
            this.Password = password;
        }

        /// <summary>
        /// Gets or Sets Ssid
        /// </summary>
        [DataMember(Name = "ssid", EmitDefaultValue = true)]
        public string Ssid { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsChargerWifiConfigDTO {\n");
            sb.Append("  Ssid: ").Append(Ssid).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsChargerWifiConfigDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsChargerWifiConfigDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsChargerWifiConfigDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsChargerWifiConfigDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ssid == input.Ssid ||
                    (this.Ssid != null &&
                    this.Ssid.Equals(input.Ssid))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ssid != null)
                {
                    hashCode = (hashCode * 59) + this.Ssid.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
