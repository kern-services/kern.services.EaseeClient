/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsChargerChargerStateDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Charger.ChargerStateDTO")]
    public partial class EaseeCoreDTOsChargerChargerStateDTO : IEquatable<EaseeCoreDTOsChargerChargerStateDTO>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ChargerOpMode
        /// </summary>
        [DataMember(Name = "chargerOpMode", EmitDefaultValue = false)]
        public EaseeCoreEnumsOpModeType? ChargerOpMode { get; set; }

        /// <summary>
        /// Gets or Sets OutputPhase
        /// </summary>
        [DataMember(Name = "outputPhase", EmitDefaultValue = false)]
        public EaseeCoreEnumsOutputPhaseType? OutputPhase { get; set; }

        /// <summary>
        /// Gets or Sets LedMode
        /// </summary>
        [DataMember(Name = "ledMode", EmitDefaultValue = false)]
        public EaseeCoreEnumsChargerLEDModeType? LedMode { get; set; }

        /// <summary>
        /// Gets or Sets ReasonForNoCurrent
        /// </summary>
        [DataMember(Name = "reasonForNoCurrent", EmitDefaultValue = false)]
        public EaseeCoreEnumsReasonForNoCurrent? ReasonForNoCurrent { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsChargerChargerStateDTO" /> class.
        /// </summary>
        /// <param name="smartCharging">smartCharging.</param>
        /// <param name="cableLocked">cableLocked.</param>
        /// <param name="chargerOpMode">chargerOpMode.</param>
        /// <param name="totalPower">totalPower.</param>
        /// <param name="sessionEnergy">sessionEnergy.</param>
        /// <param name="energyPerHour">energyPerHour.</param>
        /// <param name="wiFiRSSI">wiFiRSSI.</param>
        /// <param name="cellRSSI">cellRSSI.</param>
        /// <param name="localRSSI">localRSSI.</param>
        /// <param name="outputPhase">outputPhase.</param>
        /// <param name="dynamicCircuitCurrentP1">dynamicCircuitCurrentP1.</param>
        /// <param name="dynamicCircuitCurrentP2">dynamicCircuitCurrentP2.</param>
        /// <param name="dynamicCircuitCurrentP3">dynamicCircuitCurrentP3.</param>
        /// <param name="latestPulse">latestPulse.</param>
        /// <param name="chargerFirmware">chargerFirmware.</param>
        /// <param name="latestFirmware">latestFirmware.</param>
        /// <param name="voltage">voltage.</param>
        /// <param name="chargerRAT">chargerRAT.</param>
        /// <param name="lockCablePermanently">lockCablePermanently.</param>
        /// <param name="inCurrentT2">inCurrentT2.</param>
        /// <param name="inCurrentT3">inCurrentT3.</param>
        /// <param name="inCurrentT4">inCurrentT4.</param>
        /// <param name="inCurrentT5">inCurrentT5.</param>
        /// <param name="outputCurrent">outputCurrent.</param>
        /// <param name="isOnline">isOnline.</param>
        /// <param name="inVoltageT1T2">inVoltageT1T2.</param>
        /// <param name="inVoltageT1T3">inVoltageT1T3.</param>
        /// <param name="inVoltageT1T4">inVoltageT1T4.</param>
        /// <param name="inVoltageT1T5">inVoltageT1T5.</param>
        /// <param name="inVoltageT2T3">inVoltageT2T3.</param>
        /// <param name="inVoltageT2T4">inVoltageT2T4.</param>
        /// <param name="inVoltageT2T5">inVoltageT2T5.</param>
        /// <param name="inVoltageT3T4">inVoltageT3T4.</param>
        /// <param name="inVoltageT3T5">inVoltageT3T5.</param>
        /// <param name="inVoltageT4T5">inVoltageT4T5.</param>
        /// <param name="ledMode">ledMode.</param>
        /// <param name="cableRating">cableRating.</param>
        /// <param name="dynamicChargerCurrent">dynamicChargerCurrent.</param>
        /// <param name="circuitTotalAllocatedPhaseConductorCurrentL1">circuitTotalAllocatedPhaseConductorCurrentL1.</param>
        /// <param name="circuitTotalAllocatedPhaseConductorCurrentL2">circuitTotalAllocatedPhaseConductorCurrentL2.</param>
        /// <param name="circuitTotalAllocatedPhaseConductorCurrentL3">circuitTotalAllocatedPhaseConductorCurrentL3.</param>
        /// <param name="circuitTotalPhaseConductorCurrentL1">circuitTotalPhaseConductorCurrentL1.</param>
        /// <param name="circuitTotalPhaseConductorCurrentL2">circuitTotalPhaseConductorCurrentL2.</param>
        /// <param name="circuitTotalPhaseConductorCurrentL3">circuitTotalPhaseConductorCurrentL3.</param>
        /// <param name="reasonForNoCurrent">reasonForNoCurrent.</param>
        /// <param name="wiFiAPEnabled">wiFiAPEnabled.</param>
        /// <param name="lifetimeEnergy">lifetimeEnergy.</param>
        /// <param name="offlineMaxCircuitCurrentP1">offlineMaxCircuitCurrentP1.</param>
        /// <param name="offlineMaxCircuitCurrentP2">offlineMaxCircuitCurrentP2.</param>
        /// <param name="offlineMaxCircuitCurrentP3">offlineMaxCircuitCurrentP3.</param>
        /// <param name="errorCode">errorCode.</param>
        /// <param name="fatalErrorCode">fatalErrorCode.</param>
        /// <param name="eqAvailableCurrentP1">eqAvailableCurrentP1.</param>
        /// <param name="eqAvailableCurrentP2">eqAvailableCurrentP2.</param>
        /// <param name="eqAvailableCurrentP3">eqAvailableCurrentP3.</param>
        /// <param name="deratedCurrent">deratedCurrent.</param>
        /// <param name="deratingActive">deratingActive.</param>
        /// <param name="connectedToCloud">connectedToCloud.</param>
        public EaseeCoreDTOsChargerChargerStateDTO(bool? smartCharging = default(bool?), bool? cableLocked = default(bool?), EaseeCoreEnumsOpModeType? chargerOpMode = default(EaseeCoreEnumsOpModeType?), double? totalPower = default(double?), double? sessionEnergy = default(double?), double? energyPerHour = default(double?), int? wiFiRSSI = default(int?), int? cellRSSI = default(int?), int? localRSSI = default(int?), EaseeCoreEnumsOutputPhaseType? outputPhase = default(EaseeCoreEnumsOutputPhaseType?), double? dynamicCircuitCurrentP1 = default(double?), double? dynamicCircuitCurrentP2 = default(double?), double? dynamicCircuitCurrentP3 = default(double?), DateTime? latestPulse = default(DateTime?), int chargerFirmware = default(int), int latestFirmware = default(int), double? voltage = default(double?), int? chargerRAT = default(int?), bool? lockCablePermanently = default(bool?), double? inCurrentT2 = default(double?), double? inCurrentT3 = default(double?), double? inCurrentT4 = default(double?), double? inCurrentT5 = default(double?), double? outputCurrent = default(double?), bool isOnline = default(bool), double? inVoltageT1T2 = default(double?), double? inVoltageT1T3 = default(double?), double? inVoltageT1T4 = default(double?), double? inVoltageT1T5 = default(double?), double? inVoltageT2T3 = default(double?), double? inVoltageT2T4 = default(double?), double? inVoltageT2T5 = default(double?), double? inVoltageT3T4 = default(double?), double? inVoltageT3T5 = default(double?), double? inVoltageT4T5 = default(double?), EaseeCoreEnumsChargerLEDModeType? ledMode = default(EaseeCoreEnumsChargerLEDModeType?), double? cableRating = default(double?), double? dynamicChargerCurrent = default(double?), double? circuitTotalAllocatedPhaseConductorCurrentL1 = default(double?), double? circuitTotalAllocatedPhaseConductorCurrentL2 = default(double?), double? circuitTotalAllocatedPhaseConductorCurrentL3 = default(double?), double? circuitTotalPhaseConductorCurrentL1 = default(double?), double? circuitTotalPhaseConductorCurrentL2 = default(double?), double? circuitTotalPhaseConductorCurrentL3 = default(double?), EaseeCoreEnumsReasonForNoCurrent? reasonForNoCurrent = default(EaseeCoreEnumsReasonForNoCurrent?), bool? wiFiAPEnabled = default(bool?), double? lifetimeEnergy = default(double?), int? offlineMaxCircuitCurrentP1 = default(int?), int? offlineMaxCircuitCurrentP2 = default(int?), int? offlineMaxCircuitCurrentP3 = default(int?), int errorCode = default(int), int fatalErrorCode = default(int), double? eqAvailableCurrentP1 = default(double?), double? eqAvailableCurrentP2 = default(double?), double? eqAvailableCurrentP3 = default(double?), double? deratedCurrent = default(double?), bool? deratingActive = default(bool?), bool? connectedToCloud = default(bool?))
        {
            this.SmartCharging = smartCharging;
            this.CableLocked = cableLocked;
            this.ChargerOpMode = chargerOpMode;
            this.TotalPower = totalPower;
            this.SessionEnergy = sessionEnergy;
            this.EnergyPerHour = energyPerHour;
            this.WiFiRSSI = wiFiRSSI;
            this.CellRSSI = cellRSSI;
            this.LocalRSSI = localRSSI;
            this.OutputPhase = outputPhase;
            this.DynamicCircuitCurrentP1 = dynamicCircuitCurrentP1;
            this.DynamicCircuitCurrentP2 = dynamicCircuitCurrentP2;
            this.DynamicCircuitCurrentP3 = dynamicCircuitCurrentP3;
            this.LatestPulse = latestPulse;
            this.ChargerFirmware = chargerFirmware;
            this.LatestFirmware = latestFirmware;
            this.Voltage = voltage;
            this.ChargerRAT = chargerRAT;
            this.LockCablePermanently = lockCablePermanently;
            this.InCurrentT2 = inCurrentT2;
            this.InCurrentT3 = inCurrentT3;
            this.InCurrentT4 = inCurrentT4;
            this.InCurrentT5 = inCurrentT5;
            this.OutputCurrent = outputCurrent;
            this.IsOnline = isOnline;
            this.InVoltageT1T2 = inVoltageT1T2;
            this.InVoltageT1T3 = inVoltageT1T3;
            this.InVoltageT1T4 = inVoltageT1T4;
            this.InVoltageT1T5 = inVoltageT1T5;
            this.InVoltageT2T3 = inVoltageT2T3;
            this.InVoltageT2T4 = inVoltageT2T4;
            this.InVoltageT2T5 = inVoltageT2T5;
            this.InVoltageT3T4 = inVoltageT3T4;
            this.InVoltageT3T5 = inVoltageT3T5;
            this.InVoltageT4T5 = inVoltageT4T5;
            this.LedMode = ledMode;
            this.CableRating = cableRating;
            this.DynamicChargerCurrent = dynamicChargerCurrent;
            this.CircuitTotalAllocatedPhaseConductorCurrentL1 = circuitTotalAllocatedPhaseConductorCurrentL1;
            this.CircuitTotalAllocatedPhaseConductorCurrentL2 = circuitTotalAllocatedPhaseConductorCurrentL2;
            this.CircuitTotalAllocatedPhaseConductorCurrentL3 = circuitTotalAllocatedPhaseConductorCurrentL3;
            this.CircuitTotalPhaseConductorCurrentL1 = circuitTotalPhaseConductorCurrentL1;
            this.CircuitTotalPhaseConductorCurrentL2 = circuitTotalPhaseConductorCurrentL2;
            this.CircuitTotalPhaseConductorCurrentL3 = circuitTotalPhaseConductorCurrentL3;
            this.ReasonForNoCurrent = reasonForNoCurrent;
            this.WiFiAPEnabled = wiFiAPEnabled;
            this.LifetimeEnergy = lifetimeEnergy;
            this.OfflineMaxCircuitCurrentP1 = offlineMaxCircuitCurrentP1;
            this.OfflineMaxCircuitCurrentP2 = offlineMaxCircuitCurrentP2;
            this.OfflineMaxCircuitCurrentP3 = offlineMaxCircuitCurrentP3;
            this.ErrorCode = errorCode;
            this.FatalErrorCode = fatalErrorCode;
            this.EqAvailableCurrentP1 = eqAvailableCurrentP1;
            this.EqAvailableCurrentP2 = eqAvailableCurrentP2;
            this.EqAvailableCurrentP3 = eqAvailableCurrentP3;
            this.DeratedCurrent = deratedCurrent;
            this.DeratingActive = deratingActive;
            this.ConnectedToCloud = connectedToCloud;
        }

        /// <summary>
        /// Gets or Sets SmartCharging
        /// </summary>
        [DataMember(Name = "smartCharging", EmitDefaultValue = true)]
        public bool? SmartCharging { get; set; }

        /// <summary>
        /// Gets or Sets CableLocked
        /// </summary>
        [DataMember(Name = "cableLocked", EmitDefaultValue = true)]
        public bool? CableLocked { get; set; }

        /// <summary>
        /// Gets or Sets TotalPower
        /// </summary>
        [DataMember(Name = "totalPower", EmitDefaultValue = true)]
        public double? TotalPower { get; set; }

        /// <summary>
        /// Gets or Sets SessionEnergy
        /// </summary>
        [DataMember(Name = "sessionEnergy", EmitDefaultValue = true)]
        public double? SessionEnergy { get; set; }

        /// <summary>
        /// Gets or Sets EnergyPerHour
        /// </summary>
        [DataMember(Name = "energyPerHour", EmitDefaultValue = true)]
        public double? EnergyPerHour { get; set; }

        /// <summary>
        /// Gets or Sets WiFiRSSI
        /// </summary>
        [DataMember(Name = "wiFiRSSI", EmitDefaultValue = true)]
        public int? WiFiRSSI { get; set; }

        /// <summary>
        /// Gets or Sets CellRSSI
        /// </summary>
        [DataMember(Name = "cellRSSI", EmitDefaultValue = true)]
        public int? CellRSSI { get; set; }

        /// <summary>
        /// Gets or Sets LocalRSSI
        /// </summary>
        [DataMember(Name = "localRSSI", EmitDefaultValue = true)]
        public int? LocalRSSI { get; set; }

        /// <summary>
        /// Gets or Sets DynamicCircuitCurrentP1
        /// </summary>
        [DataMember(Name = "dynamicCircuitCurrentP1", EmitDefaultValue = true)]
        public double? DynamicCircuitCurrentP1 { get; set; }

        /// <summary>
        /// Gets or Sets DynamicCircuitCurrentP2
        /// </summary>
        [DataMember(Name = "dynamicCircuitCurrentP2", EmitDefaultValue = true)]
        public double? DynamicCircuitCurrentP2 { get; set; }

        /// <summary>
        /// Gets or Sets DynamicCircuitCurrentP3
        /// </summary>
        [DataMember(Name = "dynamicCircuitCurrentP3", EmitDefaultValue = true)]
        public double? DynamicCircuitCurrentP3 { get; set; }

        /// <summary>
        /// Gets or Sets LatestPulse
        /// </summary>
        [DataMember(Name = "latestPulse", EmitDefaultValue = true)]
        public DateTime? LatestPulse { get; set; }

        /// <summary>
        /// Gets or Sets ChargerFirmware
        /// </summary>
        [DataMember(Name = "chargerFirmware", EmitDefaultValue = false)]
        public int ChargerFirmware { get; set; }

        /// <summary>
        /// Gets or Sets LatestFirmware
        /// </summary>
        [DataMember(Name = "latestFirmware", EmitDefaultValue = false)]
        public int LatestFirmware { get; set; }

        /// <summary>
        /// Gets or Sets Voltage
        /// </summary>
        [DataMember(Name = "voltage", EmitDefaultValue = true)]
        public double? Voltage { get; set; }

        /// <summary>
        /// Gets or Sets ChargerRAT
        /// </summary>
        [DataMember(Name = "chargerRAT", EmitDefaultValue = true)]
        public int? ChargerRAT { get; set; }

        /// <summary>
        /// Gets or Sets LockCablePermanently
        /// </summary>
        [DataMember(Name = "lockCablePermanently", EmitDefaultValue = true)]
        public bool? LockCablePermanently { get; set; }

        /// <summary>
        /// Gets or Sets InCurrentT2
        /// </summary>
        [DataMember(Name = "inCurrentT2", EmitDefaultValue = true)]
        public double? InCurrentT2 { get; set; }

        /// <summary>
        /// Gets or Sets InCurrentT3
        /// </summary>
        [DataMember(Name = "inCurrentT3", EmitDefaultValue = true)]
        public double? InCurrentT3 { get; set; }

        /// <summary>
        /// Gets or Sets InCurrentT4
        /// </summary>
        [DataMember(Name = "inCurrentT4", EmitDefaultValue = true)]
        public double? InCurrentT4 { get; set; }

        /// <summary>
        /// Gets or Sets InCurrentT5
        /// </summary>
        [DataMember(Name = "inCurrentT5", EmitDefaultValue = true)]
        public double? InCurrentT5 { get; set; }

        /// <summary>
        /// Gets or Sets OutputCurrent
        /// </summary>
        [DataMember(Name = "outputCurrent", EmitDefaultValue = true)]
        public double? OutputCurrent { get; set; }

        /// <summary>
        /// Gets or Sets IsOnline
        /// </summary>
        [DataMember(Name = "isOnline", EmitDefaultValue = true)]
        public bool IsOnline { get; set; }

        /// <summary>
        /// Gets or Sets InVoltageT1T2
        /// </summary>
        [DataMember(Name = "inVoltageT1T2", EmitDefaultValue = true)]
        public double? InVoltageT1T2 { get; set; }

        /// <summary>
        /// Gets or Sets InVoltageT1T3
        /// </summary>
        [DataMember(Name = "inVoltageT1T3", EmitDefaultValue = true)]
        public double? InVoltageT1T3 { get; set; }

        /// <summary>
        /// Gets or Sets InVoltageT1T4
        /// </summary>
        [DataMember(Name = "inVoltageT1T4", EmitDefaultValue = true)]
        public double? InVoltageT1T4 { get; set; }

        /// <summary>
        /// Gets or Sets InVoltageT1T5
        /// </summary>
        [DataMember(Name = "inVoltageT1T5", EmitDefaultValue = true)]
        public double? InVoltageT1T5 { get; set; }

        /// <summary>
        /// Gets or Sets InVoltageT2T3
        /// </summary>
        [DataMember(Name = "inVoltageT2T3", EmitDefaultValue = true)]
        public double? InVoltageT2T3 { get; set; }

        /// <summary>
        /// Gets or Sets InVoltageT2T4
        /// </summary>
        [DataMember(Name = "inVoltageT2T4", EmitDefaultValue = true)]
        public double? InVoltageT2T4 { get; set; }

        /// <summary>
        /// Gets or Sets InVoltageT2T5
        /// </summary>
        [DataMember(Name = "inVoltageT2T5", EmitDefaultValue = true)]
        public double? InVoltageT2T5 { get; set; }

        /// <summary>
        /// Gets or Sets InVoltageT3T4
        /// </summary>
        [DataMember(Name = "inVoltageT3T4", EmitDefaultValue = true)]
        public double? InVoltageT3T4 { get; set; }

        /// <summary>
        /// Gets or Sets InVoltageT3T5
        /// </summary>
        [DataMember(Name = "inVoltageT3T5", EmitDefaultValue = true)]
        public double? InVoltageT3T5 { get; set; }

        /// <summary>
        /// Gets or Sets InVoltageT4T5
        /// </summary>
        [DataMember(Name = "inVoltageT4T5", EmitDefaultValue = true)]
        public double? InVoltageT4T5 { get; set; }

        /// <summary>
        /// Gets or Sets CableRating
        /// </summary>
        [DataMember(Name = "cableRating", EmitDefaultValue = true)]
        public double? CableRating { get; set; }

        /// <summary>
        /// Gets or Sets DynamicChargerCurrent
        /// </summary>
        [DataMember(Name = "dynamicChargerCurrent", EmitDefaultValue = true)]
        public double? DynamicChargerCurrent { get; set; }

        /// <summary>
        /// Gets or Sets CircuitTotalAllocatedPhaseConductorCurrentL1
        /// </summary>
        [DataMember(Name = "circuitTotalAllocatedPhaseConductorCurrentL1", EmitDefaultValue = true)]
        public double? CircuitTotalAllocatedPhaseConductorCurrentL1 { get; set; }

        /// <summary>
        /// Gets or Sets CircuitTotalAllocatedPhaseConductorCurrentL2
        /// </summary>
        [DataMember(Name = "circuitTotalAllocatedPhaseConductorCurrentL2", EmitDefaultValue = true)]
        public double? CircuitTotalAllocatedPhaseConductorCurrentL2 { get; set; }

        /// <summary>
        /// Gets or Sets CircuitTotalAllocatedPhaseConductorCurrentL3
        /// </summary>
        [DataMember(Name = "circuitTotalAllocatedPhaseConductorCurrentL3", EmitDefaultValue = true)]
        public double? CircuitTotalAllocatedPhaseConductorCurrentL3 { get; set; }

        /// <summary>
        /// Gets or Sets CircuitTotalPhaseConductorCurrentL1
        /// </summary>
        [DataMember(Name = "circuitTotalPhaseConductorCurrentL1", EmitDefaultValue = true)]
        public double? CircuitTotalPhaseConductorCurrentL1 { get; set; }

        /// <summary>
        /// Gets or Sets CircuitTotalPhaseConductorCurrentL2
        /// </summary>
        [DataMember(Name = "circuitTotalPhaseConductorCurrentL2", EmitDefaultValue = true)]
        public double? CircuitTotalPhaseConductorCurrentL2 { get; set; }

        /// <summary>
        /// Gets or Sets CircuitTotalPhaseConductorCurrentL3
        /// </summary>
        [DataMember(Name = "circuitTotalPhaseConductorCurrentL3", EmitDefaultValue = true)]
        public double? CircuitTotalPhaseConductorCurrentL3 { get; set; }

        /// <summary>
        /// Gets or Sets WiFiAPEnabled
        /// </summary>
        [DataMember(Name = "wiFiAPEnabled", EmitDefaultValue = true)]
        public bool? WiFiAPEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LifetimeEnergy
        /// </summary>
        [DataMember(Name = "lifetimeEnergy", EmitDefaultValue = true)]
        public double? LifetimeEnergy { get; set; }

        /// <summary>
        /// Gets or Sets OfflineMaxCircuitCurrentP1
        /// </summary>
        [DataMember(Name = "offlineMaxCircuitCurrentP1", EmitDefaultValue = true)]
        public int? OfflineMaxCircuitCurrentP1 { get; set; }

        /// <summary>
        /// Gets or Sets OfflineMaxCircuitCurrentP2
        /// </summary>
        [DataMember(Name = "offlineMaxCircuitCurrentP2", EmitDefaultValue = true)]
        public int? OfflineMaxCircuitCurrentP2 { get; set; }

        /// <summary>
        /// Gets or Sets OfflineMaxCircuitCurrentP3
        /// </summary>
        [DataMember(Name = "offlineMaxCircuitCurrentP3", EmitDefaultValue = true)]
        public int? OfflineMaxCircuitCurrentP3 { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public int ErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets FatalErrorCode
        /// </summary>
        [DataMember(Name = "fatalErrorCode", EmitDefaultValue = false)]
        public int FatalErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = true)]
        public List<EaseeCoreEnumsSimplifiedChargerError> Errors { get; private set; }

        /// <summary>
        /// Returns false as Errors should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeErrors()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets EqAvailableCurrentP1
        /// </summary>
        [DataMember(Name = "eqAvailableCurrentP1", EmitDefaultValue = true)]
        public double? EqAvailableCurrentP1 { get; set; }

        /// <summary>
        /// Gets or Sets EqAvailableCurrentP2
        /// </summary>
        [DataMember(Name = "eqAvailableCurrentP2", EmitDefaultValue = true)]
        public double? EqAvailableCurrentP2 { get; set; }

        /// <summary>
        /// Gets or Sets EqAvailableCurrentP3
        /// </summary>
        [DataMember(Name = "eqAvailableCurrentP3", EmitDefaultValue = true)]
        public double? EqAvailableCurrentP3 { get; set; }

        /// <summary>
        /// Gets or Sets DeratedCurrent
        /// </summary>
        [DataMember(Name = "deratedCurrent", EmitDefaultValue = true)]
        public double? DeratedCurrent { get; set; }

        /// <summary>
        /// Gets or Sets DeratingActive
        /// </summary>
        [DataMember(Name = "deratingActive", EmitDefaultValue = true)]
        public bool? DeratingActive { get; set; }

        /// <summary>
        /// Gets or Sets ConnectedToCloud
        /// </summary>
        [DataMember(Name = "connectedToCloud", EmitDefaultValue = true)]
        public bool? ConnectedToCloud { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsChargerChargerStateDTO {\n");
            sb.Append("  SmartCharging: ").Append(SmartCharging).Append("\n");
            sb.Append("  CableLocked: ").Append(CableLocked).Append("\n");
            sb.Append("  ChargerOpMode: ").Append(ChargerOpMode).Append("\n");
            sb.Append("  TotalPower: ").Append(TotalPower).Append("\n");
            sb.Append("  SessionEnergy: ").Append(SessionEnergy).Append("\n");
            sb.Append("  EnergyPerHour: ").Append(EnergyPerHour).Append("\n");
            sb.Append("  WiFiRSSI: ").Append(WiFiRSSI).Append("\n");
            sb.Append("  CellRSSI: ").Append(CellRSSI).Append("\n");
            sb.Append("  LocalRSSI: ").Append(LocalRSSI).Append("\n");
            sb.Append("  OutputPhase: ").Append(OutputPhase).Append("\n");
            sb.Append("  DynamicCircuitCurrentP1: ").Append(DynamicCircuitCurrentP1).Append("\n");
            sb.Append("  DynamicCircuitCurrentP2: ").Append(DynamicCircuitCurrentP2).Append("\n");
            sb.Append("  DynamicCircuitCurrentP3: ").Append(DynamicCircuitCurrentP3).Append("\n");
            sb.Append("  LatestPulse: ").Append(LatestPulse).Append("\n");
            sb.Append("  ChargerFirmware: ").Append(ChargerFirmware).Append("\n");
            sb.Append("  LatestFirmware: ").Append(LatestFirmware).Append("\n");
            sb.Append("  Voltage: ").Append(Voltage).Append("\n");
            sb.Append("  ChargerRAT: ").Append(ChargerRAT).Append("\n");
            sb.Append("  LockCablePermanently: ").Append(LockCablePermanently).Append("\n");
            sb.Append("  InCurrentT2: ").Append(InCurrentT2).Append("\n");
            sb.Append("  InCurrentT3: ").Append(InCurrentT3).Append("\n");
            sb.Append("  InCurrentT4: ").Append(InCurrentT4).Append("\n");
            sb.Append("  InCurrentT5: ").Append(InCurrentT5).Append("\n");
            sb.Append("  OutputCurrent: ").Append(OutputCurrent).Append("\n");
            sb.Append("  IsOnline: ").Append(IsOnline).Append("\n");
            sb.Append("  InVoltageT1T2: ").Append(InVoltageT1T2).Append("\n");
            sb.Append("  InVoltageT1T3: ").Append(InVoltageT1T3).Append("\n");
            sb.Append("  InVoltageT1T4: ").Append(InVoltageT1T4).Append("\n");
            sb.Append("  InVoltageT1T5: ").Append(InVoltageT1T5).Append("\n");
            sb.Append("  InVoltageT2T3: ").Append(InVoltageT2T3).Append("\n");
            sb.Append("  InVoltageT2T4: ").Append(InVoltageT2T4).Append("\n");
            sb.Append("  InVoltageT2T5: ").Append(InVoltageT2T5).Append("\n");
            sb.Append("  InVoltageT3T4: ").Append(InVoltageT3T4).Append("\n");
            sb.Append("  InVoltageT3T5: ").Append(InVoltageT3T5).Append("\n");
            sb.Append("  InVoltageT4T5: ").Append(InVoltageT4T5).Append("\n");
            sb.Append("  LedMode: ").Append(LedMode).Append("\n");
            sb.Append("  CableRating: ").Append(CableRating).Append("\n");
            sb.Append("  DynamicChargerCurrent: ").Append(DynamicChargerCurrent).Append("\n");
            sb.Append("  CircuitTotalAllocatedPhaseConductorCurrentL1: ").Append(CircuitTotalAllocatedPhaseConductorCurrentL1).Append("\n");
            sb.Append("  CircuitTotalAllocatedPhaseConductorCurrentL2: ").Append(CircuitTotalAllocatedPhaseConductorCurrentL2).Append("\n");
            sb.Append("  CircuitTotalAllocatedPhaseConductorCurrentL3: ").Append(CircuitTotalAllocatedPhaseConductorCurrentL3).Append("\n");
            sb.Append("  CircuitTotalPhaseConductorCurrentL1: ").Append(CircuitTotalPhaseConductorCurrentL1).Append("\n");
            sb.Append("  CircuitTotalPhaseConductorCurrentL2: ").Append(CircuitTotalPhaseConductorCurrentL2).Append("\n");
            sb.Append("  CircuitTotalPhaseConductorCurrentL3: ").Append(CircuitTotalPhaseConductorCurrentL3).Append("\n");
            sb.Append("  ReasonForNoCurrent: ").Append(ReasonForNoCurrent).Append("\n");
            sb.Append("  WiFiAPEnabled: ").Append(WiFiAPEnabled).Append("\n");
            sb.Append("  LifetimeEnergy: ").Append(LifetimeEnergy).Append("\n");
            sb.Append("  OfflineMaxCircuitCurrentP1: ").Append(OfflineMaxCircuitCurrentP1).Append("\n");
            sb.Append("  OfflineMaxCircuitCurrentP2: ").Append(OfflineMaxCircuitCurrentP2).Append("\n");
            sb.Append("  OfflineMaxCircuitCurrentP3: ").Append(OfflineMaxCircuitCurrentP3).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  FatalErrorCode: ").Append(FatalErrorCode).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  EqAvailableCurrentP1: ").Append(EqAvailableCurrentP1).Append("\n");
            sb.Append("  EqAvailableCurrentP2: ").Append(EqAvailableCurrentP2).Append("\n");
            sb.Append("  EqAvailableCurrentP3: ").Append(EqAvailableCurrentP3).Append("\n");
            sb.Append("  DeratedCurrent: ").Append(DeratedCurrent).Append("\n");
            sb.Append("  DeratingActive: ").Append(DeratingActive).Append("\n");
            sb.Append("  ConnectedToCloud: ").Append(ConnectedToCloud).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsChargerChargerStateDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsChargerChargerStateDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsChargerChargerStateDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsChargerChargerStateDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SmartCharging == input.SmartCharging ||
                    (this.SmartCharging != null &&
                    this.SmartCharging.Equals(input.SmartCharging))
                ) && 
                (
                    this.CableLocked == input.CableLocked ||
                    (this.CableLocked != null &&
                    this.CableLocked.Equals(input.CableLocked))
                ) && 
                (
                    this.ChargerOpMode == input.ChargerOpMode ||
                    this.ChargerOpMode.Equals(input.ChargerOpMode)
                ) && 
                (
                    this.TotalPower == input.TotalPower ||
                    (this.TotalPower != null &&
                    this.TotalPower.Equals(input.TotalPower))
                ) && 
                (
                    this.SessionEnergy == input.SessionEnergy ||
                    (this.SessionEnergy != null &&
                    this.SessionEnergy.Equals(input.SessionEnergy))
                ) && 
                (
                    this.EnergyPerHour == input.EnergyPerHour ||
                    (this.EnergyPerHour != null &&
                    this.EnergyPerHour.Equals(input.EnergyPerHour))
                ) && 
                (
                    this.WiFiRSSI == input.WiFiRSSI ||
                    (this.WiFiRSSI != null &&
                    this.WiFiRSSI.Equals(input.WiFiRSSI))
                ) && 
                (
                    this.CellRSSI == input.CellRSSI ||
                    (this.CellRSSI != null &&
                    this.CellRSSI.Equals(input.CellRSSI))
                ) && 
                (
                    this.LocalRSSI == input.LocalRSSI ||
                    (this.LocalRSSI != null &&
                    this.LocalRSSI.Equals(input.LocalRSSI))
                ) && 
                (
                    this.OutputPhase == input.OutputPhase ||
                    this.OutputPhase.Equals(input.OutputPhase)
                ) && 
                (
                    this.DynamicCircuitCurrentP1 == input.DynamicCircuitCurrentP1 ||
                    (this.DynamicCircuitCurrentP1 != null &&
                    this.DynamicCircuitCurrentP1.Equals(input.DynamicCircuitCurrentP1))
                ) && 
                (
                    this.DynamicCircuitCurrentP2 == input.DynamicCircuitCurrentP2 ||
                    (this.DynamicCircuitCurrentP2 != null &&
                    this.DynamicCircuitCurrentP2.Equals(input.DynamicCircuitCurrentP2))
                ) && 
                (
                    this.DynamicCircuitCurrentP3 == input.DynamicCircuitCurrentP3 ||
                    (this.DynamicCircuitCurrentP3 != null &&
                    this.DynamicCircuitCurrentP3.Equals(input.DynamicCircuitCurrentP3))
                ) && 
                (
                    this.LatestPulse == input.LatestPulse ||
                    (this.LatestPulse != null &&
                    this.LatestPulse.Equals(input.LatestPulse))
                ) && 
                (
                    this.ChargerFirmware == input.ChargerFirmware ||
                    this.ChargerFirmware.Equals(input.ChargerFirmware)
                ) && 
                (
                    this.LatestFirmware == input.LatestFirmware ||
                    this.LatestFirmware.Equals(input.LatestFirmware)
                ) && 
                (
                    this.Voltage == input.Voltage ||
                    (this.Voltage != null &&
                    this.Voltage.Equals(input.Voltage))
                ) && 
                (
                    this.ChargerRAT == input.ChargerRAT ||
                    (this.ChargerRAT != null &&
                    this.ChargerRAT.Equals(input.ChargerRAT))
                ) && 
                (
                    this.LockCablePermanently == input.LockCablePermanently ||
                    (this.LockCablePermanently != null &&
                    this.LockCablePermanently.Equals(input.LockCablePermanently))
                ) && 
                (
                    this.InCurrentT2 == input.InCurrentT2 ||
                    (this.InCurrentT2 != null &&
                    this.InCurrentT2.Equals(input.InCurrentT2))
                ) && 
                (
                    this.InCurrentT3 == input.InCurrentT3 ||
                    (this.InCurrentT3 != null &&
                    this.InCurrentT3.Equals(input.InCurrentT3))
                ) && 
                (
                    this.InCurrentT4 == input.InCurrentT4 ||
                    (this.InCurrentT4 != null &&
                    this.InCurrentT4.Equals(input.InCurrentT4))
                ) && 
                (
                    this.InCurrentT5 == input.InCurrentT5 ||
                    (this.InCurrentT5 != null &&
                    this.InCurrentT5.Equals(input.InCurrentT5))
                ) && 
                (
                    this.OutputCurrent == input.OutputCurrent ||
                    (this.OutputCurrent != null &&
                    this.OutputCurrent.Equals(input.OutputCurrent))
                ) && 
                (
                    this.IsOnline == input.IsOnline ||
                    this.IsOnline.Equals(input.IsOnline)
                ) && 
                (
                    this.InVoltageT1T2 == input.InVoltageT1T2 ||
                    (this.InVoltageT1T2 != null &&
                    this.InVoltageT1T2.Equals(input.InVoltageT1T2))
                ) && 
                (
                    this.InVoltageT1T3 == input.InVoltageT1T3 ||
                    (this.InVoltageT1T3 != null &&
                    this.InVoltageT1T3.Equals(input.InVoltageT1T3))
                ) && 
                (
                    this.InVoltageT1T4 == input.InVoltageT1T4 ||
                    (this.InVoltageT1T4 != null &&
                    this.InVoltageT1T4.Equals(input.InVoltageT1T4))
                ) && 
                (
                    this.InVoltageT1T5 == input.InVoltageT1T5 ||
                    (this.InVoltageT1T5 != null &&
                    this.InVoltageT1T5.Equals(input.InVoltageT1T5))
                ) && 
                (
                    this.InVoltageT2T3 == input.InVoltageT2T3 ||
                    (this.InVoltageT2T3 != null &&
                    this.InVoltageT2T3.Equals(input.InVoltageT2T3))
                ) && 
                (
                    this.InVoltageT2T4 == input.InVoltageT2T4 ||
                    (this.InVoltageT2T4 != null &&
                    this.InVoltageT2T4.Equals(input.InVoltageT2T4))
                ) && 
                (
                    this.InVoltageT2T5 == input.InVoltageT2T5 ||
                    (this.InVoltageT2T5 != null &&
                    this.InVoltageT2T5.Equals(input.InVoltageT2T5))
                ) && 
                (
                    this.InVoltageT3T4 == input.InVoltageT3T4 ||
                    (this.InVoltageT3T4 != null &&
                    this.InVoltageT3T4.Equals(input.InVoltageT3T4))
                ) && 
                (
                    this.InVoltageT3T5 == input.InVoltageT3T5 ||
                    (this.InVoltageT3T5 != null &&
                    this.InVoltageT3T5.Equals(input.InVoltageT3T5))
                ) && 
                (
                    this.InVoltageT4T5 == input.InVoltageT4T5 ||
                    (this.InVoltageT4T5 != null &&
                    this.InVoltageT4T5.Equals(input.InVoltageT4T5))
                ) && 
                (
                    this.LedMode == input.LedMode ||
                    this.LedMode.Equals(input.LedMode)
                ) && 
                (
                    this.CableRating == input.CableRating ||
                    (this.CableRating != null &&
                    this.CableRating.Equals(input.CableRating))
                ) && 
                (
                    this.DynamicChargerCurrent == input.DynamicChargerCurrent ||
                    (this.DynamicChargerCurrent != null &&
                    this.DynamicChargerCurrent.Equals(input.DynamicChargerCurrent))
                ) && 
                (
                    this.CircuitTotalAllocatedPhaseConductorCurrentL1 == input.CircuitTotalAllocatedPhaseConductorCurrentL1 ||
                    (this.CircuitTotalAllocatedPhaseConductorCurrentL1 != null &&
                    this.CircuitTotalAllocatedPhaseConductorCurrentL1.Equals(input.CircuitTotalAllocatedPhaseConductorCurrentL1))
                ) && 
                (
                    this.CircuitTotalAllocatedPhaseConductorCurrentL2 == input.CircuitTotalAllocatedPhaseConductorCurrentL2 ||
                    (this.CircuitTotalAllocatedPhaseConductorCurrentL2 != null &&
                    this.CircuitTotalAllocatedPhaseConductorCurrentL2.Equals(input.CircuitTotalAllocatedPhaseConductorCurrentL2))
                ) && 
                (
                    this.CircuitTotalAllocatedPhaseConductorCurrentL3 == input.CircuitTotalAllocatedPhaseConductorCurrentL3 ||
                    (this.CircuitTotalAllocatedPhaseConductorCurrentL3 != null &&
                    this.CircuitTotalAllocatedPhaseConductorCurrentL3.Equals(input.CircuitTotalAllocatedPhaseConductorCurrentL3))
                ) && 
                (
                    this.CircuitTotalPhaseConductorCurrentL1 == input.CircuitTotalPhaseConductorCurrentL1 ||
                    (this.CircuitTotalPhaseConductorCurrentL1 != null &&
                    this.CircuitTotalPhaseConductorCurrentL1.Equals(input.CircuitTotalPhaseConductorCurrentL1))
                ) && 
                (
                    this.CircuitTotalPhaseConductorCurrentL2 == input.CircuitTotalPhaseConductorCurrentL2 ||
                    (this.CircuitTotalPhaseConductorCurrentL2 != null &&
                    this.CircuitTotalPhaseConductorCurrentL2.Equals(input.CircuitTotalPhaseConductorCurrentL2))
                ) && 
                (
                    this.CircuitTotalPhaseConductorCurrentL3 == input.CircuitTotalPhaseConductorCurrentL3 ||
                    (this.CircuitTotalPhaseConductorCurrentL3 != null &&
                    this.CircuitTotalPhaseConductorCurrentL3.Equals(input.CircuitTotalPhaseConductorCurrentL3))
                ) && 
                (
                    this.ReasonForNoCurrent == input.ReasonForNoCurrent ||
                    this.ReasonForNoCurrent.Equals(input.ReasonForNoCurrent)
                ) && 
                (
                    this.WiFiAPEnabled == input.WiFiAPEnabled ||
                    (this.WiFiAPEnabled != null &&
                    this.WiFiAPEnabled.Equals(input.WiFiAPEnabled))
                ) && 
                (
                    this.LifetimeEnergy == input.LifetimeEnergy ||
                    (this.LifetimeEnergy != null &&
                    this.LifetimeEnergy.Equals(input.LifetimeEnergy))
                ) && 
                (
                    this.OfflineMaxCircuitCurrentP1 == input.OfflineMaxCircuitCurrentP1 ||
                    (this.OfflineMaxCircuitCurrentP1 != null &&
                    this.OfflineMaxCircuitCurrentP1.Equals(input.OfflineMaxCircuitCurrentP1))
                ) && 
                (
                    this.OfflineMaxCircuitCurrentP2 == input.OfflineMaxCircuitCurrentP2 ||
                    (this.OfflineMaxCircuitCurrentP2 != null &&
                    this.OfflineMaxCircuitCurrentP2.Equals(input.OfflineMaxCircuitCurrentP2))
                ) && 
                (
                    this.OfflineMaxCircuitCurrentP3 == input.OfflineMaxCircuitCurrentP3 ||
                    (this.OfflineMaxCircuitCurrentP3 != null &&
                    this.OfflineMaxCircuitCurrentP3.Equals(input.OfflineMaxCircuitCurrentP3))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    this.ErrorCode.Equals(input.ErrorCode)
                ) && 
                (
                    this.FatalErrorCode == input.FatalErrorCode ||
                    this.FatalErrorCode.Equals(input.FatalErrorCode)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.EqAvailableCurrentP1 == input.EqAvailableCurrentP1 ||
                    (this.EqAvailableCurrentP1 != null &&
                    this.EqAvailableCurrentP1.Equals(input.EqAvailableCurrentP1))
                ) && 
                (
                    this.EqAvailableCurrentP2 == input.EqAvailableCurrentP2 ||
                    (this.EqAvailableCurrentP2 != null &&
                    this.EqAvailableCurrentP2.Equals(input.EqAvailableCurrentP2))
                ) && 
                (
                    this.EqAvailableCurrentP3 == input.EqAvailableCurrentP3 ||
                    (this.EqAvailableCurrentP3 != null &&
                    this.EqAvailableCurrentP3.Equals(input.EqAvailableCurrentP3))
                ) && 
                (
                    this.DeratedCurrent == input.DeratedCurrent ||
                    (this.DeratedCurrent != null &&
                    this.DeratedCurrent.Equals(input.DeratedCurrent))
                ) && 
                (
                    this.DeratingActive == input.DeratingActive ||
                    (this.DeratingActive != null &&
                    this.DeratingActive.Equals(input.DeratingActive))
                ) && 
                (
                    this.ConnectedToCloud == input.ConnectedToCloud ||
                    (this.ConnectedToCloud != null &&
                    this.ConnectedToCloud.Equals(input.ConnectedToCloud))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SmartCharging != null)
                {
                    hashCode = (hashCode * 59) + this.SmartCharging.GetHashCode();
                }
                if (this.CableLocked != null)
                {
                    hashCode = (hashCode * 59) + this.CableLocked.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChargerOpMode.GetHashCode();
                if (this.TotalPower != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPower.GetHashCode();
                }
                if (this.SessionEnergy != null)
                {
                    hashCode = (hashCode * 59) + this.SessionEnergy.GetHashCode();
                }
                if (this.EnergyPerHour != null)
                {
                    hashCode = (hashCode * 59) + this.EnergyPerHour.GetHashCode();
                }
                if (this.WiFiRSSI != null)
                {
                    hashCode = (hashCode * 59) + this.WiFiRSSI.GetHashCode();
                }
                if (this.CellRSSI != null)
                {
                    hashCode = (hashCode * 59) + this.CellRSSI.GetHashCode();
                }
                if (this.LocalRSSI != null)
                {
                    hashCode = (hashCode * 59) + this.LocalRSSI.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OutputPhase.GetHashCode();
                if (this.DynamicCircuitCurrentP1 != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicCircuitCurrentP1.GetHashCode();
                }
                if (this.DynamicCircuitCurrentP2 != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicCircuitCurrentP2.GetHashCode();
                }
                if (this.DynamicCircuitCurrentP3 != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicCircuitCurrentP3.GetHashCode();
                }
                if (this.LatestPulse != null)
                {
                    hashCode = (hashCode * 59) + this.LatestPulse.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChargerFirmware.GetHashCode();
                hashCode = (hashCode * 59) + this.LatestFirmware.GetHashCode();
                if (this.Voltage != null)
                {
                    hashCode = (hashCode * 59) + this.Voltage.GetHashCode();
                }
                if (this.ChargerRAT != null)
                {
                    hashCode = (hashCode * 59) + this.ChargerRAT.GetHashCode();
                }
                if (this.LockCablePermanently != null)
                {
                    hashCode = (hashCode * 59) + this.LockCablePermanently.GetHashCode();
                }
                if (this.InCurrentT2 != null)
                {
                    hashCode = (hashCode * 59) + this.InCurrentT2.GetHashCode();
                }
                if (this.InCurrentT3 != null)
                {
                    hashCode = (hashCode * 59) + this.InCurrentT3.GetHashCode();
                }
                if (this.InCurrentT4 != null)
                {
                    hashCode = (hashCode * 59) + this.InCurrentT4.GetHashCode();
                }
                if (this.InCurrentT5 != null)
                {
                    hashCode = (hashCode * 59) + this.InCurrentT5.GetHashCode();
                }
                if (this.OutputCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.OutputCurrent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsOnline.GetHashCode();
                if (this.InVoltageT1T2 != null)
                {
                    hashCode = (hashCode * 59) + this.InVoltageT1T2.GetHashCode();
                }
                if (this.InVoltageT1T3 != null)
                {
                    hashCode = (hashCode * 59) + this.InVoltageT1T3.GetHashCode();
                }
                if (this.InVoltageT1T4 != null)
                {
                    hashCode = (hashCode * 59) + this.InVoltageT1T4.GetHashCode();
                }
                if (this.InVoltageT1T5 != null)
                {
                    hashCode = (hashCode * 59) + this.InVoltageT1T5.GetHashCode();
                }
                if (this.InVoltageT2T3 != null)
                {
                    hashCode = (hashCode * 59) + this.InVoltageT2T3.GetHashCode();
                }
                if (this.InVoltageT2T4 != null)
                {
                    hashCode = (hashCode * 59) + this.InVoltageT2T4.GetHashCode();
                }
                if (this.InVoltageT2T5 != null)
                {
                    hashCode = (hashCode * 59) + this.InVoltageT2T5.GetHashCode();
                }
                if (this.InVoltageT3T4 != null)
                {
                    hashCode = (hashCode * 59) + this.InVoltageT3T4.GetHashCode();
                }
                if (this.InVoltageT3T5 != null)
                {
                    hashCode = (hashCode * 59) + this.InVoltageT3T5.GetHashCode();
                }
                if (this.InVoltageT4T5 != null)
                {
                    hashCode = (hashCode * 59) + this.InVoltageT4T5.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LedMode.GetHashCode();
                if (this.CableRating != null)
                {
                    hashCode = (hashCode * 59) + this.CableRating.GetHashCode();
                }
                if (this.DynamicChargerCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicChargerCurrent.GetHashCode();
                }
                if (this.CircuitTotalAllocatedPhaseConductorCurrentL1 != null)
                {
                    hashCode = (hashCode * 59) + this.CircuitTotalAllocatedPhaseConductorCurrentL1.GetHashCode();
                }
                if (this.CircuitTotalAllocatedPhaseConductorCurrentL2 != null)
                {
                    hashCode = (hashCode * 59) + this.CircuitTotalAllocatedPhaseConductorCurrentL2.GetHashCode();
                }
                if (this.CircuitTotalAllocatedPhaseConductorCurrentL3 != null)
                {
                    hashCode = (hashCode * 59) + this.CircuitTotalAllocatedPhaseConductorCurrentL3.GetHashCode();
                }
                if (this.CircuitTotalPhaseConductorCurrentL1 != null)
                {
                    hashCode = (hashCode * 59) + this.CircuitTotalPhaseConductorCurrentL1.GetHashCode();
                }
                if (this.CircuitTotalPhaseConductorCurrentL2 != null)
                {
                    hashCode = (hashCode * 59) + this.CircuitTotalPhaseConductorCurrentL2.GetHashCode();
                }
                if (this.CircuitTotalPhaseConductorCurrentL3 != null)
                {
                    hashCode = (hashCode * 59) + this.CircuitTotalPhaseConductorCurrentL3.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReasonForNoCurrent.GetHashCode();
                if (this.WiFiAPEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.WiFiAPEnabled.GetHashCode();
                }
                if (this.LifetimeEnergy != null)
                {
                    hashCode = (hashCode * 59) + this.LifetimeEnergy.GetHashCode();
                }
                if (this.OfflineMaxCircuitCurrentP1 != null)
                {
                    hashCode = (hashCode * 59) + this.OfflineMaxCircuitCurrentP1.GetHashCode();
                }
                if (this.OfflineMaxCircuitCurrentP2 != null)
                {
                    hashCode = (hashCode * 59) + this.OfflineMaxCircuitCurrentP2.GetHashCode();
                }
                if (this.OfflineMaxCircuitCurrentP3 != null)
                {
                    hashCode = (hashCode * 59) + this.OfflineMaxCircuitCurrentP3.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                hashCode = (hashCode * 59) + this.FatalErrorCode.GetHashCode();
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                if (this.EqAvailableCurrentP1 != null)
                {
                    hashCode = (hashCode * 59) + this.EqAvailableCurrentP1.GetHashCode();
                }
                if (this.EqAvailableCurrentP2 != null)
                {
                    hashCode = (hashCode * 59) + this.EqAvailableCurrentP2.GetHashCode();
                }
                if (this.EqAvailableCurrentP3 != null)
                {
                    hashCode = (hashCode * 59) + this.EqAvailableCurrentP3.GetHashCode();
                }
                if (this.DeratedCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.DeratedCurrent.GetHashCode();
                }
                if (this.DeratingActive != null)
                {
                    hashCode = (hashCode * 59) + this.DeratingActive.GetHashCode();
                }
                if (this.ConnectedToCloud != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectedToCloud.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
