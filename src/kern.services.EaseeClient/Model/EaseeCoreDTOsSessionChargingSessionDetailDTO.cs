/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsSessionChargingSessionDetailDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Session.ChargingSessionDetailDTO")]
    public partial class EaseeCoreDTOsSessionChargingSessionDetailDTO : IEquatable<EaseeCoreDTOsSessionChargingSessionDetailDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsSessionChargingSessionDetailDTO" /> class.
        /// </summary>
        /// <param name="chargerId">chargerId.</param>
        /// <param name="chargerName">chargerName.</param>
        /// <param name="totalEnergyUsage">totalEnergyUsage.</param>
        /// <param name="totalCost">totalCost.</param>
        /// <param name="currencyId">currencyId.</param>
        public EaseeCoreDTOsSessionChargingSessionDetailDTO(string chargerId = default(string), string chargerName = default(string), double totalEnergyUsage = default(double), double totalCost = default(double), string currencyId = default(string))
        {
            this.ChargerId = chargerId;
            this.ChargerName = chargerName;
            this.TotalEnergyUsage = totalEnergyUsage;
            this.TotalCost = totalCost;
            this.CurrencyId = currencyId;
        }

        /// <summary>
        /// Gets or Sets ChargerId
        /// </summary>
        [DataMember(Name = "chargerId", EmitDefaultValue = true)]
        public string ChargerId { get; set; }

        /// <summary>
        /// Gets or Sets ChargerName
        /// </summary>
        [DataMember(Name = "chargerName", EmitDefaultValue = true)]
        public string ChargerName { get; set; }

        /// <summary>
        /// Gets or Sets TotalEnergyUsage
        /// </summary>
        [DataMember(Name = "totalEnergyUsage", EmitDefaultValue = false)]
        public double TotalEnergyUsage { get; set; }

        /// <summary>
        /// Gets or Sets TotalCost
        /// </summary>
        [DataMember(Name = "totalCost", EmitDefaultValue = false)]
        public double TotalCost { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name = "currencyId", EmitDefaultValue = true)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsSessionChargingSessionDetailDTO {\n");
            sb.Append("  ChargerId: ").Append(ChargerId).Append("\n");
            sb.Append("  ChargerName: ").Append(ChargerName).Append("\n");
            sb.Append("  TotalEnergyUsage: ").Append(TotalEnergyUsage).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsSessionChargingSessionDetailDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsSessionChargingSessionDetailDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsSessionChargingSessionDetailDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsSessionChargingSessionDetailDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChargerId == input.ChargerId ||
                    (this.ChargerId != null &&
                    this.ChargerId.Equals(input.ChargerId))
                ) && 
                (
                    this.ChargerName == input.ChargerName ||
                    (this.ChargerName != null &&
                    this.ChargerName.Equals(input.ChargerName))
                ) && 
                (
                    this.TotalEnergyUsage == input.TotalEnergyUsage ||
                    this.TotalEnergyUsage.Equals(input.TotalEnergyUsage)
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    this.TotalCost.Equals(input.TotalCost)
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChargerId != null)
                {
                    hashCode = (hashCode * 59) + this.ChargerId.GetHashCode();
                }
                if (this.ChargerName != null)
                {
                    hashCode = (hashCode * 59) + this.ChargerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalEnergyUsage.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalCost.GetHashCode();
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
