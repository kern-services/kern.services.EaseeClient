/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsEqualizerEqualizerStateDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Equalizer.EqualizerStateDTO")]
    public partial class EaseeCoreDTOsEqualizerEqualizerStateDTO : IEquatable<EaseeCoreDTOsEqualizerEqualizerStateDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsEqualizerEqualizerStateDTO" /> class.
        /// </summary>
        /// <param name="currentL1">currentL1.</param>
        /// <param name="currentL2">currentL2.</param>
        /// <param name="currentL3">currentL3.</param>
        /// <param name="voltageNL1">voltageNL1.</param>
        /// <param name="voltageNL2">voltageNL2.</param>
        /// <param name="voltageNL3">voltageNL3.</param>
        /// <param name="voltageL1L2">voltageL1L2.</param>
        /// <param name="voltageL1L3">voltageL1L3.</param>
        /// <param name="voltageL2L3">voltageL2L3.</param>
        /// <param name="activePowerImport">activePowerImport.</param>
        /// <param name="activePowerExport">activePowerExport.</param>
        /// <param name="reactivePowerImport">reactivePowerImport.</param>
        /// <param name="reactivePowerExport">reactivePowerExport.</param>
        /// <param name="cumulativeActivePowerImport">cumulativeActivePowerImport.</param>
        /// <param name="cumulativeActivePowerExport">cumulativeActivePowerExport.</param>
        /// <param name="cumulativeReactivePowerImport">cumulativeReactivePowerImport.</param>
        /// <param name="cumulativeReactivePowerExport">cumulativeReactivePowerExport.</param>
        /// <param name="clockAndDateMeter">clockAndDateMeter.</param>
        /// <param name="rcpi">rcpi.</param>
        /// <param name="maxPowerImport">maxPowerImport.</param>
        /// <param name="localRSSI">localRSSI.</param>
        /// <param name="softwareRelease">softwareRelease.</param>
        /// <param name="latestFirmware">latestFirmware.</param>
        /// <param name="isOnline">isOnline.</param>
        /// <param name="latestPulse">latestPulse.</param>
        /// <param name="ledMode">ledMode.</param>
        /// <param name="equalizedChargeCurrentL1">equalizedChargeCurrentL1.</param>
        /// <param name="equalizedChargeCurrentL2">equalizedChargeCurrentL2.</param>
        /// <param name="equalizedChargeCurrentL3">equalizedChargeCurrentL3.</param>
        /// <param name="connectedToCloud">connectedToCloud.</param>
        public EaseeCoreDTOsEqualizerEqualizerStateDTO(double? currentL1 = default(double?), double? currentL2 = default(double?), double? currentL3 = default(double?), double? voltageNL1 = default(double?), double? voltageNL2 = default(double?), double? voltageNL3 = default(double?), double? voltageL1L2 = default(double?), double? voltageL1L3 = default(double?), double? voltageL2L3 = default(double?), double? activePowerImport = default(double?), double? activePowerExport = default(double?), double? reactivePowerImport = default(double?), double? reactivePowerExport = default(double?), double? cumulativeActivePowerImport = default(double?), double? cumulativeActivePowerExport = default(double?), double? cumulativeReactivePowerImport = default(double?), double? cumulativeReactivePowerExport = default(double?), string clockAndDateMeter = default(string), double? rcpi = default(double?), double? maxPowerImport = default(double?), int? localRSSI = default(int?), int? softwareRelease = default(int?), int? latestFirmware = default(int?), bool isOnline = default(bool), DateTime? latestPulse = default(DateTime?), int? ledMode = default(int?), double? equalizedChargeCurrentL1 = default(double?), double? equalizedChargeCurrentL2 = default(double?), double? equalizedChargeCurrentL3 = default(double?), bool? connectedToCloud = default(bool?))
        {
            this.CurrentL1 = currentL1;
            this.CurrentL2 = currentL2;
            this.CurrentL3 = currentL3;
            this.VoltageNL1 = voltageNL1;
            this.VoltageNL2 = voltageNL2;
            this.VoltageNL3 = voltageNL3;
            this.VoltageL1L2 = voltageL1L2;
            this.VoltageL1L3 = voltageL1L3;
            this.VoltageL2L3 = voltageL2L3;
            this.ActivePowerImport = activePowerImport;
            this.ActivePowerExport = activePowerExport;
            this.ReactivePowerImport = reactivePowerImport;
            this.ReactivePowerExport = reactivePowerExport;
            this.CumulativeActivePowerImport = cumulativeActivePowerImport;
            this.CumulativeActivePowerExport = cumulativeActivePowerExport;
            this.CumulativeReactivePowerImport = cumulativeReactivePowerImport;
            this.CumulativeReactivePowerExport = cumulativeReactivePowerExport;
            this.ClockAndDateMeter = clockAndDateMeter;
            this.Rcpi = rcpi;
            this.MaxPowerImport = maxPowerImport;
            this.LocalRSSI = localRSSI;
            this.SoftwareRelease = softwareRelease;
            this.LatestFirmware = latestFirmware;
            this.IsOnline = isOnline;
            this.LatestPulse = latestPulse;
            this.LedMode = ledMode;
            this.EqualizedChargeCurrentL1 = equalizedChargeCurrentL1;
            this.EqualizedChargeCurrentL2 = equalizedChargeCurrentL2;
            this.EqualizedChargeCurrentL3 = equalizedChargeCurrentL3;
            this.ConnectedToCloud = connectedToCloud;
        }

        /// <summary>
        /// Gets or Sets CurrentL1
        /// </summary>
        [DataMember(Name = "currentL1", EmitDefaultValue = true)]
        public double? CurrentL1 { get; set; }

        /// <summary>
        /// Gets or Sets CurrentL2
        /// </summary>
        [DataMember(Name = "currentL2", EmitDefaultValue = true)]
        public double? CurrentL2 { get; set; }

        /// <summary>
        /// Gets or Sets CurrentL3
        /// </summary>
        [DataMember(Name = "currentL3", EmitDefaultValue = true)]
        public double? CurrentL3 { get; set; }

        /// <summary>
        /// Gets or Sets VoltageNL1
        /// </summary>
        [DataMember(Name = "voltageNL1", EmitDefaultValue = true)]
        public double? VoltageNL1 { get; set; }

        /// <summary>
        /// Gets or Sets VoltageNL2
        /// </summary>
        [DataMember(Name = "voltageNL2", EmitDefaultValue = true)]
        public double? VoltageNL2 { get; set; }

        /// <summary>
        /// Gets or Sets VoltageNL3
        /// </summary>
        [DataMember(Name = "voltageNL3", EmitDefaultValue = true)]
        public double? VoltageNL3 { get; set; }

        /// <summary>
        /// Gets or Sets VoltageL1L2
        /// </summary>
        [DataMember(Name = "voltageL1L2", EmitDefaultValue = true)]
        public double? VoltageL1L2 { get; set; }

        /// <summary>
        /// Gets or Sets VoltageL1L3
        /// </summary>
        [DataMember(Name = "voltageL1L3", EmitDefaultValue = true)]
        public double? VoltageL1L3 { get; set; }

        /// <summary>
        /// Gets or Sets VoltageL2L3
        /// </summary>
        [DataMember(Name = "voltageL2L3", EmitDefaultValue = true)]
        public double? VoltageL2L3 { get; set; }

        /// <summary>
        /// Gets or Sets ActivePowerImport
        /// </summary>
        [DataMember(Name = "activePowerImport", EmitDefaultValue = true)]
        public double? ActivePowerImport { get; set; }

        /// <summary>
        /// Gets or Sets ActivePowerExport
        /// </summary>
        [DataMember(Name = "activePowerExport", EmitDefaultValue = true)]
        public double? ActivePowerExport { get; set; }

        /// <summary>
        /// Gets or Sets ReactivePowerImport
        /// </summary>
        [DataMember(Name = "reactivePowerImport", EmitDefaultValue = true)]
        public double? ReactivePowerImport { get; set; }

        /// <summary>
        /// Gets or Sets ReactivePowerExport
        /// </summary>
        [DataMember(Name = "reactivePowerExport", EmitDefaultValue = true)]
        public double? ReactivePowerExport { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeActivePowerImport
        /// </summary>
        [DataMember(Name = "cumulativeActivePowerImport", EmitDefaultValue = true)]
        public double? CumulativeActivePowerImport { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeActivePowerExport
        /// </summary>
        [DataMember(Name = "cumulativeActivePowerExport", EmitDefaultValue = true)]
        public double? CumulativeActivePowerExport { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeReactivePowerImport
        /// </summary>
        [DataMember(Name = "cumulativeReactivePowerImport", EmitDefaultValue = true)]
        public double? CumulativeReactivePowerImport { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeReactivePowerExport
        /// </summary>
        [DataMember(Name = "cumulativeReactivePowerExport", EmitDefaultValue = true)]
        public double? CumulativeReactivePowerExport { get; set; }

        /// <summary>
        /// Gets or Sets ClockAndDateMeter
        /// </summary>
        [DataMember(Name = "clockAndDateMeter", EmitDefaultValue = true)]
        public string ClockAndDateMeter { get; set; }

        /// <summary>
        /// Gets or Sets Rcpi
        /// </summary>
        [DataMember(Name = "rcpi", EmitDefaultValue = true)]
        public double? Rcpi { get; set; }

        /// <summary>
        /// Gets or Sets MaxPowerImport
        /// </summary>
        [DataMember(Name = "maxPowerImport", EmitDefaultValue = true)]
        public double? MaxPowerImport { get; set; }

        /// <summary>
        /// Gets or Sets LocalRSSI
        /// </summary>
        [DataMember(Name = "localRSSI", EmitDefaultValue = true)]
        public int? LocalRSSI { get; set; }

        /// <summary>
        /// Gets or Sets SoftwareRelease
        /// </summary>
        [DataMember(Name = "softwareRelease", EmitDefaultValue = true)]
        public int? SoftwareRelease { get; set; }

        /// <summary>
        /// Gets or Sets LatestFirmware
        /// </summary>
        [DataMember(Name = "latestFirmware", EmitDefaultValue = true)]
        public int? LatestFirmware { get; set; }

        /// <summary>
        /// Gets or Sets IsOnline
        /// </summary>
        [DataMember(Name = "isOnline", EmitDefaultValue = true)]
        public bool IsOnline { get; set; }

        /// <summary>
        /// Gets or Sets LatestPulse
        /// </summary>
        [DataMember(Name = "latestPulse", EmitDefaultValue = true)]
        public DateTime? LatestPulse { get; set; }

        /// <summary>
        /// Gets or Sets LedMode
        /// </summary>
        [DataMember(Name = "ledMode", EmitDefaultValue = true)]
        public int? LedMode { get; set; }

        /// <summary>
        /// Gets or Sets EqualizedChargeCurrentL1
        /// </summary>
        [DataMember(Name = "equalizedChargeCurrent_L1", EmitDefaultValue = true)]
        public double? EqualizedChargeCurrentL1 { get; set; }

        /// <summary>
        /// Gets or Sets EqualizedChargeCurrentL2
        /// </summary>
        [DataMember(Name = "equalizedChargeCurrent_L2", EmitDefaultValue = true)]
        public double? EqualizedChargeCurrentL2 { get; set; }

        /// <summary>
        /// Gets or Sets EqualizedChargeCurrentL3
        /// </summary>
        [DataMember(Name = "equalizedChargeCurrent_L3", EmitDefaultValue = true)]
        public double? EqualizedChargeCurrentL3 { get; set; }

        /// <summary>
        /// Gets or Sets ConnectedToCloud
        /// </summary>
        [DataMember(Name = "connectedToCloud", EmitDefaultValue = true)]
        public bool? ConnectedToCloud { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsEqualizerEqualizerStateDTO {\n");
            sb.Append("  CurrentL1: ").Append(CurrentL1).Append("\n");
            sb.Append("  CurrentL2: ").Append(CurrentL2).Append("\n");
            sb.Append("  CurrentL3: ").Append(CurrentL3).Append("\n");
            sb.Append("  VoltageNL1: ").Append(VoltageNL1).Append("\n");
            sb.Append("  VoltageNL2: ").Append(VoltageNL2).Append("\n");
            sb.Append("  VoltageNL3: ").Append(VoltageNL3).Append("\n");
            sb.Append("  VoltageL1L2: ").Append(VoltageL1L2).Append("\n");
            sb.Append("  VoltageL1L3: ").Append(VoltageL1L3).Append("\n");
            sb.Append("  VoltageL2L3: ").Append(VoltageL2L3).Append("\n");
            sb.Append("  ActivePowerImport: ").Append(ActivePowerImport).Append("\n");
            sb.Append("  ActivePowerExport: ").Append(ActivePowerExport).Append("\n");
            sb.Append("  ReactivePowerImport: ").Append(ReactivePowerImport).Append("\n");
            sb.Append("  ReactivePowerExport: ").Append(ReactivePowerExport).Append("\n");
            sb.Append("  CumulativeActivePowerImport: ").Append(CumulativeActivePowerImport).Append("\n");
            sb.Append("  CumulativeActivePowerExport: ").Append(CumulativeActivePowerExport).Append("\n");
            sb.Append("  CumulativeReactivePowerImport: ").Append(CumulativeReactivePowerImport).Append("\n");
            sb.Append("  CumulativeReactivePowerExport: ").Append(CumulativeReactivePowerExport).Append("\n");
            sb.Append("  ClockAndDateMeter: ").Append(ClockAndDateMeter).Append("\n");
            sb.Append("  Rcpi: ").Append(Rcpi).Append("\n");
            sb.Append("  MaxPowerImport: ").Append(MaxPowerImport).Append("\n");
            sb.Append("  LocalRSSI: ").Append(LocalRSSI).Append("\n");
            sb.Append("  SoftwareRelease: ").Append(SoftwareRelease).Append("\n");
            sb.Append("  LatestFirmware: ").Append(LatestFirmware).Append("\n");
            sb.Append("  IsOnline: ").Append(IsOnline).Append("\n");
            sb.Append("  LatestPulse: ").Append(LatestPulse).Append("\n");
            sb.Append("  LedMode: ").Append(LedMode).Append("\n");
            sb.Append("  EqualizedChargeCurrentL1: ").Append(EqualizedChargeCurrentL1).Append("\n");
            sb.Append("  EqualizedChargeCurrentL2: ").Append(EqualizedChargeCurrentL2).Append("\n");
            sb.Append("  EqualizedChargeCurrentL3: ").Append(EqualizedChargeCurrentL3).Append("\n");
            sb.Append("  ConnectedToCloud: ").Append(ConnectedToCloud).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsEqualizerEqualizerStateDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsEqualizerEqualizerStateDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsEqualizerEqualizerStateDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsEqualizerEqualizerStateDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrentL1 == input.CurrentL1 ||
                    (this.CurrentL1 != null &&
                    this.CurrentL1.Equals(input.CurrentL1))
                ) && 
                (
                    this.CurrentL2 == input.CurrentL2 ||
                    (this.CurrentL2 != null &&
                    this.CurrentL2.Equals(input.CurrentL2))
                ) && 
                (
                    this.CurrentL3 == input.CurrentL3 ||
                    (this.CurrentL3 != null &&
                    this.CurrentL3.Equals(input.CurrentL3))
                ) && 
                (
                    this.VoltageNL1 == input.VoltageNL1 ||
                    (this.VoltageNL1 != null &&
                    this.VoltageNL1.Equals(input.VoltageNL1))
                ) && 
                (
                    this.VoltageNL2 == input.VoltageNL2 ||
                    (this.VoltageNL2 != null &&
                    this.VoltageNL2.Equals(input.VoltageNL2))
                ) && 
                (
                    this.VoltageNL3 == input.VoltageNL3 ||
                    (this.VoltageNL3 != null &&
                    this.VoltageNL3.Equals(input.VoltageNL3))
                ) && 
                (
                    this.VoltageL1L2 == input.VoltageL1L2 ||
                    (this.VoltageL1L2 != null &&
                    this.VoltageL1L2.Equals(input.VoltageL1L2))
                ) && 
                (
                    this.VoltageL1L3 == input.VoltageL1L3 ||
                    (this.VoltageL1L3 != null &&
                    this.VoltageL1L3.Equals(input.VoltageL1L3))
                ) && 
                (
                    this.VoltageL2L3 == input.VoltageL2L3 ||
                    (this.VoltageL2L3 != null &&
                    this.VoltageL2L3.Equals(input.VoltageL2L3))
                ) && 
                (
                    this.ActivePowerImport == input.ActivePowerImport ||
                    (this.ActivePowerImport != null &&
                    this.ActivePowerImport.Equals(input.ActivePowerImport))
                ) && 
                (
                    this.ActivePowerExport == input.ActivePowerExport ||
                    (this.ActivePowerExport != null &&
                    this.ActivePowerExport.Equals(input.ActivePowerExport))
                ) && 
                (
                    this.ReactivePowerImport == input.ReactivePowerImport ||
                    (this.ReactivePowerImport != null &&
                    this.ReactivePowerImport.Equals(input.ReactivePowerImport))
                ) && 
                (
                    this.ReactivePowerExport == input.ReactivePowerExport ||
                    (this.ReactivePowerExport != null &&
                    this.ReactivePowerExport.Equals(input.ReactivePowerExport))
                ) && 
                (
                    this.CumulativeActivePowerImport == input.CumulativeActivePowerImport ||
                    (this.CumulativeActivePowerImport != null &&
                    this.CumulativeActivePowerImport.Equals(input.CumulativeActivePowerImport))
                ) && 
                (
                    this.CumulativeActivePowerExport == input.CumulativeActivePowerExport ||
                    (this.CumulativeActivePowerExport != null &&
                    this.CumulativeActivePowerExport.Equals(input.CumulativeActivePowerExport))
                ) && 
                (
                    this.CumulativeReactivePowerImport == input.CumulativeReactivePowerImport ||
                    (this.CumulativeReactivePowerImport != null &&
                    this.CumulativeReactivePowerImport.Equals(input.CumulativeReactivePowerImport))
                ) && 
                (
                    this.CumulativeReactivePowerExport == input.CumulativeReactivePowerExport ||
                    (this.CumulativeReactivePowerExport != null &&
                    this.CumulativeReactivePowerExport.Equals(input.CumulativeReactivePowerExport))
                ) && 
                (
                    this.ClockAndDateMeter == input.ClockAndDateMeter ||
                    (this.ClockAndDateMeter != null &&
                    this.ClockAndDateMeter.Equals(input.ClockAndDateMeter))
                ) && 
                (
                    this.Rcpi == input.Rcpi ||
                    (this.Rcpi != null &&
                    this.Rcpi.Equals(input.Rcpi))
                ) && 
                (
                    this.MaxPowerImport == input.MaxPowerImport ||
                    (this.MaxPowerImport != null &&
                    this.MaxPowerImport.Equals(input.MaxPowerImport))
                ) && 
                (
                    this.LocalRSSI == input.LocalRSSI ||
                    (this.LocalRSSI != null &&
                    this.LocalRSSI.Equals(input.LocalRSSI))
                ) && 
                (
                    this.SoftwareRelease == input.SoftwareRelease ||
                    (this.SoftwareRelease != null &&
                    this.SoftwareRelease.Equals(input.SoftwareRelease))
                ) && 
                (
                    this.LatestFirmware == input.LatestFirmware ||
                    (this.LatestFirmware != null &&
                    this.LatestFirmware.Equals(input.LatestFirmware))
                ) && 
                (
                    this.IsOnline == input.IsOnline ||
                    this.IsOnline.Equals(input.IsOnline)
                ) && 
                (
                    this.LatestPulse == input.LatestPulse ||
                    (this.LatestPulse != null &&
                    this.LatestPulse.Equals(input.LatestPulse))
                ) && 
                (
                    this.LedMode == input.LedMode ||
                    (this.LedMode != null &&
                    this.LedMode.Equals(input.LedMode))
                ) && 
                (
                    this.EqualizedChargeCurrentL1 == input.EqualizedChargeCurrentL1 ||
                    (this.EqualizedChargeCurrentL1 != null &&
                    this.EqualizedChargeCurrentL1.Equals(input.EqualizedChargeCurrentL1))
                ) && 
                (
                    this.EqualizedChargeCurrentL2 == input.EqualizedChargeCurrentL2 ||
                    (this.EqualizedChargeCurrentL2 != null &&
                    this.EqualizedChargeCurrentL2.Equals(input.EqualizedChargeCurrentL2))
                ) && 
                (
                    this.EqualizedChargeCurrentL3 == input.EqualizedChargeCurrentL3 ||
                    (this.EqualizedChargeCurrentL3 != null &&
                    this.EqualizedChargeCurrentL3.Equals(input.EqualizedChargeCurrentL3))
                ) && 
                (
                    this.ConnectedToCloud == input.ConnectedToCloud ||
                    (this.ConnectedToCloud != null &&
                    this.ConnectedToCloud.Equals(input.ConnectedToCloud))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentL1 != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentL1.GetHashCode();
                }
                if (this.CurrentL2 != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentL2.GetHashCode();
                }
                if (this.CurrentL3 != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentL3.GetHashCode();
                }
                if (this.VoltageNL1 != null)
                {
                    hashCode = (hashCode * 59) + this.VoltageNL1.GetHashCode();
                }
                if (this.VoltageNL2 != null)
                {
                    hashCode = (hashCode * 59) + this.VoltageNL2.GetHashCode();
                }
                if (this.VoltageNL3 != null)
                {
                    hashCode = (hashCode * 59) + this.VoltageNL3.GetHashCode();
                }
                if (this.VoltageL1L2 != null)
                {
                    hashCode = (hashCode * 59) + this.VoltageL1L2.GetHashCode();
                }
                if (this.VoltageL1L3 != null)
                {
                    hashCode = (hashCode * 59) + this.VoltageL1L3.GetHashCode();
                }
                if (this.VoltageL2L3 != null)
                {
                    hashCode = (hashCode * 59) + this.VoltageL2L3.GetHashCode();
                }
                if (this.ActivePowerImport != null)
                {
                    hashCode = (hashCode * 59) + this.ActivePowerImport.GetHashCode();
                }
                if (this.ActivePowerExport != null)
                {
                    hashCode = (hashCode * 59) + this.ActivePowerExport.GetHashCode();
                }
                if (this.ReactivePowerImport != null)
                {
                    hashCode = (hashCode * 59) + this.ReactivePowerImport.GetHashCode();
                }
                if (this.ReactivePowerExport != null)
                {
                    hashCode = (hashCode * 59) + this.ReactivePowerExport.GetHashCode();
                }
                if (this.CumulativeActivePowerImport != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeActivePowerImport.GetHashCode();
                }
                if (this.CumulativeActivePowerExport != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeActivePowerExport.GetHashCode();
                }
                if (this.CumulativeReactivePowerImport != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeReactivePowerImport.GetHashCode();
                }
                if (this.CumulativeReactivePowerExport != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeReactivePowerExport.GetHashCode();
                }
                if (this.ClockAndDateMeter != null)
                {
                    hashCode = (hashCode * 59) + this.ClockAndDateMeter.GetHashCode();
                }
                if (this.Rcpi != null)
                {
                    hashCode = (hashCode * 59) + this.Rcpi.GetHashCode();
                }
                if (this.MaxPowerImport != null)
                {
                    hashCode = (hashCode * 59) + this.MaxPowerImport.GetHashCode();
                }
                if (this.LocalRSSI != null)
                {
                    hashCode = (hashCode * 59) + this.LocalRSSI.GetHashCode();
                }
                if (this.SoftwareRelease != null)
                {
                    hashCode = (hashCode * 59) + this.SoftwareRelease.GetHashCode();
                }
                if (this.LatestFirmware != null)
                {
                    hashCode = (hashCode * 59) + this.LatestFirmware.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsOnline.GetHashCode();
                if (this.LatestPulse != null)
                {
                    hashCode = (hashCode * 59) + this.LatestPulse.GetHashCode();
                }
                if (this.LedMode != null)
                {
                    hashCode = (hashCode * 59) + this.LedMode.GetHashCode();
                }
                if (this.EqualizedChargeCurrentL1 != null)
                {
                    hashCode = (hashCode * 59) + this.EqualizedChargeCurrentL1.GetHashCode();
                }
                if (this.EqualizedChargeCurrentL2 != null)
                {
                    hashCode = (hashCode * 59) + this.EqualizedChargeCurrentL2.GetHashCode();
                }
                if (this.EqualizedChargeCurrentL3 != null)
                {
                    hashCode = (hashCode * 59) + this.EqualizedChargeCurrentL3.GetHashCode();
                }
                if (this.ConnectedToCloud != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectedToCloud.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
