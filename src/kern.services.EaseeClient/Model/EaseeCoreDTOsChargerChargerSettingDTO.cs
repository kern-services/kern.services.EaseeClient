/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsChargerChargerSettingDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Charger.ChargerSettingDTO")]
    public partial class EaseeCoreDTOsChargerChargerSettingDTO : IEquatable<EaseeCoreDTOsChargerChargerSettingDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsChargerChargerSettingDTO" /> class.
        /// </summary>
        /// <param name="enabled">enabled.</param>
        /// <param name="enableIdleCurrent">enableIdleCurrent.</param>
        /// <param name="limitToSinglePhaseCharging">limitToSinglePhaseCharging.</param>
        /// <param name="lockCablePermanently">lockCablePermanently.</param>
        /// <param name="smartButtonEnabled">smartButtonEnabled.</param>
        /// <param name="phaseMode">phaseMode.</param>
        /// <param name="smartCharging">smartCharging.</param>
        /// <param name="localPreAuthorizeEnabled">localPreAuthorizeEnabled.</param>
        /// <param name="localAuthorizeOfflineEnabled">localAuthorizeOfflineEnabled.</param>
        /// <param name="allowOfflineTxForUnknownId">allowOfflineTxForUnknownId.</param>
        /// <param name="offlineChargingMode">offlineChargingMode.</param>
        /// <param name="authorizationRequired">authorizationRequired.</param>
        /// <param name="remoteStartRequired">remoteStartRequired.</param>
        /// <param name="ledStripBrightness">ledStripBrightness.</param>
        /// <param name="maxChargerCurrent">maxChargerCurrent.</param>
        /// <param name="dynamicChargerCurrent">dynamicChargerCurrent.</param>
        public EaseeCoreDTOsChargerChargerSettingDTO(bool? enabled = default(bool?), bool? enableIdleCurrent = default(bool?), bool? limitToSinglePhaseCharging = default(bool?), bool? lockCablePermanently = default(bool?), bool? smartButtonEnabled = default(bool?), int? phaseMode = default(int?), bool? smartCharging = default(bool?), bool? localPreAuthorizeEnabled = default(bool?), bool? localAuthorizeOfflineEnabled = default(bool?), bool? allowOfflineTxForUnknownId = default(bool?), int? offlineChargingMode = default(int?), bool? authorizationRequired = default(bool?), bool? remoteStartRequired = default(bool?), int? ledStripBrightness = default(int?), double? maxChargerCurrent = default(double?), double? dynamicChargerCurrent = default(double?))
        {
            this.Enabled = enabled;
            this.EnableIdleCurrent = enableIdleCurrent;
            this.LimitToSinglePhaseCharging = limitToSinglePhaseCharging;
            this.LockCablePermanently = lockCablePermanently;
            this.SmartButtonEnabled = smartButtonEnabled;
            this.PhaseMode = phaseMode;
            this.SmartCharging = smartCharging;
            this.LocalPreAuthorizeEnabled = localPreAuthorizeEnabled;
            this.LocalAuthorizeOfflineEnabled = localAuthorizeOfflineEnabled;
            this.AllowOfflineTxForUnknownId = allowOfflineTxForUnknownId;
            this.OfflineChargingMode = offlineChargingMode;
            this.AuthorizationRequired = authorizationRequired;
            this.RemoteStartRequired = remoteStartRequired;
            this.LedStripBrightness = ledStripBrightness;
            this.MaxChargerCurrent = maxChargerCurrent;
            this.DynamicChargerCurrent = dynamicChargerCurrent;
        }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets EnableIdleCurrent
        /// </summary>
        [DataMember(Name = "enableIdleCurrent", EmitDefaultValue = true)]
        public bool? EnableIdleCurrent { get; set; }

        /// <summary>
        /// Gets or Sets LimitToSinglePhaseCharging
        /// </summary>
        [DataMember(Name = "limitToSinglePhaseCharging", EmitDefaultValue = true)]
        public bool? LimitToSinglePhaseCharging { get; set; }

        /// <summary>
        /// Gets or Sets LockCablePermanently
        /// </summary>
        [DataMember(Name = "lockCablePermanently", EmitDefaultValue = true)]
        public bool? LockCablePermanently { get; set; }

        /// <summary>
        /// Gets or Sets SmartButtonEnabled
        /// </summary>
        [DataMember(Name = "smartButtonEnabled", EmitDefaultValue = true)]
        public bool? SmartButtonEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PhaseMode
        /// </summary>
        [DataMember(Name = "phaseMode", EmitDefaultValue = true)]
        public int? PhaseMode { get; set; }

        /// <summary>
        /// Gets or Sets SmartCharging
        /// </summary>
        [DataMember(Name = "smartCharging", EmitDefaultValue = true)]
        public bool? SmartCharging { get; set; }

        /// <summary>
        /// Gets or Sets LocalPreAuthorizeEnabled
        /// </summary>
        [DataMember(Name = "localPreAuthorizeEnabled", EmitDefaultValue = true)]
        public bool? LocalPreAuthorizeEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LocalAuthorizeOfflineEnabled
        /// </summary>
        [DataMember(Name = "localAuthorizeOfflineEnabled", EmitDefaultValue = true)]
        public bool? LocalAuthorizeOfflineEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AllowOfflineTxForUnknownId
        /// </summary>
        [DataMember(Name = "allowOfflineTxForUnknownId", EmitDefaultValue = true)]
        public bool? AllowOfflineTxForUnknownId { get; set; }

        /// <summary>
        /// Gets or Sets OfflineChargingMode
        /// </summary>
        [DataMember(Name = "offlineChargingMode", EmitDefaultValue = true)]
        public int? OfflineChargingMode { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationRequired
        /// </summary>
        [DataMember(Name = "authorizationRequired", EmitDefaultValue = true)]
        public bool? AuthorizationRequired { get; set; }

        /// <summary>
        /// Gets or Sets RemoteStartRequired
        /// </summary>
        [DataMember(Name = "remoteStartRequired", EmitDefaultValue = true)]
        public bool? RemoteStartRequired { get; set; }

        /// <summary>
        /// Gets or Sets LedStripBrightness
        /// </summary>
        [DataMember(Name = "ledStripBrightness", EmitDefaultValue = true)]
        public int? LedStripBrightness { get; set; }

        /// <summary>
        /// Gets or Sets MaxChargerCurrent
        /// </summary>
        [DataMember(Name = "maxChargerCurrent", EmitDefaultValue = true)]
        public double? MaxChargerCurrent { get; set; }

        /// <summary>
        /// Gets or Sets DynamicChargerCurrent
        /// </summary>
        [DataMember(Name = "dynamicChargerCurrent", EmitDefaultValue = true)]
        public double? DynamicChargerCurrent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsChargerChargerSettingDTO {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  EnableIdleCurrent: ").Append(EnableIdleCurrent).Append("\n");
            sb.Append("  LimitToSinglePhaseCharging: ").Append(LimitToSinglePhaseCharging).Append("\n");
            sb.Append("  LockCablePermanently: ").Append(LockCablePermanently).Append("\n");
            sb.Append("  SmartButtonEnabled: ").Append(SmartButtonEnabled).Append("\n");
            sb.Append("  PhaseMode: ").Append(PhaseMode).Append("\n");
            sb.Append("  SmartCharging: ").Append(SmartCharging).Append("\n");
            sb.Append("  LocalPreAuthorizeEnabled: ").Append(LocalPreAuthorizeEnabled).Append("\n");
            sb.Append("  LocalAuthorizeOfflineEnabled: ").Append(LocalAuthorizeOfflineEnabled).Append("\n");
            sb.Append("  AllowOfflineTxForUnknownId: ").Append(AllowOfflineTxForUnknownId).Append("\n");
            sb.Append("  OfflineChargingMode: ").Append(OfflineChargingMode).Append("\n");
            sb.Append("  AuthorizationRequired: ").Append(AuthorizationRequired).Append("\n");
            sb.Append("  RemoteStartRequired: ").Append(RemoteStartRequired).Append("\n");
            sb.Append("  LedStripBrightness: ").Append(LedStripBrightness).Append("\n");
            sb.Append("  MaxChargerCurrent: ").Append(MaxChargerCurrent).Append("\n");
            sb.Append("  DynamicChargerCurrent: ").Append(DynamicChargerCurrent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsChargerChargerSettingDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsChargerChargerSettingDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsChargerChargerSettingDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsChargerChargerSettingDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.EnableIdleCurrent == input.EnableIdleCurrent ||
                    (this.EnableIdleCurrent != null &&
                    this.EnableIdleCurrent.Equals(input.EnableIdleCurrent))
                ) && 
                (
                    this.LimitToSinglePhaseCharging == input.LimitToSinglePhaseCharging ||
                    (this.LimitToSinglePhaseCharging != null &&
                    this.LimitToSinglePhaseCharging.Equals(input.LimitToSinglePhaseCharging))
                ) && 
                (
                    this.LockCablePermanently == input.LockCablePermanently ||
                    (this.LockCablePermanently != null &&
                    this.LockCablePermanently.Equals(input.LockCablePermanently))
                ) && 
                (
                    this.SmartButtonEnabled == input.SmartButtonEnabled ||
                    (this.SmartButtonEnabled != null &&
                    this.SmartButtonEnabled.Equals(input.SmartButtonEnabled))
                ) && 
                (
                    this.PhaseMode == input.PhaseMode ||
                    (this.PhaseMode != null &&
                    this.PhaseMode.Equals(input.PhaseMode))
                ) && 
                (
                    this.SmartCharging == input.SmartCharging ||
                    (this.SmartCharging != null &&
                    this.SmartCharging.Equals(input.SmartCharging))
                ) && 
                (
                    this.LocalPreAuthorizeEnabled == input.LocalPreAuthorizeEnabled ||
                    (this.LocalPreAuthorizeEnabled != null &&
                    this.LocalPreAuthorizeEnabled.Equals(input.LocalPreAuthorizeEnabled))
                ) && 
                (
                    this.LocalAuthorizeOfflineEnabled == input.LocalAuthorizeOfflineEnabled ||
                    (this.LocalAuthorizeOfflineEnabled != null &&
                    this.LocalAuthorizeOfflineEnabled.Equals(input.LocalAuthorizeOfflineEnabled))
                ) && 
                (
                    this.AllowOfflineTxForUnknownId == input.AllowOfflineTxForUnknownId ||
                    (this.AllowOfflineTxForUnknownId != null &&
                    this.AllowOfflineTxForUnknownId.Equals(input.AllowOfflineTxForUnknownId))
                ) && 
                (
                    this.OfflineChargingMode == input.OfflineChargingMode ||
                    (this.OfflineChargingMode != null &&
                    this.OfflineChargingMode.Equals(input.OfflineChargingMode))
                ) && 
                (
                    this.AuthorizationRequired == input.AuthorizationRequired ||
                    (this.AuthorizationRequired != null &&
                    this.AuthorizationRequired.Equals(input.AuthorizationRequired))
                ) && 
                (
                    this.RemoteStartRequired == input.RemoteStartRequired ||
                    (this.RemoteStartRequired != null &&
                    this.RemoteStartRequired.Equals(input.RemoteStartRequired))
                ) && 
                (
                    this.LedStripBrightness == input.LedStripBrightness ||
                    (this.LedStripBrightness != null &&
                    this.LedStripBrightness.Equals(input.LedStripBrightness))
                ) && 
                (
                    this.MaxChargerCurrent == input.MaxChargerCurrent ||
                    (this.MaxChargerCurrent != null &&
                    this.MaxChargerCurrent.Equals(input.MaxChargerCurrent))
                ) && 
                (
                    this.DynamicChargerCurrent == input.DynamicChargerCurrent ||
                    (this.DynamicChargerCurrent != null &&
                    this.DynamicChargerCurrent.Equals(input.DynamicChargerCurrent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                {
                    hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                }
                if (this.EnableIdleCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.EnableIdleCurrent.GetHashCode();
                }
                if (this.LimitToSinglePhaseCharging != null)
                {
                    hashCode = (hashCode * 59) + this.LimitToSinglePhaseCharging.GetHashCode();
                }
                if (this.LockCablePermanently != null)
                {
                    hashCode = (hashCode * 59) + this.LockCablePermanently.GetHashCode();
                }
                if (this.SmartButtonEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.SmartButtonEnabled.GetHashCode();
                }
                if (this.PhaseMode != null)
                {
                    hashCode = (hashCode * 59) + this.PhaseMode.GetHashCode();
                }
                if (this.SmartCharging != null)
                {
                    hashCode = (hashCode * 59) + this.SmartCharging.GetHashCode();
                }
                if (this.LocalPreAuthorizeEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.LocalPreAuthorizeEnabled.GetHashCode();
                }
                if (this.LocalAuthorizeOfflineEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.LocalAuthorizeOfflineEnabled.GetHashCode();
                }
                if (this.AllowOfflineTxForUnknownId != null)
                {
                    hashCode = (hashCode * 59) + this.AllowOfflineTxForUnknownId.GetHashCode();
                }
                if (this.OfflineChargingMode != null)
                {
                    hashCode = (hashCode * 59) + this.OfflineChargingMode.GetHashCode();
                }
                if (this.AuthorizationRequired != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationRequired.GetHashCode();
                }
                if (this.RemoteStartRequired != null)
                {
                    hashCode = (hashCode * 59) + this.RemoteStartRequired.GetHashCode();
                }
                if (this.LedStripBrightness != null)
                {
                    hashCode = (hashCode * 59) + this.LedStripBrightness.GetHashCode();
                }
                if (this.MaxChargerCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.MaxChargerCurrent.GetHashCode();
                }
                if (this.DynamicChargerCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicChargerCurrent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
