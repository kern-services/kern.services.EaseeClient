/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsAccountProfileDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Account.ProfileDTO")]
    public partial class EaseeCoreDTOsAccountProfileDTO : IEquatable<EaseeCoreDTOsAccountProfileDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsAccountProfileDTO" /> class.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <param name="eMail">eMail.</param>
        /// <param name="phoneNo">phoneNo.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="street">street.</param>
        /// <param name="zipCode">zipCode.</param>
        /// <param name="city">city.</param>
        /// <param name="country">country.</param>
        /// <param name="countryId">countryId.</param>
        /// <param name="language">language.</param>
        /// <param name="emailVerified">emailVerified.</param>
        /// <param name="subscribeNewProductUpdate">subscribeNewProductUpdate.</param>
        /// <param name="subscribeProductUpdate">subscribeProductUpdate.</param>
        /// <param name="company">company.</param>
        /// <param name="isActive">isActive.</param>
        public EaseeCoreDTOsAccountProfileDTO(int userId = default(int), string eMail = default(string), string phoneNo = default(string), string firstName = default(string), string lastName = default(string), string street = default(string), string zipCode = default(string), string city = default(string), string country = default(string), string countryId = default(string), string language = default(string), bool emailVerified = default(bool), bool? subscribeNewProductUpdate = default(bool?), bool? subscribeProductUpdate = default(bool?), string company = default(string), bool isActive = default(bool))
        {
            this.UserId = userId;
            this.EMail = eMail;
            this.PhoneNo = phoneNo;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Street = street;
            this.ZipCode = zipCode;
            this.City = city;
            this.Country = country;
            this.CountryId = countryId;
            this.Language = language;
            this.EmailVerified = emailVerified;
            this.SubscribeNewProductUpdate = subscribeNewProductUpdate;
            this.SubscribeProductUpdate = subscribeProductUpdate;
            this.Company = company;
            this.IsActive = isActive;
        }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or Sets EMail
        /// </summary>
        [DataMember(Name = "eMail", EmitDefaultValue = true)]
        public string EMail { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNo
        /// </summary>
        [DataMember(Name = "phoneNo", EmitDefaultValue = true)]
        public string PhoneNo { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "street", EmitDefaultValue = true)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name = "zipCode", EmitDefaultValue = true)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name = "countryId", EmitDefaultValue = true)]
        public string CountryId { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name = "emailVerified", EmitDefaultValue = true)]
        public bool EmailVerified { get; set; }

        /// <summary>
        /// Gets or Sets SubscribeNewProductUpdate
        /// </summary>
        [DataMember(Name = "subscribeNewProductUpdate", EmitDefaultValue = true)]
        public bool? SubscribeNewProductUpdate { get; set; }

        /// <summary>
        /// Gets or Sets SubscribeProductUpdate
        /// </summary>
        [DataMember(Name = "subscribeProductUpdate", EmitDefaultValue = true)]
        public bool? SubscribeProductUpdate { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsAccountProfileDTO {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  EMail: ").Append(EMail).Append("\n");
            sb.Append("  PhoneNo: ").Append(PhoneNo).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  SubscribeNewProductUpdate: ").Append(SubscribeNewProductUpdate).Append("\n");
            sb.Append("  SubscribeProductUpdate: ").Append(SubscribeProductUpdate).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsAccountProfileDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsAccountProfileDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsAccountProfileDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsAccountProfileDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.EMail == input.EMail ||
                    (this.EMail != null &&
                    this.EMail.Equals(input.EMail))
                ) && 
                (
                    this.PhoneNo == input.PhoneNo ||
                    (this.PhoneNo != null &&
                    this.PhoneNo.Equals(input.PhoneNo))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.EmailVerified == input.EmailVerified ||
                    this.EmailVerified.Equals(input.EmailVerified)
                ) && 
                (
                    this.SubscribeNewProductUpdate == input.SubscribeNewProductUpdate ||
                    (this.SubscribeNewProductUpdate != null &&
                    this.SubscribeNewProductUpdate.Equals(input.SubscribeNewProductUpdate))
                ) && 
                (
                    this.SubscribeProductUpdate == input.SubscribeProductUpdate ||
                    (this.SubscribeProductUpdate != null &&
                    this.SubscribeProductUpdate.Equals(input.SubscribeProductUpdate))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                if (this.EMail != null)
                {
                    hashCode = (hashCode * 59) + this.EMail.GetHashCode();
                }
                if (this.PhoneNo != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNo.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                if (this.ZipCode != null)
                {
                    hashCode = (hashCode * 59) + this.ZipCode.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.CountryId != null)
                {
                    hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailVerified.GetHashCode();
                if (this.SubscribeNewProductUpdate != null)
                {
                    hashCode = (hashCode * 59) + this.SubscribeNewProductUpdate.GetHashCode();
                }
                if (this.SubscribeProductUpdate != null)
                {
                    hashCode = (hashCode * 59) + this.SubscribeProductUpdate.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
