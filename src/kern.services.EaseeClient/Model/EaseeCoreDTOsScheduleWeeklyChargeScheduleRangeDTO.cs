/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsScheduleWeeklyChargeScheduleRangeDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Schedule.WeeklyChargeScheduleRangeDTO")]
    public partial class EaseeCoreDTOsScheduleWeeklyChargeScheduleRangeDTO : IEquatable<EaseeCoreDTOsScheduleWeeklyChargeScheduleRangeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsScheduleWeeklyChargeScheduleRangeDTO" /> class.
        /// </summary>
        /// <param name="startTime">startTime.</param>
        /// <param name="stopTime">stopTime.</param>
        /// <param name="chargingCurrentLimit">chargingCurrentLimit (default to 32).</param>
        public EaseeCoreDTOsScheduleWeeklyChargeScheduleRangeDTO(string startTime = default(string), string stopTime = default(string), int chargingCurrentLimit = 32)
        {
            this.StartTime = startTime;
            this.StopTime = stopTime;
            this.ChargingCurrentLimit = chargingCurrentLimit;
        }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", EmitDefaultValue = true)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets StopTime
        /// </summary>
        [DataMember(Name = "stopTime", EmitDefaultValue = true)]
        public string StopTime { get; set; }

        /// <summary>
        /// Gets or Sets ChargingCurrentLimit
        /// </summary>
        [DataMember(Name = "chargingCurrentLimit", EmitDefaultValue = false)]
        public int ChargingCurrentLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsScheduleWeeklyChargeScheduleRangeDTO {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StopTime: ").Append(StopTime).Append("\n");
            sb.Append("  ChargingCurrentLimit: ").Append(ChargingCurrentLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsScheduleWeeklyChargeScheduleRangeDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsScheduleWeeklyChargeScheduleRangeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsScheduleWeeklyChargeScheduleRangeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsScheduleWeeklyChargeScheduleRangeDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.StopTime == input.StopTime ||
                    (this.StopTime != null &&
                    this.StopTime.Equals(input.StopTime))
                ) && 
                (
                    this.ChargingCurrentLimit == input.ChargingCurrentLimit ||
                    this.ChargingCurrentLimit.Equals(input.ChargingCurrentLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.StopTime != null)
                {
                    hashCode = (hashCode * 59) + this.StopTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChargingCurrentLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ChargingCurrentLimit (int) maximum
            if (this.ChargingCurrentLimit > (int)32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChargingCurrentLimit, must be a value less than or equal to 32.", new [] { "ChargingCurrentLimit" });
            }

            // ChargingCurrentLimit (int) minimum
            if (this.ChargingCurrentLimit < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChargingCurrentLimit, must be a value greater than or equal to 0.", new [] { "ChargingCurrentLimit" });
            }

            yield break;
        }
    }

}
