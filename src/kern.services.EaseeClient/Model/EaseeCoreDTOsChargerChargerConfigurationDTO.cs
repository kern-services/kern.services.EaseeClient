/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsChargerChargerConfigurationDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Charger.ChargerConfigurationDTO")]
    public partial class EaseeCoreDTOsChargerChargerConfigurationDTO : IEquatable<EaseeCoreDTOsChargerChargerConfigurationDTO>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DetectedPowerGridType
        /// </summary>
        [DataMember(Name = "detectedPowerGridType", EmitDefaultValue = false)]
        public PowerGridType? DetectedPowerGridType { get; set; }

        /// <summary>
        /// Gets or Sets OfflineChargingMode
        /// </summary>
        [DataMember(Name = "offlineChargingMode", EmitDefaultValue = false)]
        public EaseeCoreEnumsOfflineChargingModeType? OfflineChargingMode { get; set; }

        /// <summary>
        /// Gets or Sets PhaseMode
        /// </summary>
        [DataMember(Name = "phaseMode", EmitDefaultValue = false)]
        public EaseeCoreEnumsPhaseMode? PhaseMode { get; set; }

        /// <summary>
        /// Gets or Sets LocalNodeType
        /// </summary>
        [DataMember(Name = "localNodeType", EmitDefaultValue = false)]
        public EaseeCoreEnumsNodeType? LocalNodeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsChargerChargerConfigurationDTO" /> class.
        /// </summary>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="lockCablePermanently">lockCablePermanently.</param>
        /// <param name="authorizationRequired">authorizationRequired.</param>
        /// <param name="remoteStartRequired">remoteStartRequired.</param>
        /// <param name="smartButtonEnabled">smartButtonEnabled.</param>
        /// <param name="wiFiSSID">wiFiSSID.</param>
        /// <param name="detectedPowerGridType">detectedPowerGridType.</param>
        /// <param name="offlineChargingMode">offlineChargingMode.</param>
        /// <param name="circuitMaxCurrentP1">circuitMaxCurrentP1.</param>
        /// <param name="circuitMaxCurrentP2">circuitMaxCurrentP2.</param>
        /// <param name="circuitMaxCurrentP3">circuitMaxCurrentP3.</param>
        /// <param name="enableIdleCurrent">enableIdleCurrent.</param>
        /// <param name="limitToSinglePhaseCharging">limitToSinglePhaseCharging.</param>
        /// <param name="phaseMode">phaseMode.</param>
        /// <param name="localNodeType">localNodeType.</param>
        /// <param name="localAuthorizationRequired">localAuthorizationRequired.</param>
        /// <param name="localRadioChannel">localRadioChannel.</param>
        /// <param name="localShortAddress">localShortAddress.</param>
        /// <param name="localParentAddrOrNumOfNodes">localParentAddrOrNumOfNodes.</param>
        /// <param name="localPreAuthorizeEnabled">localPreAuthorizeEnabled.</param>
        /// <param name="localAuthorizeOfflineEnabled">localAuthorizeOfflineEnabled.</param>
        /// <param name="allowOfflineTxForUnknownId">allowOfflineTxForUnknownId.</param>
        /// <param name="maxChargerCurrent">maxChargerCurrent.</param>
        /// <param name="ledStripBrightness">ledStripBrightness.</param>
        /// <param name="chargingSchedule">chargingSchedule.</param>
        public EaseeCoreDTOsChargerChargerConfigurationDTO(bool? isEnabled = default(bool?), bool? lockCablePermanently = default(bool?), bool? authorizationRequired = default(bool?), bool? remoteStartRequired = default(bool?), bool? smartButtonEnabled = default(bool?), string wiFiSSID = default(string), PowerGridType? detectedPowerGridType = default(PowerGridType?), EaseeCoreEnumsOfflineChargingModeType? offlineChargingMode = default(EaseeCoreEnumsOfflineChargingModeType?), double? circuitMaxCurrentP1 = default(double?), double? circuitMaxCurrentP2 = default(double?), double? circuitMaxCurrentP3 = default(double?), bool? enableIdleCurrent = default(bool?), bool? limitToSinglePhaseCharging = default(bool?), EaseeCoreEnumsPhaseMode? phaseMode = default(EaseeCoreEnumsPhaseMode?), EaseeCoreEnumsNodeType? localNodeType = default(EaseeCoreEnumsNodeType?), bool? localAuthorizationRequired = default(bool?), int? localRadioChannel = default(int?), int? localShortAddress = default(int?), int? localParentAddrOrNumOfNodes = default(int?), bool? localPreAuthorizeEnabled = default(bool?), bool? localAuthorizeOfflineEnabled = default(bool?), bool? allowOfflineTxForUnknownId = default(bool?), double? maxChargerCurrent = default(double?), int? ledStripBrightness = default(int?), string chargingSchedule = default(string))
        {
            this.IsEnabled = isEnabled;
            this.LockCablePermanently = lockCablePermanently;
            this.AuthorizationRequired = authorizationRequired;
            this.RemoteStartRequired = remoteStartRequired;
            this.SmartButtonEnabled = smartButtonEnabled;
            this.WiFiSSID = wiFiSSID;
            this.DetectedPowerGridType = detectedPowerGridType;
            this.OfflineChargingMode = offlineChargingMode;
            this.CircuitMaxCurrentP1 = circuitMaxCurrentP1;
            this.CircuitMaxCurrentP2 = circuitMaxCurrentP2;
            this.CircuitMaxCurrentP3 = circuitMaxCurrentP3;
            this.EnableIdleCurrent = enableIdleCurrent;
            this.LimitToSinglePhaseCharging = limitToSinglePhaseCharging;
            this.PhaseMode = phaseMode;
            this.LocalNodeType = localNodeType;
            this.LocalAuthorizationRequired = localAuthorizationRequired;
            this.LocalRadioChannel = localRadioChannel;
            this.LocalShortAddress = localShortAddress;
            this.LocalParentAddrOrNumOfNodes = localParentAddrOrNumOfNodes;
            this.LocalPreAuthorizeEnabled = localPreAuthorizeEnabled;
            this.LocalAuthorizeOfflineEnabled = localAuthorizeOfflineEnabled;
            this.AllowOfflineTxForUnknownId = allowOfflineTxForUnknownId;
            this.MaxChargerCurrent = maxChargerCurrent;
            this.LedStripBrightness = ledStripBrightness;
            this.ChargingSchedule = chargingSchedule;
        }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name = "isEnabled", EmitDefaultValue = true)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LockCablePermanently
        /// </summary>
        [DataMember(Name = "lockCablePermanently", EmitDefaultValue = true)]
        public bool? LockCablePermanently { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationRequired
        /// </summary>
        [DataMember(Name = "authorizationRequired", EmitDefaultValue = true)]
        public bool? AuthorizationRequired { get; set; }

        /// <summary>
        /// Gets or Sets RemoteStartRequired
        /// </summary>
        [DataMember(Name = "remoteStartRequired", EmitDefaultValue = true)]
        public bool? RemoteStartRequired { get; set; }

        /// <summary>
        /// Gets or Sets SmartButtonEnabled
        /// </summary>
        [DataMember(Name = "smartButtonEnabled", EmitDefaultValue = true)]
        public bool? SmartButtonEnabled { get; set; }

        /// <summary>
        /// Gets or Sets WiFiSSID
        /// </summary>
        [DataMember(Name = "wiFiSSID", EmitDefaultValue = true)]
        public string WiFiSSID { get; set; }

        /// <summary>
        /// Gets or Sets CircuitMaxCurrentP1
        /// </summary>
        [DataMember(Name = "circuitMaxCurrentP1", EmitDefaultValue = true)]
        public double? CircuitMaxCurrentP1 { get; set; }

        /// <summary>
        /// Gets or Sets CircuitMaxCurrentP2
        /// </summary>
        [DataMember(Name = "circuitMaxCurrentP2", EmitDefaultValue = true)]
        public double? CircuitMaxCurrentP2 { get; set; }

        /// <summary>
        /// Gets or Sets CircuitMaxCurrentP3
        /// </summary>
        [DataMember(Name = "circuitMaxCurrentP3", EmitDefaultValue = true)]
        public double? CircuitMaxCurrentP3 { get; set; }

        /// <summary>
        /// Gets or Sets EnableIdleCurrent
        /// </summary>
        [DataMember(Name = "enableIdleCurrent", EmitDefaultValue = true)]
        public bool? EnableIdleCurrent { get; set; }

        /// <summary>
        /// Gets or Sets LimitToSinglePhaseCharging
        /// </summary>
        [DataMember(Name = "limitToSinglePhaseCharging", EmitDefaultValue = true)]
        public bool? LimitToSinglePhaseCharging { get; set; }

        /// <summary>
        /// Gets or Sets LocalAuthorizationRequired
        /// </summary>
        [DataMember(Name = "localAuthorizationRequired", EmitDefaultValue = true)]
        public bool? LocalAuthorizationRequired { get; set; }

        /// <summary>
        /// Gets or Sets LocalRadioChannel
        /// </summary>
        [DataMember(Name = "localRadioChannel", EmitDefaultValue = true)]
        public int? LocalRadioChannel { get; set; }

        /// <summary>
        /// Gets or Sets LocalShortAddress
        /// </summary>
        [DataMember(Name = "localShortAddress", EmitDefaultValue = true)]
        public int? LocalShortAddress { get; set; }

        /// <summary>
        /// Gets or Sets LocalParentAddrOrNumOfNodes
        /// </summary>
        [DataMember(Name = "localParentAddrOrNumOfNodes", EmitDefaultValue = true)]
        public int? LocalParentAddrOrNumOfNodes { get; set; }

        /// <summary>
        /// Gets or Sets LocalPreAuthorizeEnabled
        /// </summary>
        [DataMember(Name = "localPreAuthorizeEnabled", EmitDefaultValue = true)]
        public bool? LocalPreAuthorizeEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LocalAuthorizeOfflineEnabled
        /// </summary>
        [DataMember(Name = "localAuthorizeOfflineEnabled", EmitDefaultValue = true)]
        public bool? LocalAuthorizeOfflineEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AllowOfflineTxForUnknownId
        /// </summary>
        [DataMember(Name = "allowOfflineTxForUnknownId", EmitDefaultValue = true)]
        public bool? AllowOfflineTxForUnknownId { get; set; }

        /// <summary>
        /// Gets or Sets MaxChargerCurrent
        /// </summary>
        [DataMember(Name = "maxChargerCurrent", EmitDefaultValue = true)]
        public double? MaxChargerCurrent { get; set; }

        /// <summary>
        /// Gets or Sets LedStripBrightness
        /// </summary>
        [DataMember(Name = "ledStripBrightness", EmitDefaultValue = true)]
        public int? LedStripBrightness { get; set; }

        /// <summary>
        /// Gets or Sets ChargingSchedule
        /// </summary>
        [DataMember(Name = "chargingSchedule", EmitDefaultValue = true)]
        public string ChargingSchedule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsChargerChargerConfigurationDTO {\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  LockCablePermanently: ").Append(LockCablePermanently).Append("\n");
            sb.Append("  AuthorizationRequired: ").Append(AuthorizationRequired).Append("\n");
            sb.Append("  RemoteStartRequired: ").Append(RemoteStartRequired).Append("\n");
            sb.Append("  SmartButtonEnabled: ").Append(SmartButtonEnabled).Append("\n");
            sb.Append("  WiFiSSID: ").Append(WiFiSSID).Append("\n");
            sb.Append("  DetectedPowerGridType: ").Append(DetectedPowerGridType).Append("\n");
            sb.Append("  OfflineChargingMode: ").Append(OfflineChargingMode).Append("\n");
            sb.Append("  CircuitMaxCurrentP1: ").Append(CircuitMaxCurrentP1).Append("\n");
            sb.Append("  CircuitMaxCurrentP2: ").Append(CircuitMaxCurrentP2).Append("\n");
            sb.Append("  CircuitMaxCurrentP3: ").Append(CircuitMaxCurrentP3).Append("\n");
            sb.Append("  EnableIdleCurrent: ").Append(EnableIdleCurrent).Append("\n");
            sb.Append("  LimitToSinglePhaseCharging: ").Append(LimitToSinglePhaseCharging).Append("\n");
            sb.Append("  PhaseMode: ").Append(PhaseMode).Append("\n");
            sb.Append("  LocalNodeType: ").Append(LocalNodeType).Append("\n");
            sb.Append("  LocalAuthorizationRequired: ").Append(LocalAuthorizationRequired).Append("\n");
            sb.Append("  LocalRadioChannel: ").Append(LocalRadioChannel).Append("\n");
            sb.Append("  LocalShortAddress: ").Append(LocalShortAddress).Append("\n");
            sb.Append("  LocalParentAddrOrNumOfNodes: ").Append(LocalParentAddrOrNumOfNodes).Append("\n");
            sb.Append("  LocalPreAuthorizeEnabled: ").Append(LocalPreAuthorizeEnabled).Append("\n");
            sb.Append("  LocalAuthorizeOfflineEnabled: ").Append(LocalAuthorizeOfflineEnabled).Append("\n");
            sb.Append("  AllowOfflineTxForUnknownId: ").Append(AllowOfflineTxForUnknownId).Append("\n");
            sb.Append("  MaxChargerCurrent: ").Append(MaxChargerCurrent).Append("\n");
            sb.Append("  LedStripBrightness: ").Append(LedStripBrightness).Append("\n");
            sb.Append("  ChargingSchedule: ").Append(ChargingSchedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsChargerChargerConfigurationDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsChargerChargerConfigurationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsChargerChargerConfigurationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsChargerChargerConfigurationDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsEnabled == input.IsEnabled ||
                    (this.IsEnabled != null &&
                    this.IsEnabled.Equals(input.IsEnabled))
                ) && 
                (
                    this.LockCablePermanently == input.LockCablePermanently ||
                    (this.LockCablePermanently != null &&
                    this.LockCablePermanently.Equals(input.LockCablePermanently))
                ) && 
                (
                    this.AuthorizationRequired == input.AuthorizationRequired ||
                    (this.AuthorizationRequired != null &&
                    this.AuthorizationRequired.Equals(input.AuthorizationRequired))
                ) && 
                (
                    this.RemoteStartRequired == input.RemoteStartRequired ||
                    (this.RemoteStartRequired != null &&
                    this.RemoteStartRequired.Equals(input.RemoteStartRequired))
                ) && 
                (
                    this.SmartButtonEnabled == input.SmartButtonEnabled ||
                    (this.SmartButtonEnabled != null &&
                    this.SmartButtonEnabled.Equals(input.SmartButtonEnabled))
                ) && 
                (
                    this.WiFiSSID == input.WiFiSSID ||
                    (this.WiFiSSID != null &&
                    this.WiFiSSID.Equals(input.WiFiSSID))
                ) && 
                (
                    this.DetectedPowerGridType == input.DetectedPowerGridType ||
                    this.DetectedPowerGridType.Equals(input.DetectedPowerGridType)
                ) && 
                (
                    this.OfflineChargingMode == input.OfflineChargingMode ||
                    this.OfflineChargingMode.Equals(input.OfflineChargingMode)
                ) && 
                (
                    this.CircuitMaxCurrentP1 == input.CircuitMaxCurrentP1 ||
                    (this.CircuitMaxCurrentP1 != null &&
                    this.CircuitMaxCurrentP1.Equals(input.CircuitMaxCurrentP1))
                ) && 
                (
                    this.CircuitMaxCurrentP2 == input.CircuitMaxCurrentP2 ||
                    (this.CircuitMaxCurrentP2 != null &&
                    this.CircuitMaxCurrentP2.Equals(input.CircuitMaxCurrentP2))
                ) && 
                (
                    this.CircuitMaxCurrentP3 == input.CircuitMaxCurrentP3 ||
                    (this.CircuitMaxCurrentP3 != null &&
                    this.CircuitMaxCurrentP3.Equals(input.CircuitMaxCurrentP3))
                ) && 
                (
                    this.EnableIdleCurrent == input.EnableIdleCurrent ||
                    (this.EnableIdleCurrent != null &&
                    this.EnableIdleCurrent.Equals(input.EnableIdleCurrent))
                ) && 
                (
                    this.LimitToSinglePhaseCharging == input.LimitToSinglePhaseCharging ||
                    (this.LimitToSinglePhaseCharging != null &&
                    this.LimitToSinglePhaseCharging.Equals(input.LimitToSinglePhaseCharging))
                ) && 
                (
                    this.PhaseMode == input.PhaseMode ||
                    this.PhaseMode.Equals(input.PhaseMode)
                ) && 
                (
                    this.LocalNodeType == input.LocalNodeType ||
                    this.LocalNodeType.Equals(input.LocalNodeType)
                ) && 
                (
                    this.LocalAuthorizationRequired == input.LocalAuthorizationRequired ||
                    (this.LocalAuthorizationRequired != null &&
                    this.LocalAuthorizationRequired.Equals(input.LocalAuthorizationRequired))
                ) && 
                (
                    this.LocalRadioChannel == input.LocalRadioChannel ||
                    (this.LocalRadioChannel != null &&
                    this.LocalRadioChannel.Equals(input.LocalRadioChannel))
                ) && 
                (
                    this.LocalShortAddress == input.LocalShortAddress ||
                    (this.LocalShortAddress != null &&
                    this.LocalShortAddress.Equals(input.LocalShortAddress))
                ) && 
                (
                    this.LocalParentAddrOrNumOfNodes == input.LocalParentAddrOrNumOfNodes ||
                    (this.LocalParentAddrOrNumOfNodes != null &&
                    this.LocalParentAddrOrNumOfNodes.Equals(input.LocalParentAddrOrNumOfNodes))
                ) && 
                (
                    this.LocalPreAuthorizeEnabled == input.LocalPreAuthorizeEnabled ||
                    (this.LocalPreAuthorizeEnabled != null &&
                    this.LocalPreAuthorizeEnabled.Equals(input.LocalPreAuthorizeEnabled))
                ) && 
                (
                    this.LocalAuthorizeOfflineEnabled == input.LocalAuthorizeOfflineEnabled ||
                    (this.LocalAuthorizeOfflineEnabled != null &&
                    this.LocalAuthorizeOfflineEnabled.Equals(input.LocalAuthorizeOfflineEnabled))
                ) && 
                (
                    this.AllowOfflineTxForUnknownId == input.AllowOfflineTxForUnknownId ||
                    (this.AllowOfflineTxForUnknownId != null &&
                    this.AllowOfflineTxForUnknownId.Equals(input.AllowOfflineTxForUnknownId))
                ) && 
                (
                    this.MaxChargerCurrent == input.MaxChargerCurrent ||
                    (this.MaxChargerCurrent != null &&
                    this.MaxChargerCurrent.Equals(input.MaxChargerCurrent))
                ) && 
                (
                    this.LedStripBrightness == input.LedStripBrightness ||
                    (this.LedStripBrightness != null &&
                    this.LedStripBrightness.Equals(input.LedStripBrightness))
                ) && 
                (
                    this.ChargingSchedule == input.ChargingSchedule ||
                    (this.ChargingSchedule != null &&
                    this.ChargingSchedule.Equals(input.ChargingSchedule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.IsEnabled.GetHashCode();
                }
                if (this.LockCablePermanently != null)
                {
                    hashCode = (hashCode * 59) + this.LockCablePermanently.GetHashCode();
                }
                if (this.AuthorizationRequired != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationRequired.GetHashCode();
                }
                if (this.RemoteStartRequired != null)
                {
                    hashCode = (hashCode * 59) + this.RemoteStartRequired.GetHashCode();
                }
                if (this.SmartButtonEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.SmartButtonEnabled.GetHashCode();
                }
                if (this.WiFiSSID != null)
                {
                    hashCode = (hashCode * 59) + this.WiFiSSID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DetectedPowerGridType.GetHashCode();
                hashCode = (hashCode * 59) + this.OfflineChargingMode.GetHashCode();
                if (this.CircuitMaxCurrentP1 != null)
                {
                    hashCode = (hashCode * 59) + this.CircuitMaxCurrentP1.GetHashCode();
                }
                if (this.CircuitMaxCurrentP2 != null)
                {
                    hashCode = (hashCode * 59) + this.CircuitMaxCurrentP2.GetHashCode();
                }
                if (this.CircuitMaxCurrentP3 != null)
                {
                    hashCode = (hashCode * 59) + this.CircuitMaxCurrentP3.GetHashCode();
                }
                if (this.EnableIdleCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.EnableIdleCurrent.GetHashCode();
                }
                if (this.LimitToSinglePhaseCharging != null)
                {
                    hashCode = (hashCode * 59) + this.LimitToSinglePhaseCharging.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PhaseMode.GetHashCode();
                hashCode = (hashCode * 59) + this.LocalNodeType.GetHashCode();
                if (this.LocalAuthorizationRequired != null)
                {
                    hashCode = (hashCode * 59) + this.LocalAuthorizationRequired.GetHashCode();
                }
                if (this.LocalRadioChannel != null)
                {
                    hashCode = (hashCode * 59) + this.LocalRadioChannel.GetHashCode();
                }
                if (this.LocalShortAddress != null)
                {
                    hashCode = (hashCode * 59) + this.LocalShortAddress.GetHashCode();
                }
                if (this.LocalParentAddrOrNumOfNodes != null)
                {
                    hashCode = (hashCode * 59) + this.LocalParentAddrOrNumOfNodes.GetHashCode();
                }
                if (this.LocalPreAuthorizeEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.LocalPreAuthorizeEnabled.GetHashCode();
                }
                if (this.LocalAuthorizeOfflineEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.LocalAuthorizeOfflineEnabled.GetHashCode();
                }
                if (this.AllowOfflineTxForUnknownId != null)
                {
                    hashCode = (hashCode * 59) + this.AllowOfflineTxForUnknownId.GetHashCode();
                }
                if (this.MaxChargerCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.MaxChargerCurrent.GetHashCode();
                }
                if (this.LedStripBrightness != null)
                {
                    hashCode = (hashCode * 59) + this.LedStripBrightness.GetHashCode();
                }
                if (this.ChargingSchedule != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingSchedule.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
