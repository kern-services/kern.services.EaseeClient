/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest
    /// </summary>
    [DataContract(Name = "Easee.Services.LifetimeEnergyReporting.LifetimeEnergyMeasurementSettingsRequest")]
    public partial class EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest : IEquatable<EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest" /> class.
        /// </summary>
        /// <param name="intervalInMinutes">intervalInMinutes.</param>
        /// <param name="alsoSendWhenNotCharging">alsoSendWhenNotCharging.</param>
        public EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest(int intervalInMinutes = default(int), bool alsoSendWhenNotCharging = default(bool))
        {
            this.IntervalInMinutes = intervalInMinutes;
            this.AlsoSendWhenNotCharging = alsoSendWhenNotCharging;
        }

        /// <summary>
        /// Gets or Sets IntervalInMinutes
        /// </summary>
        [DataMember(Name = "intervalInMinutes", EmitDefaultValue = false)]
        public int IntervalInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets AlsoSendWhenNotCharging
        /// </summary>
        [DataMember(Name = "alsoSendWhenNotCharging", EmitDefaultValue = true)]
        public bool AlsoSendWhenNotCharging { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest {\n");
            sb.Append("  IntervalInMinutes: ").Append(IntervalInMinutes).Append("\n");
            sb.Append("  AlsoSendWhenNotCharging: ").Append(AlsoSendWhenNotCharging).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest);
        }

        /// <summary>
        /// Returns true if EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeServicesLifetimeEnergyReportingLifetimeEnergyMeasurementSettingsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IntervalInMinutes == input.IntervalInMinutes ||
                    this.IntervalInMinutes.Equals(input.IntervalInMinutes)
                ) && 
                (
                    this.AlsoSendWhenNotCharging == input.AlsoSendWhenNotCharging ||
                    this.AlsoSendWhenNotCharging.Equals(input.AlsoSendWhenNotCharging)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IntervalInMinutes.GetHashCode();
                hashCode = (hashCode * 59) + this.AlsoSendWhenNotCharging.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
