/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsSiteContactInfoDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Site.ContactInfoDTO")]
    public partial class EaseeCoreDTOsSiteContactInfoDTO : IEquatable<EaseeCoreDTOsSiteContactInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsSiteContactInfoDTO" /> class.
        /// </summary>
        /// <param name="installerName">installerName.</param>
        /// <param name="installerPhoneNumber">installerPhoneNumber.</param>
        /// <param name="ownerName">ownerName.</param>
        /// <param name="ownerPhoneNumber">ownerPhoneNumber.</param>
        /// <param name="company">company.</param>
        public EaseeCoreDTOsSiteContactInfoDTO(string installerName = default(string), string installerPhoneNumber = default(string), string ownerName = default(string), string ownerPhoneNumber = default(string), string company = default(string))
        {
            this.InstallerName = installerName;
            this.InstallerPhoneNumber = installerPhoneNumber;
            this.OwnerName = ownerName;
            this.OwnerPhoneNumber = ownerPhoneNumber;
            this.Company = company;
        }

        /// <summary>
        /// Gets or Sets InstallerName
        /// </summary>
        [DataMember(Name = "installerName", EmitDefaultValue = true)]
        public string InstallerName { get; set; }

        /// <summary>
        /// Gets or Sets InstallerPhoneNumber
        /// </summary>
        [DataMember(Name = "installerPhoneNumber", EmitDefaultValue = true)]
        public string InstallerPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets OwnerName
        /// </summary>
        [DataMember(Name = "ownerName", EmitDefaultValue = true)]
        public string OwnerName { get; set; }

        /// <summary>
        /// Gets or Sets OwnerPhoneNumber
        /// </summary>
        [DataMember(Name = "ownerPhoneNumber", EmitDefaultValue = true)]
        public string OwnerPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public string Company { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsSiteContactInfoDTO {\n");
            sb.Append("  InstallerName: ").Append(InstallerName).Append("\n");
            sb.Append("  InstallerPhoneNumber: ").Append(InstallerPhoneNumber).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  OwnerPhoneNumber: ").Append(OwnerPhoneNumber).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsSiteContactInfoDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsSiteContactInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsSiteContactInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsSiteContactInfoDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstallerName == input.InstallerName ||
                    (this.InstallerName != null &&
                    this.InstallerName.Equals(input.InstallerName))
                ) && 
                (
                    this.InstallerPhoneNumber == input.InstallerPhoneNumber ||
                    (this.InstallerPhoneNumber != null &&
                    this.InstallerPhoneNumber.Equals(input.InstallerPhoneNumber))
                ) && 
                (
                    this.OwnerName == input.OwnerName ||
                    (this.OwnerName != null &&
                    this.OwnerName.Equals(input.OwnerName))
                ) && 
                (
                    this.OwnerPhoneNumber == input.OwnerPhoneNumber ||
                    (this.OwnerPhoneNumber != null &&
                    this.OwnerPhoneNumber.Equals(input.OwnerPhoneNumber))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstallerName != null)
                {
                    hashCode = (hashCode * 59) + this.InstallerName.GetHashCode();
                }
                if (this.InstallerPhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.InstallerPhoneNumber.GetHashCode();
                }
                if (this.OwnerName != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerName.GetHashCode();
                }
                if (this.OwnerPhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerPhoneNumber.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
