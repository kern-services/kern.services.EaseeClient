/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeSiteStructureDomainPortsChargerDTO
    /// </summary>
    [DataContract(Name = "Easee.SiteStructure.Domain.Ports.ChargerDTO")]
    public partial class EaseeSiteStructureDomainPortsChargerDTO : IEquatable<EaseeSiteStructureDomainPortsChargerDTO>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public EaseeSiteStructureDomainEntitiesEnumsChargerColorType? Color { get; set; }

        /// <summary>
        /// Gets or Sets LevelOfAccess
        /// </summary>
        [DataMember(Name = "levelOfAccess", EmitDefaultValue = false)]
        public EaseeSiteStructureDomainEntitiesEnumsLevelOfAccess? LevelOfAccess { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name = "productCode", EmitDefaultValue = false)]
        public EaseeSiteStructureDomainEntitiesEnumsProductType? ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets UserRole
        /// </summary>
        [DataMember(Name = "userRole", EmitDefaultValue = false)]
        public EaseeSiteStructureDomainEntitiesEnumsSiteUserRole? UserRole { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeSiteStructureDomainPortsChargerDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="color">color.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="updatedOn">updatedOn.</param>
        /// <param name="backPlate">backPlate.</param>
        /// <param name="levelOfAccess">levelOfAccess.</param>
        /// <param name="productCode">productCode.</param>
        /// <param name="userRole">userRole.</param>
        /// <param name="isTemporary">isTemporary.</param>
        public EaseeSiteStructureDomainPortsChargerDTO(string id = default(string), string name = default(string), EaseeSiteStructureDomainEntitiesEnumsChargerColorType? color = default(EaseeSiteStructureDomainEntitiesEnumsChargerColorType?), DateTime createdOn = default(DateTime), DateTime updatedOn = default(DateTime), EaseeSiteStructureDomainPortsBackPlateDto backPlate = default(EaseeSiteStructureDomainPortsBackPlateDto), EaseeSiteStructureDomainEntitiesEnumsLevelOfAccess? levelOfAccess = default(EaseeSiteStructureDomainEntitiesEnumsLevelOfAccess?), EaseeSiteStructureDomainEntitiesEnumsProductType? productCode = default(EaseeSiteStructureDomainEntitiesEnumsProductType?), EaseeSiteStructureDomainEntitiesEnumsSiteUserRole? userRole = default(EaseeSiteStructureDomainEntitiesEnumsSiteUserRole?), bool isTemporary = default(bool))
        {
            this.Id = id;
            this.Name = name;
            this.Color = color;
            this.CreatedOn = createdOn;
            this.UpdatedOn = updatedOn;
            this.BackPlate = backPlate;
            this.LevelOfAccess = levelOfAccess;
            this.ProductCode = productCode;
            this.UserRole = userRole;
            this.IsTemporary = isTemporary;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedOn
        /// </summary>
        [DataMember(Name = "updatedOn", EmitDefaultValue = false)]
        public DateTime UpdatedOn { get; set; }

        /// <summary>
        /// Gets or Sets BackPlate
        /// </summary>
        [DataMember(Name = "backPlate", EmitDefaultValue = false)]
        public EaseeSiteStructureDomainPortsBackPlateDto BackPlate { get; set; }

        /// <summary>
        /// Gets or Sets IsTemporary
        /// </summary>
        [DataMember(Name = "isTemporary", EmitDefaultValue = true)]
        public bool IsTemporary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeSiteStructureDomainPortsChargerDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("  BackPlate: ").Append(BackPlate).Append("\n");
            sb.Append("  LevelOfAccess: ").Append(LevelOfAccess).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  UserRole: ").Append(UserRole).Append("\n");
            sb.Append("  IsTemporary: ").Append(IsTemporary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeSiteStructureDomainPortsChargerDTO);
        }

        /// <summary>
        /// Returns true if EaseeSiteStructureDomainPortsChargerDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeSiteStructureDomainPortsChargerDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeSiteStructureDomainPortsChargerDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Color == input.Color ||
                    this.Color.Equals(input.Color)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.UpdatedOn == input.UpdatedOn ||
                    (this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(input.UpdatedOn))
                ) && 
                (
                    this.BackPlate == input.BackPlate ||
                    (this.BackPlate != null &&
                    this.BackPlate.Equals(input.BackPlate))
                ) && 
                (
                    this.LevelOfAccess == input.LevelOfAccess ||
                    this.LevelOfAccess.Equals(input.LevelOfAccess)
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    this.ProductCode.Equals(input.ProductCode)
                ) && 
                (
                    this.UserRole == input.UserRole ||
                    this.UserRole.Equals(input.UserRole)
                ) && 
                (
                    this.IsTemporary == input.IsTemporary ||
                    this.IsTemporary.Equals(input.IsTemporary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Color.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.UpdatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedOn.GetHashCode();
                }
                if (this.BackPlate != null)
                {
                    hashCode = (hashCode * 59) + this.BackPlate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LevelOfAccess.GetHashCode();
                hashCode = (hashCode * 59) + this.ProductCode.GetHashCode();
                hashCode = (hashCode * 59) + this.UserRole.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTemporary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
