/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeAccessControlModelsPartnerDetailedDTO
    /// </summary>
    [DataContract(Name = "Easee.AccessControl.Models.PartnerDetailedDTO")]
    public partial class EaseeAccessControlModelsPartnerDetailedDTO : IEquatable<EaseeAccessControlModelsPartnerDetailedDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeAccessControlModelsPartnerDetailedDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="_short">_short.</param>
        /// <param name="_long">_long.</param>
        /// <param name="bigImage">bigImage.</param>
        /// <param name="smallImage">smallImage.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="smartButtonEnabled">smartButtonEnabled.</param>
        /// <param name="authorizationRequired">authorizationRequired.</param>
        /// <param name="remoteStartRequired">remoteStartRequired.</param>
        /// <param name="localPreAuthorizeEnabled">localPreAuthorizeEnabled.</param>
        /// <param name="localAuthorizeOfflineEnabled">localAuthorizeOfflineEnabled.</param>
        /// <param name="allowOfflineTxForUnknownId">allowOfflineTxForUnknownId.</param>
        /// <param name="offlineChargingMode">offlineChargingMode.</param>
        /// <param name="isOperator">isOperator.</param>
        /// <param name="isInstaller">isInstaller.</param>
        /// <param name="hasAuthManagementSystem">hasAuthManagementSystem.</param>
        /// <param name="useOcppIntegration">useOcppIntegration.</param>
        /// <param name="useAmqpIntegration">useAmqpIntegration.</param>
        /// <param name="isTest">isTest.</param>
        /// <param name="inProduction">inProduction.</param>
        /// <param name="authorizeChargingWithEasee">authorizeChargingWithEasee.</param>
        /// <param name="subscriptionKey">subscriptionKey.</param>
        /// <param name="isEasee">isEasee.</param>
        public EaseeAccessControlModelsPartnerDetailedDTO(int id = default(int), string name = default(string), string _short = default(string), string _long = default(string), string bigImage = default(string), string smallImage = default(string), int accountId = default(int), DateTime createdOn = default(DateTime), bool smartButtonEnabled = default(bool), bool authorizationRequired = default(bool), bool remoteStartRequired = default(bool), bool localPreAuthorizeEnabled = default(bool), bool localAuthorizeOfflineEnabled = default(bool), bool allowOfflineTxForUnknownId = default(bool), int offlineChargingMode = default(int), bool isOperator = default(bool), bool isInstaller = default(bool), bool hasAuthManagementSystem = default(bool), bool useOcppIntegration = default(bool), bool useAmqpIntegration = default(bool), bool isTest = default(bool), bool inProduction = default(bool), bool authorizeChargingWithEasee = default(bool), string subscriptionKey = default(string), bool isEasee = default(bool))
        {
            this.Id = id;
            this.Name = name;
            this.Short = _short;
            this.Long = _long;
            this.BigImage = bigImage;
            this.SmallImage = smallImage;
            this.AccountId = accountId;
            this.CreatedOn = createdOn;
            this.SmartButtonEnabled = smartButtonEnabled;
            this.AuthorizationRequired = authorizationRequired;
            this.RemoteStartRequired = remoteStartRequired;
            this.LocalPreAuthorizeEnabled = localPreAuthorizeEnabled;
            this.LocalAuthorizeOfflineEnabled = localAuthorizeOfflineEnabled;
            this.AllowOfflineTxForUnknownId = allowOfflineTxForUnknownId;
            this.OfflineChargingMode = offlineChargingMode;
            this.IsOperator = isOperator;
            this.IsInstaller = isInstaller;
            this.HasAuthManagementSystem = hasAuthManagementSystem;
            this.UseOcppIntegration = useOcppIntegration;
            this.UseAmqpIntegration = useAmqpIntegration;
            this.IsTest = isTest;
            this.InProduction = inProduction;
            this.AuthorizeChargingWithEasee = authorizeChargingWithEasee;
            this.SubscriptionKey = subscriptionKey;
            this.IsEasee = isEasee;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Short
        /// </summary>
        [DataMember(Name = "short", EmitDefaultValue = true)]
        public string Short { get; set; }

        /// <summary>
        /// Gets or Sets Long
        /// </summary>
        [DataMember(Name = "long", EmitDefaultValue = true)]
        public string Long { get; set; }

        /// <summary>
        /// Gets or Sets BigImage
        /// </summary>
        [DataMember(Name = "bigImage", EmitDefaultValue = true)]
        public string BigImage { get; set; }

        /// <summary>
        /// Gets or Sets SmallImage
        /// </summary>
        [DataMember(Name = "smallImage", EmitDefaultValue = true)]
        public string SmallImage { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public int AccountId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name = "createdOn", EmitDefaultValue = false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets SmartButtonEnabled
        /// </summary>
        [DataMember(Name = "smartButtonEnabled", EmitDefaultValue = true)]
        public bool SmartButtonEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationRequired
        /// </summary>
        [DataMember(Name = "authorizationRequired", EmitDefaultValue = true)]
        public bool AuthorizationRequired { get; set; }

        /// <summary>
        /// Gets or Sets RemoteStartRequired
        /// </summary>
        [DataMember(Name = "remoteStartRequired", EmitDefaultValue = true)]
        public bool RemoteStartRequired { get; set; }

        /// <summary>
        /// Gets or Sets LocalPreAuthorizeEnabled
        /// </summary>
        [DataMember(Name = "localPreAuthorizeEnabled", EmitDefaultValue = true)]
        public bool LocalPreAuthorizeEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LocalAuthorizeOfflineEnabled
        /// </summary>
        [DataMember(Name = "localAuthorizeOfflineEnabled", EmitDefaultValue = true)]
        public bool LocalAuthorizeOfflineEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AllowOfflineTxForUnknownId
        /// </summary>
        [DataMember(Name = "allowOfflineTxForUnknownId", EmitDefaultValue = true)]
        public bool AllowOfflineTxForUnknownId { get; set; }

        /// <summary>
        /// Gets or Sets OfflineChargingMode
        /// </summary>
        [DataMember(Name = "offlineChargingMode", EmitDefaultValue = false)]
        public int OfflineChargingMode { get; set; }

        /// <summary>
        /// Gets or Sets IsOperator
        /// </summary>
        [DataMember(Name = "isOperator", EmitDefaultValue = true)]
        public bool IsOperator { get; set; }

        /// <summary>
        /// Gets or Sets IsInstaller
        /// </summary>
        [DataMember(Name = "isInstaller", EmitDefaultValue = true)]
        public bool IsInstaller { get; set; }

        /// <summary>
        /// Gets or Sets HasAuthManagementSystem
        /// </summary>
        [DataMember(Name = "hasAuthManagementSystem", EmitDefaultValue = true)]
        public bool HasAuthManagementSystem { get; set; }

        /// <summary>
        /// Gets or Sets UseOcppIntegration
        /// </summary>
        [DataMember(Name = "useOcppIntegration", EmitDefaultValue = true)]
        public bool UseOcppIntegration { get; set; }

        /// <summary>
        /// Gets or Sets UseAmqpIntegration
        /// </summary>
        [DataMember(Name = "useAmqpIntegration", EmitDefaultValue = true)]
        public bool UseAmqpIntegration { get; set; }

        /// <summary>
        /// Gets or Sets IsTest
        /// </summary>
        [DataMember(Name = "isTest", EmitDefaultValue = true)]
        public bool IsTest { get; set; }

        /// <summary>
        /// Gets or Sets InProduction
        /// </summary>
        [DataMember(Name = "inProduction", EmitDefaultValue = true)]
        public bool InProduction { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizeChargingWithEasee
        /// </summary>
        [DataMember(Name = "authorizeChargingWithEasee", EmitDefaultValue = true)]
        public bool AuthorizeChargingWithEasee { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionKey
        /// </summary>
        [DataMember(Name = "subscriptionKey", EmitDefaultValue = true)]
        public string SubscriptionKey { get; set; }

        /// <summary>
        /// Gets or Sets IsEasee
        /// </summary>
        [DataMember(Name = "isEasee", EmitDefaultValue = true)]
        public bool IsEasee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeAccessControlModelsPartnerDetailedDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Short: ").Append(Short).Append("\n");
            sb.Append("  Long: ").Append(Long).Append("\n");
            sb.Append("  BigImage: ").Append(BigImage).Append("\n");
            sb.Append("  SmallImage: ").Append(SmallImage).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  SmartButtonEnabled: ").Append(SmartButtonEnabled).Append("\n");
            sb.Append("  AuthorizationRequired: ").Append(AuthorizationRequired).Append("\n");
            sb.Append("  RemoteStartRequired: ").Append(RemoteStartRequired).Append("\n");
            sb.Append("  LocalPreAuthorizeEnabled: ").Append(LocalPreAuthorizeEnabled).Append("\n");
            sb.Append("  LocalAuthorizeOfflineEnabled: ").Append(LocalAuthorizeOfflineEnabled).Append("\n");
            sb.Append("  AllowOfflineTxForUnknownId: ").Append(AllowOfflineTxForUnknownId).Append("\n");
            sb.Append("  OfflineChargingMode: ").Append(OfflineChargingMode).Append("\n");
            sb.Append("  IsOperator: ").Append(IsOperator).Append("\n");
            sb.Append("  IsInstaller: ").Append(IsInstaller).Append("\n");
            sb.Append("  HasAuthManagementSystem: ").Append(HasAuthManagementSystem).Append("\n");
            sb.Append("  UseOcppIntegration: ").Append(UseOcppIntegration).Append("\n");
            sb.Append("  UseAmqpIntegration: ").Append(UseAmqpIntegration).Append("\n");
            sb.Append("  IsTest: ").Append(IsTest).Append("\n");
            sb.Append("  InProduction: ").Append(InProduction).Append("\n");
            sb.Append("  AuthorizeChargingWithEasee: ").Append(AuthorizeChargingWithEasee).Append("\n");
            sb.Append("  SubscriptionKey: ").Append(SubscriptionKey).Append("\n");
            sb.Append("  IsEasee: ").Append(IsEasee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeAccessControlModelsPartnerDetailedDTO);
        }

        /// <summary>
        /// Returns true if EaseeAccessControlModelsPartnerDetailedDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeAccessControlModelsPartnerDetailedDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeAccessControlModelsPartnerDetailedDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Short == input.Short ||
                    (this.Short != null &&
                    this.Short.Equals(input.Short))
                ) && 
                (
                    this.Long == input.Long ||
                    (this.Long != null &&
                    this.Long.Equals(input.Long))
                ) && 
                (
                    this.BigImage == input.BigImage ||
                    (this.BigImage != null &&
                    this.BigImage.Equals(input.BigImage))
                ) && 
                (
                    this.SmallImage == input.SmallImage ||
                    (this.SmallImage != null &&
                    this.SmallImage.Equals(input.SmallImage))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    this.AccountId.Equals(input.AccountId)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.SmartButtonEnabled == input.SmartButtonEnabled ||
                    this.SmartButtonEnabled.Equals(input.SmartButtonEnabled)
                ) && 
                (
                    this.AuthorizationRequired == input.AuthorizationRequired ||
                    this.AuthorizationRequired.Equals(input.AuthorizationRequired)
                ) && 
                (
                    this.RemoteStartRequired == input.RemoteStartRequired ||
                    this.RemoteStartRequired.Equals(input.RemoteStartRequired)
                ) && 
                (
                    this.LocalPreAuthorizeEnabled == input.LocalPreAuthorizeEnabled ||
                    this.LocalPreAuthorizeEnabled.Equals(input.LocalPreAuthorizeEnabled)
                ) && 
                (
                    this.LocalAuthorizeOfflineEnabled == input.LocalAuthorizeOfflineEnabled ||
                    this.LocalAuthorizeOfflineEnabled.Equals(input.LocalAuthorizeOfflineEnabled)
                ) && 
                (
                    this.AllowOfflineTxForUnknownId == input.AllowOfflineTxForUnknownId ||
                    this.AllowOfflineTxForUnknownId.Equals(input.AllowOfflineTxForUnknownId)
                ) && 
                (
                    this.OfflineChargingMode == input.OfflineChargingMode ||
                    this.OfflineChargingMode.Equals(input.OfflineChargingMode)
                ) && 
                (
                    this.IsOperator == input.IsOperator ||
                    this.IsOperator.Equals(input.IsOperator)
                ) && 
                (
                    this.IsInstaller == input.IsInstaller ||
                    this.IsInstaller.Equals(input.IsInstaller)
                ) && 
                (
                    this.HasAuthManagementSystem == input.HasAuthManagementSystem ||
                    this.HasAuthManagementSystem.Equals(input.HasAuthManagementSystem)
                ) && 
                (
                    this.UseOcppIntegration == input.UseOcppIntegration ||
                    this.UseOcppIntegration.Equals(input.UseOcppIntegration)
                ) && 
                (
                    this.UseAmqpIntegration == input.UseAmqpIntegration ||
                    this.UseAmqpIntegration.Equals(input.UseAmqpIntegration)
                ) && 
                (
                    this.IsTest == input.IsTest ||
                    this.IsTest.Equals(input.IsTest)
                ) && 
                (
                    this.InProduction == input.InProduction ||
                    this.InProduction.Equals(input.InProduction)
                ) && 
                (
                    this.AuthorizeChargingWithEasee == input.AuthorizeChargingWithEasee ||
                    this.AuthorizeChargingWithEasee.Equals(input.AuthorizeChargingWithEasee)
                ) && 
                (
                    this.SubscriptionKey == input.SubscriptionKey ||
                    (this.SubscriptionKey != null &&
                    this.SubscriptionKey.Equals(input.SubscriptionKey))
                ) && 
                (
                    this.IsEasee == input.IsEasee ||
                    this.IsEasee.Equals(input.IsEasee)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Short != null)
                {
                    hashCode = (hashCode * 59) + this.Short.GetHashCode();
                }
                if (this.Long != null)
                {
                    hashCode = (hashCode * 59) + this.Long.GetHashCode();
                }
                if (this.BigImage != null)
                {
                    hashCode = (hashCode * 59) + this.BigImage.GetHashCode();
                }
                if (this.SmallImage != null)
                {
                    hashCode = (hashCode * 59) + this.SmallImage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SmartButtonEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthorizationRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.RemoteStartRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.LocalPreAuthorizeEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.LocalAuthorizeOfflineEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowOfflineTxForUnknownId.GetHashCode();
                hashCode = (hashCode * 59) + this.OfflineChargingMode.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOperator.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInstaller.GetHashCode();
                hashCode = (hashCode * 59) + this.HasAuthManagementSystem.GetHashCode();
                hashCode = (hashCode * 59) + this.UseOcppIntegration.GetHashCode();
                hashCode = (hashCode * 59) + this.UseAmqpIntegration.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTest.GetHashCode();
                hashCode = (hashCode * 59) + this.InProduction.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthorizeChargingWithEasee.GetHashCode();
                if (this.SubscriptionKey != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriptionKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsEasee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
