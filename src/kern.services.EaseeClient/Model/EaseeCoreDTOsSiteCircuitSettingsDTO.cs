/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsSiteCircuitSettingsDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Site.CircuitSettingsDTO")]
    public partial class EaseeCoreDTOsSiteCircuitSettingsDTO : IEquatable<EaseeCoreDTOsSiteCircuitSettingsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsSiteCircuitSettingsDTO" /> class.
        /// </summary>
        /// <param name="masterChargerId">masterChargerId.</param>
        /// <param name="dynamicCircuitCurrentP1">dynamicCircuitCurrentP1.</param>
        /// <param name="dynamicCircuitCurrentP2">dynamicCircuitCurrentP2.</param>
        /// <param name="dynamicCircuitCurrentP3">dynamicCircuitCurrentP3.</param>
        /// <param name="maxCircuitCurrentP1">maxCircuitCurrentP1.</param>
        /// <param name="maxCircuitCurrentP2">maxCircuitCurrentP2.</param>
        /// <param name="maxCircuitCurrentP3">maxCircuitCurrentP3.</param>
        /// <param name="enableIdleCurrent">enableIdleCurrent.</param>
        /// <param name="offlineMaxCircuitCurrentP1">offlineMaxCircuitCurrentP1.</param>
        /// <param name="offlineMaxCircuitCurrentP2">offlineMaxCircuitCurrentP2.</param>
        /// <param name="offlineMaxCircuitCurrentP3">offlineMaxCircuitCurrentP3.</param>
        public EaseeCoreDTOsSiteCircuitSettingsDTO(string masterChargerId = default(string), double? dynamicCircuitCurrentP1 = default(double?), double? dynamicCircuitCurrentP2 = default(double?), double? dynamicCircuitCurrentP3 = default(double?), double? maxCircuitCurrentP1 = default(double?), double? maxCircuitCurrentP2 = default(double?), double? maxCircuitCurrentP3 = default(double?), bool? enableIdleCurrent = default(bool?), int? offlineMaxCircuitCurrentP1 = default(int?), int? offlineMaxCircuitCurrentP2 = default(int?), int? offlineMaxCircuitCurrentP3 = default(int?))
        {
            this.MasterChargerId = masterChargerId;
            this.DynamicCircuitCurrentP1 = dynamicCircuitCurrentP1;
            this.DynamicCircuitCurrentP2 = dynamicCircuitCurrentP2;
            this.DynamicCircuitCurrentP3 = dynamicCircuitCurrentP3;
            this.MaxCircuitCurrentP1 = maxCircuitCurrentP1;
            this.MaxCircuitCurrentP2 = maxCircuitCurrentP2;
            this.MaxCircuitCurrentP3 = maxCircuitCurrentP3;
            this.EnableIdleCurrent = enableIdleCurrent;
            this.OfflineMaxCircuitCurrentP1 = offlineMaxCircuitCurrentP1;
            this.OfflineMaxCircuitCurrentP2 = offlineMaxCircuitCurrentP2;
            this.OfflineMaxCircuitCurrentP3 = offlineMaxCircuitCurrentP3;
        }

        /// <summary>
        /// Gets or Sets MasterChargerId
        /// </summary>
        [DataMember(Name = "masterChargerId", EmitDefaultValue = true)]
        public string MasterChargerId { get; set; }

        /// <summary>
        /// Gets or Sets DynamicCircuitCurrentP1
        /// </summary>
        [DataMember(Name = "dynamicCircuitCurrentP1", EmitDefaultValue = true)]
        public double? DynamicCircuitCurrentP1 { get; set; }

        /// <summary>
        /// Gets or Sets DynamicCircuitCurrentP2
        /// </summary>
        [DataMember(Name = "dynamicCircuitCurrentP2", EmitDefaultValue = true)]
        public double? DynamicCircuitCurrentP2 { get; set; }

        /// <summary>
        /// Gets or Sets DynamicCircuitCurrentP3
        /// </summary>
        [DataMember(Name = "dynamicCircuitCurrentP3", EmitDefaultValue = true)]
        public double? DynamicCircuitCurrentP3 { get; set; }

        /// <summary>
        /// Gets or Sets MaxCircuitCurrentP1
        /// </summary>
        [DataMember(Name = "maxCircuitCurrentP1", EmitDefaultValue = true)]
        public double? MaxCircuitCurrentP1 { get; set; }

        /// <summary>
        /// Gets or Sets MaxCircuitCurrentP2
        /// </summary>
        [DataMember(Name = "maxCircuitCurrentP2", EmitDefaultValue = true)]
        public double? MaxCircuitCurrentP2 { get; set; }

        /// <summary>
        /// Gets or Sets MaxCircuitCurrentP3
        /// </summary>
        [DataMember(Name = "maxCircuitCurrentP3", EmitDefaultValue = true)]
        public double? MaxCircuitCurrentP3 { get; set; }

        /// <summary>
        /// Gets or Sets EnableIdleCurrent
        /// </summary>
        [DataMember(Name = "enableIdleCurrent", EmitDefaultValue = true)]
        public bool? EnableIdleCurrent { get; set; }

        /// <summary>
        /// Gets or Sets OfflineMaxCircuitCurrentP1
        /// </summary>
        [DataMember(Name = "offlineMaxCircuitCurrentP1", EmitDefaultValue = true)]
        public int? OfflineMaxCircuitCurrentP1 { get; set; }

        /// <summary>
        /// Gets or Sets OfflineMaxCircuitCurrentP2
        /// </summary>
        [DataMember(Name = "offlineMaxCircuitCurrentP2", EmitDefaultValue = true)]
        public int? OfflineMaxCircuitCurrentP2 { get; set; }

        /// <summary>
        /// Gets or Sets OfflineMaxCircuitCurrentP3
        /// </summary>
        [DataMember(Name = "offlineMaxCircuitCurrentP3", EmitDefaultValue = true)]
        public int? OfflineMaxCircuitCurrentP3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsSiteCircuitSettingsDTO {\n");
            sb.Append("  MasterChargerId: ").Append(MasterChargerId).Append("\n");
            sb.Append("  DynamicCircuitCurrentP1: ").Append(DynamicCircuitCurrentP1).Append("\n");
            sb.Append("  DynamicCircuitCurrentP2: ").Append(DynamicCircuitCurrentP2).Append("\n");
            sb.Append("  DynamicCircuitCurrentP3: ").Append(DynamicCircuitCurrentP3).Append("\n");
            sb.Append("  MaxCircuitCurrentP1: ").Append(MaxCircuitCurrentP1).Append("\n");
            sb.Append("  MaxCircuitCurrentP2: ").Append(MaxCircuitCurrentP2).Append("\n");
            sb.Append("  MaxCircuitCurrentP3: ").Append(MaxCircuitCurrentP3).Append("\n");
            sb.Append("  EnableIdleCurrent: ").Append(EnableIdleCurrent).Append("\n");
            sb.Append("  OfflineMaxCircuitCurrentP1: ").Append(OfflineMaxCircuitCurrentP1).Append("\n");
            sb.Append("  OfflineMaxCircuitCurrentP2: ").Append(OfflineMaxCircuitCurrentP2).Append("\n");
            sb.Append("  OfflineMaxCircuitCurrentP3: ").Append(OfflineMaxCircuitCurrentP3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsSiteCircuitSettingsDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsSiteCircuitSettingsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsSiteCircuitSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsSiteCircuitSettingsDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MasterChargerId == input.MasterChargerId ||
                    (this.MasterChargerId != null &&
                    this.MasterChargerId.Equals(input.MasterChargerId))
                ) && 
                (
                    this.DynamicCircuitCurrentP1 == input.DynamicCircuitCurrentP1 ||
                    (this.DynamicCircuitCurrentP1 != null &&
                    this.DynamicCircuitCurrentP1.Equals(input.DynamicCircuitCurrentP1))
                ) && 
                (
                    this.DynamicCircuitCurrentP2 == input.DynamicCircuitCurrentP2 ||
                    (this.DynamicCircuitCurrentP2 != null &&
                    this.DynamicCircuitCurrentP2.Equals(input.DynamicCircuitCurrentP2))
                ) && 
                (
                    this.DynamicCircuitCurrentP3 == input.DynamicCircuitCurrentP3 ||
                    (this.DynamicCircuitCurrentP3 != null &&
                    this.DynamicCircuitCurrentP3.Equals(input.DynamicCircuitCurrentP3))
                ) && 
                (
                    this.MaxCircuitCurrentP1 == input.MaxCircuitCurrentP1 ||
                    (this.MaxCircuitCurrentP1 != null &&
                    this.MaxCircuitCurrentP1.Equals(input.MaxCircuitCurrentP1))
                ) && 
                (
                    this.MaxCircuitCurrentP2 == input.MaxCircuitCurrentP2 ||
                    (this.MaxCircuitCurrentP2 != null &&
                    this.MaxCircuitCurrentP2.Equals(input.MaxCircuitCurrentP2))
                ) && 
                (
                    this.MaxCircuitCurrentP3 == input.MaxCircuitCurrentP3 ||
                    (this.MaxCircuitCurrentP3 != null &&
                    this.MaxCircuitCurrentP3.Equals(input.MaxCircuitCurrentP3))
                ) && 
                (
                    this.EnableIdleCurrent == input.EnableIdleCurrent ||
                    (this.EnableIdleCurrent != null &&
                    this.EnableIdleCurrent.Equals(input.EnableIdleCurrent))
                ) && 
                (
                    this.OfflineMaxCircuitCurrentP1 == input.OfflineMaxCircuitCurrentP1 ||
                    (this.OfflineMaxCircuitCurrentP1 != null &&
                    this.OfflineMaxCircuitCurrentP1.Equals(input.OfflineMaxCircuitCurrentP1))
                ) && 
                (
                    this.OfflineMaxCircuitCurrentP2 == input.OfflineMaxCircuitCurrentP2 ||
                    (this.OfflineMaxCircuitCurrentP2 != null &&
                    this.OfflineMaxCircuitCurrentP2.Equals(input.OfflineMaxCircuitCurrentP2))
                ) && 
                (
                    this.OfflineMaxCircuitCurrentP3 == input.OfflineMaxCircuitCurrentP3 ||
                    (this.OfflineMaxCircuitCurrentP3 != null &&
                    this.OfflineMaxCircuitCurrentP3.Equals(input.OfflineMaxCircuitCurrentP3))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MasterChargerId != null)
                {
                    hashCode = (hashCode * 59) + this.MasterChargerId.GetHashCode();
                }
                if (this.DynamicCircuitCurrentP1 != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicCircuitCurrentP1.GetHashCode();
                }
                if (this.DynamicCircuitCurrentP2 != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicCircuitCurrentP2.GetHashCode();
                }
                if (this.DynamicCircuitCurrentP3 != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicCircuitCurrentP3.GetHashCode();
                }
                if (this.MaxCircuitCurrentP1 != null)
                {
                    hashCode = (hashCode * 59) + this.MaxCircuitCurrentP1.GetHashCode();
                }
                if (this.MaxCircuitCurrentP2 != null)
                {
                    hashCode = (hashCode * 59) + this.MaxCircuitCurrentP2.GetHashCode();
                }
                if (this.MaxCircuitCurrentP3 != null)
                {
                    hashCode = (hashCode * 59) + this.MaxCircuitCurrentP3.GetHashCode();
                }
                if (this.EnableIdleCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.EnableIdleCurrent.GetHashCode();
                }
                if (this.OfflineMaxCircuitCurrentP1 != null)
                {
                    hashCode = (hashCode * 59) + this.OfflineMaxCircuitCurrentP1.GetHashCode();
                }
                if (this.OfflineMaxCircuitCurrentP2 != null)
                {
                    hashCode = (hashCode * 59) + this.OfflineMaxCircuitCurrentP2.GetHashCode();
                }
                if (this.OfflineMaxCircuitCurrentP3 != null)
                {
                    hashCode = (hashCode * 59) + this.OfflineMaxCircuitCurrentP3.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
