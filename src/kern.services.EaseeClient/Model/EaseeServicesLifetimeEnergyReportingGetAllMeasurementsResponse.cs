/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse
    /// </summary>
    [DataContract(Name = "Easee.Services.LifetimeEnergyReporting.GetAllMeasurementsResponse")]
    public partial class EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse : IEquatable<EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse" /> class.
        /// </summary>
        /// <param name="measurements">measurements.</param>
        public EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse(List<EaseeServicesLifetimeEnergyReportingMeasurement> measurements = default(List<EaseeServicesLifetimeEnergyReportingMeasurement>))
        {
            this.Measurements = measurements;
        }

        /// <summary>
        /// Gets or Sets Measurements
        /// </summary>
        [DataMember(Name = "measurements", EmitDefaultValue = true)]
        public List<EaseeServicesLifetimeEnergyReportingMeasurement> Measurements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse {\n");
            sb.Append("  Measurements: ").Append(Measurements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse);
        }

        /// <summary>
        /// Returns true if EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeServicesLifetimeEnergyReportingGetAllMeasurementsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Measurements == input.Measurements ||
                    this.Measurements != null &&
                    input.Measurements != null &&
                    this.Measurements.SequenceEqual(input.Measurements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Measurements != null)
                {
                    hashCode = (hashCode * 59) + this.Measurements.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
