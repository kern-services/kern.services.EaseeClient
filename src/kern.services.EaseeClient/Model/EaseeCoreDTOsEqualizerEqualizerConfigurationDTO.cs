/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsEqualizerEqualizerConfigurationDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Equalizer.EqualizerConfigurationDTO")]
    public partial class EaseeCoreDTOsEqualizerEqualizerConfigurationDTO : IEquatable<EaseeCoreDTOsEqualizerEqualizerConfigurationDTO>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ExternalMeterType
        /// </summary>
        [DataMember(Name = "externalMeterType", EmitDefaultValue = false)]
        public EaseeCoreEnumsExternalMeterType? ExternalMeterType { get; set; }

        /// <summary>
        /// Gets or Sets GridType
        /// </summary>
        [DataMember(Name = "gridType", EmitDefaultValue = false)]
        public EaseeCoreEnumsGridType? GridType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsEqualizerEqualizerConfigurationDTO" /> class.
        /// </summary>
        /// <param name="ssid">ssid.</param>
        /// <param name="equalizerId">equalizerId.</param>
        /// <param name="masterBackPlateId">masterBackPlateId.</param>
        /// <param name="siteStructure">siteStructure.</param>
        /// <param name="meterId">meterId.</param>
        /// <param name="meterType">meterType.</param>
        /// <param name="externalMeterType">externalMeterType.</param>
        /// <param name="gridType">gridType.</param>
        /// <param name="numPhases">numPhases.</param>
        /// <param name="maxAllocatedCurrent">maxAllocatedCurrent.</param>
        /// <param name="childReport">childReport.</param>
        /// <param name="deviceMode">deviceMode.</param>
        public EaseeCoreDTOsEqualizerEqualizerConfigurationDTO(string ssid = default(string), string equalizerId = default(string), string masterBackPlateId = default(string), string siteStructure = default(string), string meterId = default(string), string meterType = default(string), EaseeCoreEnumsExternalMeterType? externalMeterType = default(EaseeCoreEnumsExternalMeterType?), EaseeCoreEnumsGridType? gridType = default(EaseeCoreEnumsGridType?), int? numPhases = default(int?), int? maxAllocatedCurrent = default(int?), EaseeCoreDTOsEqualizerChildReportDTO childReport = default(EaseeCoreDTOsEqualizerChildReportDTO), EaseeCoreDTOsEqualizerDeviceModeDTO deviceMode = default(EaseeCoreDTOsEqualizerDeviceModeDTO))
        {
            this.Ssid = ssid;
            this.EqualizerId = equalizerId;
            this.MasterBackPlateId = masterBackPlateId;
            this.SiteStructure = siteStructure;
            this.MeterId = meterId;
            this.MeterType = meterType;
            this.ExternalMeterType = externalMeterType;
            this.GridType = gridType;
            this.NumPhases = numPhases;
            this.MaxAllocatedCurrent = maxAllocatedCurrent;
            this.ChildReport = childReport;
            this.DeviceMode = deviceMode;
        }

        /// <summary>
        /// Gets or Sets Ssid
        /// </summary>
        [DataMember(Name = "ssid", EmitDefaultValue = true)]
        public string Ssid { get; set; }

        /// <summary>
        /// Gets or Sets EqualizerId
        /// </summary>
        [DataMember(Name = "equalizerId", EmitDefaultValue = true)]
        public string EqualizerId { get; set; }

        /// <summary>
        /// Gets or Sets MasterBackPlateId
        /// </summary>
        [DataMember(Name = "masterBackPlateId", EmitDefaultValue = true)]
        public string MasterBackPlateId { get; set; }

        /// <summary>
        /// Gets or Sets SiteStructure
        /// </summary>
        [DataMember(Name = "siteStructure", EmitDefaultValue = true)]
        public string SiteStructure { get; set; }

        /// <summary>
        /// Gets or Sets MeterId
        /// </summary>
        [DataMember(Name = "meterId", EmitDefaultValue = true)]
        public string MeterId { get; set; }

        /// <summary>
        /// Gets or Sets MeterType
        /// </summary>
        [DataMember(Name = "meterType", EmitDefaultValue = true)]
        public string MeterType { get; set; }

        /// <summary>
        /// Gets or Sets NumPhases
        /// </summary>
        [DataMember(Name = "numPhases", EmitDefaultValue = true)]
        public int? NumPhases { get; set; }

        /// <summary>
        /// Gets or Sets MaxAllocatedCurrent
        /// </summary>
        [DataMember(Name = "maxAllocatedCurrent", EmitDefaultValue = true)]
        public int? MaxAllocatedCurrent { get; set; }

        /// <summary>
        /// Gets or Sets ChildReport
        /// </summary>
        [DataMember(Name = "childReport", EmitDefaultValue = false)]
        public EaseeCoreDTOsEqualizerChildReportDTO ChildReport { get; set; }

        /// <summary>
        /// Gets or Sets DeviceMode
        /// </summary>
        [DataMember(Name = "deviceMode", EmitDefaultValue = false)]
        public EaseeCoreDTOsEqualizerDeviceModeDTO DeviceMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsEqualizerEqualizerConfigurationDTO {\n");
            sb.Append("  Ssid: ").Append(Ssid).Append("\n");
            sb.Append("  EqualizerId: ").Append(EqualizerId).Append("\n");
            sb.Append("  MasterBackPlateId: ").Append(MasterBackPlateId).Append("\n");
            sb.Append("  SiteStructure: ").Append(SiteStructure).Append("\n");
            sb.Append("  MeterId: ").Append(MeterId).Append("\n");
            sb.Append("  MeterType: ").Append(MeterType).Append("\n");
            sb.Append("  ExternalMeterType: ").Append(ExternalMeterType).Append("\n");
            sb.Append("  GridType: ").Append(GridType).Append("\n");
            sb.Append("  NumPhases: ").Append(NumPhases).Append("\n");
            sb.Append("  MaxAllocatedCurrent: ").Append(MaxAllocatedCurrent).Append("\n");
            sb.Append("  ChildReport: ").Append(ChildReport).Append("\n");
            sb.Append("  DeviceMode: ").Append(DeviceMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsEqualizerEqualizerConfigurationDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsEqualizerEqualizerConfigurationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsEqualizerEqualizerConfigurationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsEqualizerEqualizerConfigurationDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ssid == input.Ssid ||
                    (this.Ssid != null &&
                    this.Ssid.Equals(input.Ssid))
                ) && 
                (
                    this.EqualizerId == input.EqualizerId ||
                    (this.EqualizerId != null &&
                    this.EqualizerId.Equals(input.EqualizerId))
                ) && 
                (
                    this.MasterBackPlateId == input.MasterBackPlateId ||
                    (this.MasterBackPlateId != null &&
                    this.MasterBackPlateId.Equals(input.MasterBackPlateId))
                ) && 
                (
                    this.SiteStructure == input.SiteStructure ||
                    (this.SiteStructure != null &&
                    this.SiteStructure.Equals(input.SiteStructure))
                ) && 
                (
                    this.MeterId == input.MeterId ||
                    (this.MeterId != null &&
                    this.MeterId.Equals(input.MeterId))
                ) && 
                (
                    this.MeterType == input.MeterType ||
                    (this.MeterType != null &&
                    this.MeterType.Equals(input.MeterType))
                ) && 
                (
                    this.ExternalMeterType == input.ExternalMeterType ||
                    this.ExternalMeterType.Equals(input.ExternalMeterType)
                ) && 
                (
                    this.GridType == input.GridType ||
                    this.GridType.Equals(input.GridType)
                ) && 
                (
                    this.NumPhases == input.NumPhases ||
                    (this.NumPhases != null &&
                    this.NumPhases.Equals(input.NumPhases))
                ) && 
                (
                    this.MaxAllocatedCurrent == input.MaxAllocatedCurrent ||
                    (this.MaxAllocatedCurrent != null &&
                    this.MaxAllocatedCurrent.Equals(input.MaxAllocatedCurrent))
                ) && 
                (
                    this.ChildReport == input.ChildReport ||
                    (this.ChildReport != null &&
                    this.ChildReport.Equals(input.ChildReport))
                ) && 
                (
                    this.DeviceMode == input.DeviceMode ||
                    (this.DeviceMode != null &&
                    this.DeviceMode.Equals(input.DeviceMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ssid != null)
                {
                    hashCode = (hashCode * 59) + this.Ssid.GetHashCode();
                }
                if (this.EqualizerId != null)
                {
                    hashCode = (hashCode * 59) + this.EqualizerId.GetHashCode();
                }
                if (this.MasterBackPlateId != null)
                {
                    hashCode = (hashCode * 59) + this.MasterBackPlateId.GetHashCode();
                }
                if (this.SiteStructure != null)
                {
                    hashCode = (hashCode * 59) + this.SiteStructure.GetHashCode();
                }
                if (this.MeterId != null)
                {
                    hashCode = (hashCode * 59) + this.MeterId.GetHashCode();
                }
                if (this.MeterType != null)
                {
                    hashCode = (hashCode * 59) + this.MeterType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExternalMeterType.GetHashCode();
                hashCode = (hashCode * 59) + this.GridType.GetHashCode();
                if (this.NumPhases != null)
                {
                    hashCode = (hashCode * 59) + this.NumPhases.GetHashCode();
                }
                if (this.MaxAllocatedCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.MaxAllocatedCurrent.GetHashCode();
                }
                if (this.ChildReport != null)
                {
                    hashCode = (hashCode * 59) + this.ChildReport.GetHashCode();
                }
                if (this.DeviceMode != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceMode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
