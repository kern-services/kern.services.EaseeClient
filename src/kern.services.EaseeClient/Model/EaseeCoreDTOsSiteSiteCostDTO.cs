/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsSiteSiteCostDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Site.SiteCostDTO")]
    public partial class EaseeCoreDTOsSiteSiteCostDTO : IEquatable<EaseeCoreDTOsSiteSiteCostDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsSiteSiteCostDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EaseeCoreDTOsSiteSiteCostDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsSiteSiteCostDTO" /> class.
        /// </summary>
        /// <param name="currencyId">currencyId (required).</param>
        /// <param name="costPerKWh">costPerKWh.</param>
        /// <param name="costPerKwhExcludeVat">costPerKwhExcludeVat.</param>
        /// <param name="vat">vat.</param>
        public EaseeCoreDTOsSiteSiteCostDTO(string currencyId = default(string), double? costPerKWh = default(double?), double? costPerKwhExcludeVat = default(double?), double? vat = default(double?))
        {
            // to ensure "currencyId" is required (not null)
            if (currencyId == null)
            {
                throw new ArgumentNullException("currencyId is a required property for EaseeCoreDTOsSiteSiteCostDTO and cannot be null");
            }
            this.CurrencyId = currencyId;
            this.CostPerKWh = costPerKWh;
            this.CostPerKwhExcludeVat = costPerKwhExcludeVat;
            this.Vat = vat;
        }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name = "currencyId", IsRequired = true, EmitDefaultValue = true)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets CostPerKWh
        /// </summary>
        [DataMember(Name = "costPerKWh", EmitDefaultValue = true)]
        public double? CostPerKWh { get; set; }

        /// <summary>
        /// Gets or Sets CostPerKwhExcludeVat
        /// </summary>
        [DataMember(Name = "costPerKwhExcludeVat", EmitDefaultValue = true)]
        public double? CostPerKwhExcludeVat { get; set; }

        /// <summary>
        /// Gets or Sets Vat
        /// </summary>
        [DataMember(Name = "vat", EmitDefaultValue = true)]
        public double? Vat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsSiteSiteCostDTO {\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CostPerKWh: ").Append(CostPerKWh).Append("\n");
            sb.Append("  CostPerKwhExcludeVat: ").Append(CostPerKwhExcludeVat).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsSiteSiteCostDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsSiteSiteCostDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsSiteSiteCostDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsSiteSiteCostDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.CostPerKWh == input.CostPerKWh ||
                    (this.CostPerKWh != null &&
                    this.CostPerKWh.Equals(input.CostPerKWh))
                ) && 
                (
                    this.CostPerKwhExcludeVat == input.CostPerKwhExcludeVat ||
                    (this.CostPerKwhExcludeVat != null &&
                    this.CostPerKwhExcludeVat.Equals(input.CostPerKwhExcludeVat))
                ) && 
                (
                    this.Vat == input.Vat ||
                    (this.Vat != null &&
                    this.Vat.Equals(input.Vat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.CostPerKWh != null)
                {
                    hashCode = (hashCode * 59) + this.CostPerKWh.GetHashCode();
                }
                if (this.CostPerKwhExcludeVat != null)
                {
                    hashCode = (hashCode * 59) + this.CostPerKwhExcludeVat.GetHashCode();
                }
                if (this.Vat != null)
                {
                    hashCode = (hashCode * 59) + this.Vat.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
