/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsChargerChargePlanDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Charger.ChargePlanDTO")]
    public partial class EaseeCoreDTOsChargerChargePlanDTO : IEquatable<EaseeCoreDTOsChargerChargePlanDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsChargerChargePlanDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="chargeStartTime">chargeStartTime.</param>
        /// <param name="chargeStopTime">chargeStopTime.</param>
        /// <param name="repeat">repeat.</param>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="chargingCurrentLimit">chargingCurrentLimit (default to 32).</param>
        public EaseeCoreDTOsChargerChargePlanDTO(string id = default(string), DateTime chargeStartTime = default(DateTime), DateTime? chargeStopTime = default(DateTime?), bool repeat = default(bool), bool? isEnabled = default(bool?), int chargingCurrentLimit = 32)
        {
            this.Id = id;
            this.ChargeStartTime = chargeStartTime;
            this.ChargeStopTime = chargeStopTime;
            this.Repeat = repeat;
            this.IsEnabled = isEnabled;
            this.ChargingCurrentLimit = chargingCurrentLimit;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ChargeStartTime
        /// </summary>
        [DataMember(Name = "chargeStartTime", EmitDefaultValue = false)]
        public DateTime ChargeStartTime { get; set; }

        /// <summary>
        /// Gets or Sets ChargeStopTime
        /// </summary>
        [DataMember(Name = "chargeStopTime", EmitDefaultValue = true)]
        public DateTime? ChargeStopTime { get; set; }

        /// <summary>
        /// Gets or Sets Repeat
        /// </summary>
        [DataMember(Name = "repeat", EmitDefaultValue = true)]
        public bool Repeat { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name = "isEnabled", EmitDefaultValue = true)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ChargingCurrentLimit
        /// </summary>
        [DataMember(Name = "chargingCurrentLimit", EmitDefaultValue = false)]
        public int ChargingCurrentLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsChargerChargePlanDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ChargeStartTime: ").Append(ChargeStartTime).Append("\n");
            sb.Append("  ChargeStopTime: ").Append(ChargeStopTime).Append("\n");
            sb.Append("  Repeat: ").Append(Repeat).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  ChargingCurrentLimit: ").Append(ChargingCurrentLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsChargerChargePlanDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsChargerChargePlanDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsChargerChargePlanDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsChargerChargePlanDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ChargeStartTime == input.ChargeStartTime ||
                    (this.ChargeStartTime != null &&
                    this.ChargeStartTime.Equals(input.ChargeStartTime))
                ) && 
                (
                    this.ChargeStopTime == input.ChargeStopTime ||
                    (this.ChargeStopTime != null &&
                    this.ChargeStopTime.Equals(input.ChargeStopTime))
                ) && 
                (
                    this.Repeat == input.Repeat ||
                    this.Repeat.Equals(input.Repeat)
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    (this.IsEnabled != null &&
                    this.IsEnabled.Equals(input.IsEnabled))
                ) && 
                (
                    this.ChargingCurrentLimit == input.ChargingCurrentLimit ||
                    this.ChargingCurrentLimit.Equals(input.ChargingCurrentLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ChargeStartTime != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeStartTime.GetHashCode();
                }
                if (this.ChargeStopTime != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeStopTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Repeat.GetHashCode();
                if (this.IsEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.IsEnabled.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChargingCurrentLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ChargingCurrentLimit (int) maximum
            if (this.ChargingCurrentLimit > (int)32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChargingCurrentLimit, must be a value less than or equal to 32.", new [] { "ChargingCurrentLimit" });
            }

            // ChargingCurrentLimit (int) minimum
            if (this.ChargingCurrentLimit < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChargingCurrentLimit, must be a value greater than or equal to 0.", new [] { "ChargingCurrentLimit" });
            }

            yield break;
        }
    }

}
