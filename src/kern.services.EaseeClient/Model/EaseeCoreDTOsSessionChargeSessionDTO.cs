/*
 * Easee Cloud API
 *
 * Find more information and documentation at <br/> <a href='https://developer.easee.cloud'>https://developer.easee.cloud</a>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.EaseeClient.Client.OpenAPIDateConverter;

namespace kern.services.EaseeClient.Model
{
    /// <summary>
    /// EaseeCoreDTOsSessionChargeSessionDTO
    /// </summary>
    [DataContract(Name = "Easee.Core.DTOs.Session.ChargeSessionDTO")]
    public partial class EaseeCoreDTOsSessionChargeSessionDTO : IEquatable<EaseeCoreDTOsSessionChargeSessionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EaseeCoreDTOsSessionChargeSessionDTO" /> class.
        /// </summary>
        /// <param name="carConnected">carConnected.</param>
        /// <param name="carDisconnected">carDisconnected.</param>
        /// <param name="kiloWattHours">kiloWattHours.</param>
        /// <param name="pricePerKwhExcludingVat">pricePerKwhExcludingVat.</param>
        /// <param name="pricePrKwhIncludingVat">pricePrKwhIncludingVat.</param>
        /// <param name="costExcludingVat">costExcludingVat.</param>
        /// <param name="costIncludingVat">costIncludingVat.</param>
        /// <param name="vatPercentage">vatPercentage.</param>
        /// <param name="currency">currency.</param>
        /// <param name="actualDurationSeconds">actualDurationSeconds.</param>
        /// <param name="firstEnergyTransferPeriodStarted">firstEnergyTransferPeriodStarted.</param>
        /// <param name="lastEnergyTransferPeriodEnd">lastEnergyTransferPeriodEnd.</param>
        /// <param name="id">id.</param>
        public EaseeCoreDTOsSessionChargeSessionDTO(DateTime? carConnected = default(DateTime?), DateTime? carDisconnected = default(DateTime?), double kiloWattHours = default(double), double pricePerKwhExcludingVat = default(double), double pricePrKwhIncludingVat = default(double), double costExcludingVat = default(double), double costIncludingVat = default(double), double? vatPercentage = default(double?), string currency = default(string), int? actualDurationSeconds = default(int?), DateTime? firstEnergyTransferPeriodStarted = default(DateTime?), DateTime? lastEnergyTransferPeriodEnd = default(DateTime?), int id = default(int))
        {
            this.CarConnected = carConnected;
            this.CarDisconnected = carDisconnected;
            this.KiloWattHours = kiloWattHours;
            this.PricePerKwhExcludingVat = pricePerKwhExcludingVat;
            this.PricePrKwhIncludingVat = pricePrKwhIncludingVat;
            this.CostExcludingVat = costExcludingVat;
            this.CostIncludingVat = costIncludingVat;
            this.VatPercentage = vatPercentage;
            this.Currency = currency;
            this.ActualDurationSeconds = actualDurationSeconds;
            this.FirstEnergyTransferPeriodStarted = firstEnergyTransferPeriodStarted;
            this.LastEnergyTransferPeriodEnd = lastEnergyTransferPeriodEnd;
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets CarConnected
        /// </summary>
        [DataMember(Name = "carConnected", EmitDefaultValue = true)]
        public DateTime? CarConnected { get; set; }

        /// <summary>
        /// Gets or Sets CarDisconnected
        /// </summary>
        [DataMember(Name = "carDisconnected", EmitDefaultValue = true)]
        public DateTime? CarDisconnected { get; set; }

        /// <summary>
        /// Gets or Sets KiloWattHours
        /// </summary>
        [DataMember(Name = "kiloWattHours", EmitDefaultValue = false)]
        public double KiloWattHours { get; set; }

        /// <summary>
        /// Gets or Sets PricePerKwhExcludingVat
        /// </summary>
        [DataMember(Name = "pricePerKwhExcludingVat", EmitDefaultValue = false)]
        public double PricePerKwhExcludingVat { get; set; }

        /// <summary>
        /// Gets or Sets PricePrKwhIncludingVat
        /// </summary>
        [DataMember(Name = "pricePrKwhIncludingVat", EmitDefaultValue = false)]
        public double PricePrKwhIncludingVat { get; set; }

        /// <summary>
        /// Gets or Sets CostExcludingVat
        /// </summary>
        [DataMember(Name = "costExcludingVat", EmitDefaultValue = false)]
        public double CostExcludingVat { get; set; }

        /// <summary>
        /// Gets or Sets CostIncludingVat
        /// </summary>
        [DataMember(Name = "costIncludingVat", EmitDefaultValue = false)]
        public double CostIncludingVat { get; set; }

        /// <summary>
        /// Gets or Sets VatPercentage
        /// </summary>
        [DataMember(Name = "vatPercentage", EmitDefaultValue = true)]
        public double? VatPercentage { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets ActualDurationSeconds
        /// </summary>
        [DataMember(Name = "actualDurationSeconds", EmitDefaultValue = true)]
        public int? ActualDurationSeconds { get; set; }

        /// <summary>
        /// Gets or Sets FirstEnergyTransferPeriodStarted
        /// </summary>
        [DataMember(Name = "firstEnergyTransferPeriodStarted", EmitDefaultValue = true)]
        public DateTime? FirstEnergyTransferPeriodStarted { get; set; }

        /// <summary>
        /// Gets or Sets LastEnergyTransferPeriodEnd
        /// </summary>
        [DataMember(Name = "lastEnergyTransferPeriodEnd", EmitDefaultValue = true)]
        public DateTime? LastEnergyTransferPeriodEnd { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EaseeCoreDTOsSessionChargeSessionDTO {\n");
            sb.Append("  CarConnected: ").Append(CarConnected).Append("\n");
            sb.Append("  CarDisconnected: ").Append(CarDisconnected).Append("\n");
            sb.Append("  KiloWattHours: ").Append(KiloWattHours).Append("\n");
            sb.Append("  PricePerKwhExcludingVat: ").Append(PricePerKwhExcludingVat).Append("\n");
            sb.Append("  PricePrKwhIncludingVat: ").Append(PricePrKwhIncludingVat).Append("\n");
            sb.Append("  CostExcludingVat: ").Append(CostExcludingVat).Append("\n");
            sb.Append("  CostIncludingVat: ").Append(CostIncludingVat).Append("\n");
            sb.Append("  VatPercentage: ").Append(VatPercentage).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ActualDurationSeconds: ").Append(ActualDurationSeconds).Append("\n");
            sb.Append("  FirstEnergyTransferPeriodStarted: ").Append(FirstEnergyTransferPeriodStarted).Append("\n");
            sb.Append("  LastEnergyTransferPeriodEnd: ").Append(LastEnergyTransferPeriodEnd).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EaseeCoreDTOsSessionChargeSessionDTO);
        }

        /// <summary>
        /// Returns true if EaseeCoreDTOsSessionChargeSessionDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EaseeCoreDTOsSessionChargeSessionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EaseeCoreDTOsSessionChargeSessionDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CarConnected == input.CarConnected ||
                    (this.CarConnected != null &&
                    this.CarConnected.Equals(input.CarConnected))
                ) && 
                (
                    this.CarDisconnected == input.CarDisconnected ||
                    (this.CarDisconnected != null &&
                    this.CarDisconnected.Equals(input.CarDisconnected))
                ) && 
                (
                    this.KiloWattHours == input.KiloWattHours ||
                    this.KiloWattHours.Equals(input.KiloWattHours)
                ) && 
                (
                    this.PricePerKwhExcludingVat == input.PricePerKwhExcludingVat ||
                    this.PricePerKwhExcludingVat.Equals(input.PricePerKwhExcludingVat)
                ) && 
                (
                    this.PricePrKwhIncludingVat == input.PricePrKwhIncludingVat ||
                    this.PricePrKwhIncludingVat.Equals(input.PricePrKwhIncludingVat)
                ) && 
                (
                    this.CostExcludingVat == input.CostExcludingVat ||
                    this.CostExcludingVat.Equals(input.CostExcludingVat)
                ) && 
                (
                    this.CostIncludingVat == input.CostIncludingVat ||
                    this.CostIncludingVat.Equals(input.CostIncludingVat)
                ) && 
                (
                    this.VatPercentage == input.VatPercentage ||
                    (this.VatPercentage != null &&
                    this.VatPercentage.Equals(input.VatPercentage))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ActualDurationSeconds == input.ActualDurationSeconds ||
                    (this.ActualDurationSeconds != null &&
                    this.ActualDurationSeconds.Equals(input.ActualDurationSeconds))
                ) && 
                (
                    this.FirstEnergyTransferPeriodStarted == input.FirstEnergyTransferPeriodStarted ||
                    (this.FirstEnergyTransferPeriodStarted != null &&
                    this.FirstEnergyTransferPeriodStarted.Equals(input.FirstEnergyTransferPeriodStarted))
                ) && 
                (
                    this.LastEnergyTransferPeriodEnd == input.LastEnergyTransferPeriodEnd ||
                    (this.LastEnergyTransferPeriodEnd != null &&
                    this.LastEnergyTransferPeriodEnd.Equals(input.LastEnergyTransferPeriodEnd))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CarConnected != null)
                {
                    hashCode = (hashCode * 59) + this.CarConnected.GetHashCode();
                }
                if (this.CarDisconnected != null)
                {
                    hashCode = (hashCode * 59) + this.CarDisconnected.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KiloWattHours.GetHashCode();
                hashCode = (hashCode * 59) + this.PricePerKwhExcludingVat.GetHashCode();
                hashCode = (hashCode * 59) + this.PricePrKwhIncludingVat.GetHashCode();
                hashCode = (hashCode * 59) + this.CostExcludingVat.GetHashCode();
                hashCode = (hashCode * 59) + this.CostIncludingVat.GetHashCode();
                if (this.VatPercentage != null)
                {
                    hashCode = (hashCode * 59) + this.VatPercentage.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.ActualDurationSeconds != null)
                {
                    hashCode = (hashCode * 59) + this.ActualDurationSeconds.GetHashCode();
                }
                if (this.FirstEnergyTransferPeriodStarted != null)
                {
                    hashCode = (hashCode * 59) + this.FirstEnergyTransferPeriodStarted.GetHashCode();
                }
                if (this.LastEnergyTransferPeriodEnd != null)
                {
                    hashCode = (hashCode * 59) + this.LastEnergyTransferPeriodEnd.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
